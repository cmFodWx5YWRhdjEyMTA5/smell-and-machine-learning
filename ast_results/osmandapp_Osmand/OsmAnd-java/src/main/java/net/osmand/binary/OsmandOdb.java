// isComment
package net.osmand.binary;

public final class isClassOrIsInterface {

    private isConstructor() {
    }

    public static void isMethod(com.google.protobuf.ExtensionRegistry isParameter) {
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        long isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndAddressIndexOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndAddressIndexOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndTransportIndex> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndTransportIndexOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndTransportIndexOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiIndex> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiIndexOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiIndexOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndexOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndMapIndexOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndexOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndRoutingIndexOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndStructureOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndStructure isVariable;

        public static OsmAndStructure isMethod() {
            return isNameExpr;
        }

        public OsmAndStructure isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndTransportIndex>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndMapIndex>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndAddressIndex>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiIndex>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndStructure.class, net.osmand.binary.OsmandOdb.OsmAndStructure.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndStructure> isVariable = new com.google.protobuf.AbstractParser<OsmAndStructure>() {

            public OsmAndStructure isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndStructure(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndStructure> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private long isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public long isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndAddressIndexOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndAddressIndexOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndTransportIndex> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndTransportIndex> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndTransportIndexOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndTransportIndexOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiIndex> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiIndex> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiIndexOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiIndexOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndexOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndMapIndexOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndexOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndRoutingIndexOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        private void isMethod() {
            isNameExpr = isIntegerConstant;
            isNameExpr = isStringConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isIntegerConstant;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndStructure isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndStructure isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndStructure isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndStructure isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndStructure isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndStructure isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndStructure isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndStructure isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndStructure isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndStructure isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndStructure isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndStructureOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndStructure.class, net.osmand.binary.OsmandOdb.OsmAndStructure.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                    isMethod();
                    isMethod();
                    isMethod();
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndStructure isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndStructure isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndStructure isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndStructure isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndStructure isVariable = new net.osmand.binary.OsmandOdb.OsmAndStructure(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndStructure) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndStructure) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndStructure isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndStructure isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndStructure) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private long isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public long isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(long isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndAddressIndex>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndAddressIndex, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndAddressIndexOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndAddressIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndAddressIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndAddressIndex> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressIndexOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndAddressIndexOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndAddressIndex, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndAddressIndexOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndAddressIndex, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndAddressIndexOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndTransportIndex> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndTransportIndex>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndTransportIndex, net.osmand.binary.OsmandOdb.OsmAndTransportIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndTransportIndexOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndTransportIndex> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndTransportIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndTransportIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndTransportIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndTransportIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndTransportIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndTransportIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndTransportIndex> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndTransportIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndTransportIndexOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndTransportIndexOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndTransportIndex.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndTransportIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndTransportIndex.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndTransportIndex, net.osmand.binary.OsmandOdb.OsmAndTransportIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndTransportIndexOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndTransportIndex, net.osmand.binary.OsmandOdb.OsmAndTransportIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndTransportIndexOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiIndex> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiIndex>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiIndex, net.osmand.binary.OsmandOdb.OsmAndPoiIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiIndexOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiIndex> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndPoiIndex> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiIndexOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiIndexOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiIndex.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiIndex.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiIndex, net.osmand.binary.OsmandOdb.OsmAndPoiIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiIndexOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiIndex, net.osmand.binary.OsmandOdb.OsmAndPoiIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiIndexOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndMapIndex>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex, net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndexOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndexOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndexOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex, net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndexOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex, net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndexOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndexOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndexOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndexOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndexOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndexOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new OsmAndStructure(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndTileBoxOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndTileBox isVariable;

        public static OsmAndTileBox isMethod() {
            return isNameExpr;
        }

        public OsmAndTileBox isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndTileBox.class, net.osmand.binary.OsmandOdb.OsmAndTileBox.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndTileBox> isVariable = new com.google.protobuf.AbstractParser<OsmAndTileBox>() {

            public OsmAndTileBox isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndTileBox(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndTileBox> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        private void isMethod() {
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndTileBox isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndTileBoxOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndTileBox.class, net.osmand.binary.OsmandOdb.OsmAndTileBox.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndTileBox isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndTileBox isVariable = new net.osmand.binary.OsmandOdb.OsmAndTileBox(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndTileBox) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndTileBox) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndTileBox isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndTileBox isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndTileBox) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new OsmAndTileBox(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.String> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod(int isParameter);

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements StringTableOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final StringTable isVariable;

        public static StringTable isMethod() {
            return isNameExpr;
        }

        public StringTable isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new com.google.protobuf.LazyStringArrayList();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.StringTable.class, net.osmand.binary.OsmandOdb.StringTable.Builder.class);
        }

        public static com.google.protobuf.Parser<StringTable> isVariable = new com.google.protobuf.AbstractParser<StringTable>() {

            public StringTable isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new StringTable(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<StringTable> isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.LazyStringList isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.String> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public java.lang.String isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.StringTable isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StringTable isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StringTable isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StringTable isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StringTable isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StringTable isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StringTable isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StringTable isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StringTable isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StringTable isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.StringTable isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.StringTableOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.StringTable.class, net.osmand.binary.OsmandOdb.StringTable.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.StringTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.StringTable isMethod() {
                net.osmand.binary.OsmandOdb.StringTable isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.StringTable isMethod() {
                net.osmand.binary.OsmandOdb.StringTable isVariable = new net.osmand.binary.OsmandOdb.StringTable(this);
                int isVariable = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.StringTable) {
                    return isMethod((net.osmand.binary.OsmandOdb.StringTable) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.StringTable isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.StringTable isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.StringTable) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private com.google.protobuf.LazyStringList isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.LazyStringArrayList(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.String> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public java.lang.String isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<java.lang.String> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new StringTable(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.String> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod(int isParameter);

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.IndexedStringTable> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.IndexedStringTable isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements IndexedStringTableOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final IndexedStringTable isVariable;

        public static IndexedStringTable isMethod() {
            return isNameExpr;
        }

        public IndexedStringTable isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new com.google.protobuf.LazyStringArrayList();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.IndexedStringTable>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.IndexedStringTable.class, net.osmand.binary.OsmandOdb.IndexedStringTable.Builder.class);
        }

        public static com.google.protobuf.Parser<IndexedStringTable> isVariable = new com.google.protobuf.AbstractParser<IndexedStringTable>() {

            public IndexedStringTable isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new IndexedStringTable(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<IndexedStringTable> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.LazyStringList isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.String> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public java.lang.String isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.IndexedStringTable> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.IndexedStringTable> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.IndexedStringTable isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = "isStringConstant";
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                isNameExpr = isIntegerConstant * isMethod().isMethod();
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.IndexedStringTable isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IndexedStringTable isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IndexedStringTable isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IndexedStringTable isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IndexedStringTable isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IndexedStringTable isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IndexedStringTable isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IndexedStringTable isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IndexedStringTable isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IndexedStringTable isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.IndexedStringTable isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.IndexedStringTable.class, net.osmand.binary.OsmandOdb.IndexedStringTable.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.IndexedStringTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.IndexedStringTable isMethod() {
                net.osmand.binary.OsmandOdb.IndexedStringTable isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.IndexedStringTable isMethod() {
                net.osmand.binary.OsmandOdb.IndexedStringTable isVariable = new net.osmand.binary.OsmandOdb.IndexedStringTable(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.IndexedStringTable) {
                    return isMethod((net.osmand.binary.OsmandOdb.IndexedStringTable) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.IndexedStringTable isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.IndexedStringTable isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.IndexedStringTable) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.LazyStringList isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.LazyStringArrayList(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.String> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public java.lang.String isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<java.lang.String> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.IndexedStringTable> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.IndexedStringTable>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.IndexedStringTable, net.osmand.binary.OsmandOdb.IndexedStringTable.Builder, net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.IndexedStringTable> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.IndexedStringTable isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.IndexedStringTable isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.IndexedStringTable.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.IndexedStringTable isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.IndexedStringTable isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.IndexedStringTable.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.IndexedStringTable.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.IndexedStringTable> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.IndexedStringTable.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.IndexedStringTable.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.IndexedStringTable.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.IndexedStringTable.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.IndexedStringTable, net.osmand.binary.OsmandOdb.IndexedStringTable.Builder, net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.IndexedStringTable, net.osmand.binary.OsmandOdb.IndexedStringTable.Builder, net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new IndexedStringTable(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRuleOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRuleOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevelOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevelOrBuilder isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndMapIndexOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndMapIndex isVariable;

        public static OsmAndMapIndex isMethod() {
            return isNameExpr;
        }

        public OsmAndMapIndex isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.class, net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndMapIndex> isVariable = new com.google.protobuf.AbstractParser<OsmAndMapIndex>() {

            public OsmAndMapIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndMapIndex(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndMapIndex> isMethod() {
            return isNameExpr;
        }

        public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            java.lang.String isMethod();

            /**
             * isComment
             */
            com.google.protobuf.ByteString isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            java.lang.String isMethod();

            /**
             * isComment
             */
            com.google.protobuf.ByteString isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements MapEncodingRuleOrBuilder {

            // isComment
            private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
                super(isNameExpr);
                this.isFieldAccessExpr = isNameExpr.isMethod();
            }

            private isConstructor(boolean isParameter) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private static final MapEncodingRule isVariable;

            public static MapEncodingRule isMethod() {
                return isNameExpr;
            }

            public MapEncodingRule isMethod() {
                return isNameExpr;
            }

            private final com.google.protobuf.UnknownFieldSet isVariable;

            @java.lang.Override
            public final com.google.protobuf.UnknownFieldSet isMethod() {
                return this.isFieldAccessExpr;
            }

            private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                isMethod();
                int isVariable = isIntegerConstant;
                com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                try {
                    boolean isVariable = true;
                    while (!isNameExpr) {
                        int isVariable = isNameExpr.isMethod();
                        switch(isNameExpr) {
                            case isIntegerConstant:
                                isNameExpr = true;
                                break;
                            default:
                                {
                                    if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                        isNameExpr = true;
                                    }
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    throw isNameExpr.isMethod(this);
                } catch (java.io.IOException isParameter) {
                    throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
                } finally {
                    this.isFieldAccessExpr = isNameExpr.isMethod();
                    isMethod();
                }
            }

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule.class, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule.Builder.class);
            }

            public static com.google.protobuf.Parser<MapEncodingRule> isVariable = new com.google.protobuf.AbstractParser<MapEncodingRule>() {

                public MapEncodingRule isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                    return new MapEncodingRule(isNameExpr, isNameExpr);
                }
            };

            @java.lang.Override
            public com.google.protobuf.Parser<MapEncodingRule> isMethod() {
                return isNameExpr;
            }

            private int isVariable;

            // isComment
            public static final int isVariable = isIntegerConstant;

            private java.lang.Object isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof java.lang.String) {
                    return (java.lang.String) isNameExpr;
                } else {
                    com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                    java.lang.String isVariable = isNameExpr.isMethod();
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr;
                    }
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof java.lang.String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private java.lang.Object isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof java.lang.String) {
                    return (java.lang.String) isNameExpr;
                } else {
                    com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                    java.lang.String isVariable = isNameExpr.isMethod();
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr;
                    }
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof java.lang.String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            private void isMethod() {
                isNameExpr = "isStringConstant";
                isNameExpr = "isStringConstant";
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
            }

            private byte isVariable = -isIntegerConstant;

            public final boolean isMethod() {
                byte isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr == isIntegerConstant;
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                isNameExpr = isIntegerConstant;
                return true;
            }

            public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
                isMethod();
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isMethod());
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isMethod());
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                isMethod().isMethod(isNameExpr);
            }

            private int isVariable = -isIntegerConstant;

            public int isMethod() {
                int isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr;
                isNameExpr = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                isNameExpr += isMethod().isMethod();
                isNameExpr = isNameExpr;
                return isNameExpr;
            }

            private static final long isVariable = isStringConstant;

            @java.lang.Override
            protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
                return super.isMethod();
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static Builder isMethod() {
                return isNameExpr.isMethod();
            }

            public Builder isMethod() {
                return isMethod();
            }

            public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            public Builder isMethod() {
                return isMethod(this);
            }

            @java.lang.Override
            protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                Builder isVariable = new Builder(isNameExpr);
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRuleOrBuilder {

                public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule.class, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule.Builder.class);
                }

                // isComment
                private isConstructor() {
                    isMethod();
                }

                private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                    super(isNameExpr);
                    isMethod();
                }

                private void isMethod() {
                    if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    }
                }

                private static Builder isMethod() {
                    return new Builder();
                }

                public Builder isMethod() {
                    super.isMethod();
                    isNameExpr = "isStringConstant";
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = "isStringConstant";
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    return this;
                }

                public Builder isMethod() {
                    return isMethod().isMethod(isMethod());
                }

                public com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                }

                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isVariable = isMethod();
                    if (!isNameExpr.isMethod()) {
                        throw isMethod(isNameExpr);
                    }
                    return isNameExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isVariable = new net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule(this);
                    int isVariable = isNameExpr;
                    int isVariable = isIntegerConstant;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    isMethod();
                    return isNameExpr;
                }

                public Builder isMethod(com.google.protobuf.Message isParameter) {
                    if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule) {
                        return isMethod((net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule) isNameExpr);
                    } else {
                        super.isMethod(isNameExpr);
                        return this;
                    }
                }

                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isParameter) {
                    if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                        return this;
                    if (isNameExpr.isMethod()) {
                        isNameExpr |= isIntegerConstant;
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isMethod();
                    }
                    if (isNameExpr.isMethod()) {
                        isNameExpr |= isIntegerConstant;
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isMethod();
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    this.isMethod(isNameExpr.isMethod());
                    return this;
                }

                public final boolean isMethod() {
                    if (!isMethod()) {
                        return true;
                    }
                    return true;
                }

                public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                    net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isVariable = null;
                    try {
                        isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                    } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                        isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule) isNameExpr.isMethod();
                        throw isNameExpr;
                    } finally {
                        if (isNameExpr != null) {
                            isMethod(isNameExpr);
                        }
                    }
                    return this;
                }

                private int isVariable;

                // isComment
                private java.lang.Object isVariable = "isStringConstant";

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public java.lang.String isMethod() {
                    java.lang.Object isVariable = isNameExpr;
                    if (!(isNameExpr instanceof java.lang.String)) {
                        java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                        isNameExpr = isNameExpr;
                        return isNameExpr;
                    } else {
                        return (java.lang.String) isNameExpr;
                    }
                }

                /**
                 * isComment
                 */
                public com.google.protobuf.ByteString isMethod() {
                    java.lang.Object isVariable = isNameExpr;
                    if (isNameExpr instanceof String) {
                        com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                        isNameExpr = isNameExpr;
                        return isNameExpr;
                    } else {
                        return (com.google.protobuf.ByteString) isNameExpr;
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(java.lang.String isParameter) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isMethod().isMethod();
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                // isComment
                private java.lang.Object isVariable = "isStringConstant";

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public java.lang.String isMethod() {
                    java.lang.Object isVariable = isNameExpr;
                    if (!(isNameExpr instanceof java.lang.String)) {
                        java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                        isNameExpr = isNameExpr;
                        return isNameExpr;
                    } else {
                        return (java.lang.String) isNameExpr;
                    }
                }

                /**
                 * isComment
                 */
                public com.google.protobuf.ByteString isMethod() {
                    java.lang.Object isVariable = isNameExpr;
                    if (isNameExpr instanceof String) {
                        com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                        isNameExpr = isNameExpr;
                        return isNameExpr;
                    } else {
                        return (com.google.protobuf.ByteString) isNameExpr;
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(java.lang.String isParameter) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isMethod().isMethod();
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }
            }

            static {
                isNameExpr = new MapEncodingRule(true);
                isNameExpr.isMethod();
            }
        }

        public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(int isParameter);

            /**
             * isComment
             */
            int isMethod();

            /**
             * isComment
             */
            java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder isMethod(int isParameter);

            // isComment
            /**
             * isComment
             */
            java.util.List<net.osmand.binary.OsmandOdb.MapDataBlock> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.MapDataBlock isMethod(int isParameter);

            /**
             * isComment
             */
            int isMethod();

            /**
             * isComment
             */
            java.util.List<? extends net.osmand.binary.OsmandOdb.MapDataBlockOrBuilder> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.MapDataBlockOrBuilder isMethod(int isParameter);
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements MapRootLevelOrBuilder {

            // isComment
            private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
                super(isNameExpr);
                this.isFieldAccessExpr = isNameExpr.isMethod();
            }

            private isConstructor(boolean isParameter) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private static final MapRootLevel isVariable;

            public static MapRootLevel isMethod() {
                return isNameExpr;
            }

            public MapRootLevel isMethod() {
                return isNameExpr;
            }

            private final com.google.protobuf.UnknownFieldSet isVariable;

            @java.lang.Override
            public final com.google.protobuf.UnknownFieldSet isMethod() {
                return this.isFieldAccessExpr;
            }

            private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                isMethod();
                int isVariable = isIntegerConstant;
                com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                try {
                    boolean isVariable = true;
                    while (!isNameExpr) {
                        int isVariable = isNameExpr.isMethod();
                        switch(isNameExpr) {
                            case isIntegerConstant:
                                isNameExpr = true;
                                break;
                            default:
                                {
                                    if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                        isNameExpr = true;
                                    }
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox>();
                                        isNameExpr |= isIntegerConstant;
                                    }
                                    isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapDataBlock>();
                                        isNameExpr |= isIntegerConstant;
                                    }
                                    isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                    break;
                                }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    throw isNameExpr.isMethod(this);
                } catch (java.io.IOException isParameter) {
                    throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
                } finally {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                    this.isFieldAccessExpr = isNameExpr.isMethod();
                    isMethod();
                }
            }

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel.class, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel.Builder.class);
            }

            public static com.google.protobuf.Parser<MapRootLevel> isVariable = new com.google.protobuf.AbstractParser<MapRootLevel>() {

                public MapRootLevel isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                    return new MapRootLevel(isNameExpr, isNameExpr);
                }
            };

            @java.lang.Override
            public com.google.protobuf.Parser<MapRootLevel> isMethod() {
                return isNameExpr;
            }

            private int isVariable;

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private java.util.List<net.osmand.binary.OsmandOdb.MapDataBlock> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.MapDataBlock> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.MapDataBlockOrBuilder> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.MapDataBlock isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.MapDataBlockOrBuilder isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private void isMethod() {
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private byte isVariable = -isIntegerConstant;

            public final boolean isMethod() {
                byte isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr == isIntegerConstant;
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        isNameExpr = isIntegerConstant;
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        isNameExpr = isIntegerConstant;
                        return true;
                    }
                }
                isNameExpr = isIntegerConstant;
                return true;
            }

            public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
                isMethod();
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                isMethod().isMethod(isNameExpr);
            }

            private int isVariable = -isIntegerConstant;

            public int isMethod() {
                int isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr;
                isNameExpr = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isMethod().isMethod();
                isNameExpr = isNameExpr;
                return isNameExpr;
            }

            private static final long isVariable = isStringConstant;

            @java.lang.Override
            protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
                return super.isMethod();
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static Builder isMethod() {
                return isNameExpr.isMethod();
            }

            public Builder isMethod() {
                return isMethod();
            }

            public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            public Builder isMethod() {
                return isMethod(this);
            }

            @java.lang.Override
            protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                Builder isVariable = new Builder(isNameExpr);
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevelOrBuilder {

                public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel.class, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel.Builder.class);
                }

                // isComment
                private isConstructor() {
                    isMethod();
                }

                private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                    super(isNameExpr);
                    isMethod();
                }

                private void isMethod() {
                    if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        isMethod();
                        isMethod();
                    }
                }

                private static Builder isMethod() {
                    return new Builder();
                }

                public Builder isMethod() {
                    super.isMethod();
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isNameExpr.isMethod();
                    }
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                public Builder isMethod() {
                    return isMethod().isMethod(isMethod());
                }

                public com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                }

                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isVariable = isMethod();
                    if (!isNameExpr.isMethod()) {
                        throw isMethod(isNameExpr);
                    }
                    return isNameExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isVariable = new net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel(this);
                    int isVariable = isNameExpr;
                    int isVariable = isIntegerConstant;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (isNameExpr == null) {
                        if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        }
                        isNameExpr.isFieldAccessExpr = isNameExpr;
                    } else {
                        isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    }
                    if (isNameExpr == null) {
                        if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        }
                        isNameExpr.isFieldAccessExpr = isNameExpr;
                    } else {
                        isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    isMethod();
                    return isNameExpr;
                }

                public Builder isMethod(com.google.protobuf.Message isParameter) {
                    if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel) {
                        return isMethod((net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel) isNameExpr);
                    } else {
                        super.isMethod(isNameExpr);
                        return this;
                    }
                }

                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isParameter) {
                    if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                        return this;
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr == null) {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                            } else {
                                isMethod();
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                            isMethod();
                        }
                    } else {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr.isMethod();
                                isNameExpr = null;
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                            } else {
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                        }
                    }
                    if (isNameExpr == null) {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                            } else {
                                isMethod();
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                            isMethod();
                        }
                    } else {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr.isMethod();
                                isNameExpr = null;
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                            } else {
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                        }
                    }
                    this.isMethod(isNameExpr.isMethod());
                    return this;
                }

                public final boolean isMethod() {
                    if (!isMethod()) {
                        return true;
                    }
                    if (!isMethod()) {
                        return true;
                    }
                    if (!isMethod()) {
                        return true;
                    }
                    if (!isMethod()) {
                        return true;
                    }
                    if (!isMethod()) {
                        return true;
                    }
                    if (!isMethod()) {
                        return true;
                    }
                    for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                        if (!isMethod(isNameExpr).isMethod()) {
                            return true;
                        }
                    }
                    for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                        if (!isMethod(isNameExpr).isMethod()) {
                            return true;
                        }
                    }
                    return true;
                }

                public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                    net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isVariable = null;
                    try {
                        isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                    } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                        isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel) isNameExpr.isMethod();
                        throw isNameExpr;
                    } finally {
                        if (isNameExpr != null) {
                            isMethod(isNameExpr);
                        }
                    }
                    return this;
                }

                private int isVariable;

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

                private void isMethod() {
                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox>(isNameExpr);
                        isNameExpr |= isIntegerConstant;
                    }
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder> isVariable;

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox> isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox> isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        super.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                        isMethod();
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr);
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder> isMethod() {
                    if (isNameExpr != null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder isMethod() {
                    return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder> isMethod() {
                    return isMethod().isMethod();
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder> isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                        isNameExpr = null;
                    }
                    return isNameExpr;
                }

                // isComment
                private java.util.List<net.osmand.binary.OsmandOdb.MapDataBlock> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

                private void isMethod() {
                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapDataBlock>(isNameExpr);
                        isNameExpr |= isIntegerConstant;
                    }
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.MapDataBlock, net.osmand.binary.OsmandOdb.MapDataBlock.Builder, net.osmand.binary.OsmandOdb.MapDataBlockOrBuilder> isVariable;

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.MapDataBlock> isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.MapDataBlock isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.MapDataBlock isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.MapDataBlock.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.MapDataBlock isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.MapDataBlock isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.MapDataBlock.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.MapDataBlock.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.MapDataBlock> isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        super.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                        isMethod();
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.MapDataBlock.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr);
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.MapDataBlockOrBuilder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public java.util.List<? extends net.osmand.binary.OsmandOdb.MapDataBlockOrBuilder> isMethod() {
                    if (isNameExpr != null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.MapDataBlock.Builder isMethod() {
                    return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.MapDataBlock.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.MapDataBlock.Builder> isMethod() {
                    return isMethod().isMethod();
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.MapDataBlock, net.osmand.binary.OsmandOdb.MapDataBlock.Builder, net.osmand.binary.OsmandOdb.MapDataBlockOrBuilder> isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.MapDataBlock, net.osmand.binary.OsmandOdb.MapDataBlock.Builder, net.osmand.binary.OsmandOdb.MapDataBlockOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                        isNameExpr = null;
                    }
                    return isNameExpr;
                }
            }

            static {
                isNameExpr = new MapRootLevel(true);
                isNameExpr.isMethod();
            }
        }

        public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            boolean isMethod();

            // isComment
            /**
             * isComment
             */
            java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(int isParameter);

            /**
             * isComment
             */
            int isMethod();

            /**
             * isComment
             */
            java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder isMethod(int isParameter);
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements MapDataBoxOrBuilder {

            // isComment
            private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
                super(isNameExpr);
                this.isFieldAccessExpr = isNameExpr.isMethod();
            }

            private isConstructor(boolean isParameter) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private static final MapDataBox isVariable;

            public static MapDataBox isMethod() {
                return isNameExpr;
            }

            public MapDataBox isMethod() {
                return isNameExpr;
            }

            private final com.google.protobuf.UnknownFieldSet isVariable;

            @java.lang.Override
            public final com.google.protobuf.UnknownFieldSet isMethod() {
                return this.isFieldAccessExpr;
            }

            private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                isMethod();
                int isVariable = isIntegerConstant;
                com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                try {
                    boolean isVariable = true;
                    while (!isNameExpr) {
                        int isVariable = isNameExpr.isMethod();
                        switch(isNameExpr) {
                            case isIntegerConstant:
                                isNameExpr = true;
                                break;
                            default:
                                {
                                    if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                        isNameExpr = true;
                                    }
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox>();
                                        isNameExpr |= isIntegerConstant;
                                    }
                                    isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                    break;
                                }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    throw isNameExpr.isMethod(this);
                } catch (java.io.IOException isParameter) {
                    throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
                } finally {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                    this.isFieldAccessExpr = isNameExpr.isMethod();
                    isMethod();
                }
            }

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.class, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder.class);
            }

            public static com.google.protobuf.Parser<MapDataBox> isVariable = new com.google.protobuf.AbstractParser<MapDataBox>() {

                public MapDataBox isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                    return new MapDataBox(isNameExpr, isNameExpr);
                }
            };

            @java.lang.Override
            public com.google.protobuf.Parser<MapDataBox> isMethod() {
                return isNameExpr;
            }

            private int isVariable;

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private boolean isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public boolean isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private void isMethod() {
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
                isNameExpr = true;
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private byte isVariable = -isIntegerConstant;

            public final boolean isMethod() {
                byte isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr == isIntegerConstant;
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        isNameExpr = isIntegerConstant;
                        return true;
                    }
                }
                isNameExpr = isIntegerConstant;
                return true;
            }

            public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
                isMethod();
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                isMethod().isMethod(isNameExpr);
            }

            private int isVariable = -isIntegerConstant;

            public int isMethod() {
                int isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr;
                isNameExpr = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isMethod().isMethod();
                isNameExpr = isNameExpr;
                return isNameExpr;
            }

            private static final long isVariable = isStringConstant;

            @java.lang.Override
            protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
                return super.isMethod();
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static Builder isMethod() {
                return isNameExpr.isMethod();
            }

            public Builder isMethod() {
                return isMethod();
            }

            public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            public Builder isMethod() {
                return isMethod(this);
            }

            @java.lang.Override
            protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                Builder isVariable = new Builder(isNameExpr);
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder {

                public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.class, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder.class);
                }

                // isComment
                private isConstructor() {
                    isMethod();
                }

                private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                    super(isNameExpr);
                    isMethod();
                }

                private void isMethod() {
                    if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        isMethod();
                    }
                }

                private static Builder isMethod() {
                    return new Builder();
                }

                public Builder isMethod() {
                    super.isMethod();
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = true;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                public Builder isMethod() {
                    return isMethod().isMethod(isMethod());
                }

                public com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                }

                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isVariable = isMethod();
                    if (!isNameExpr.isMethod()) {
                        throw isMethod(isNameExpr);
                    }
                    return isNameExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isVariable = new net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox(this);
                    int isVariable = isNameExpr;
                    int isVariable = isIntegerConstant;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (isNameExpr == null) {
                        if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        }
                        isNameExpr.isFieldAccessExpr = isNameExpr;
                    } else {
                        isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    isMethod();
                    return isNameExpr;
                }

                public Builder isMethod(com.google.protobuf.Message isParameter) {
                    if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox) {
                        return isMethod((net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox) isNameExpr);
                    } else {
                        super.isMethod(isNameExpr);
                        return this;
                    }
                }

                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isParameter) {
                    if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                        return this;
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr == null) {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                            } else {
                                isMethod();
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                            isMethod();
                        }
                    } else {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr.isMethod();
                                isNameExpr = null;
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                            } else {
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                        }
                    }
                    this.isMethod(isNameExpr.isMethod());
                    return this;
                }

                public final boolean isMethod() {
                    if (!isMethod()) {
                        return true;
                    }
                    if (!isMethod()) {
                        return true;
                    }
                    if (!isMethod()) {
                        return true;
                    }
                    if (!isMethod()) {
                        return true;
                    }
                    for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                        if (!isMethod(isNameExpr).isMethod()) {
                            return true;
                        }
                    }
                    return true;
                }

                public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                    net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isVariable = null;
                    try {
                        isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                    } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                        isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox) isNameExpr.isMethod();
                        throw isNameExpr;
                    } finally {
                        if (isNameExpr != null) {
                            isMethod(isNameExpr);
                        }
                    }
                    return this;
                }

                private int isVariable;

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private boolean isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(boolean isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = true;
                    isMethod();
                    return this;
                }

                // isComment
                private java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

                private void isMethod() {
                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox>(isNameExpr);
                        isNameExpr |= isIntegerConstant;
                    }
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder> isVariable;

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox> isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox> isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        super.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                        isMethod();
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr);
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder> isMethod() {
                    if (isNameExpr != null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder isMethod() {
                    return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder> isMethod() {
                    return isMethod().isMethod();
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder> isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapDataBoxOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                        isNameExpr = null;
                    }
                    return isNameExpr;
                }
            }

            static {
                isNameExpr = new MapDataBox(true);
                isNameExpr.isMethod();
            }
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRuleOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRuleOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevelOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevelOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = "isStringConstant";
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndMapIndexOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.class, net.osmand.binary.OsmandOdb.OsmAndMapIndex.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndMapIndex isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndMapIndex isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndMapIndex isVariable = new net.osmand.binary.OsmandOdb.OsmAndMapIndex(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndMapIndex) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndMapIndex) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndMapIndex isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndMapIndex) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRuleOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRuleOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRuleOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRuleOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRule.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapEncodingRuleOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevelOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevelOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevelOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevelOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevel.Builder, net.osmand.binary.OsmandOdb.OsmAndMapIndex.MapRootLevelOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new OsmAndMapIndex(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        long isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.MapData> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.MapData isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.MapDataOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.MapDataOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.StringTable isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.StringTableOrBuilder isMethod();
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements MapDataBlockOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final MapDataBlock isVariable;

        public static MapDataBlock isMethod() {
            return isNameExpr;
        }

        public MapDataBlock isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapData>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                net.osmand.binary.OsmandOdb.StringTable.Builder isVariable = null;
                                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                if (isNameExpr != null) {
                                    isNameExpr.isMethod(isNameExpr);
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr |= isIntegerConstant;
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.MapDataBlock.class, net.osmand.binary.OsmandOdb.MapDataBlock.Builder.class);
        }

        public static com.google.protobuf.Parser<MapDataBlock> isVariable = new com.google.protobuf.AbstractParser<MapDataBlock>() {

            public MapDataBlock isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new MapDataBlock(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<MapDataBlock> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private long isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public long isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.MapData> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.MapData> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.MapDataOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.MapData isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.MapDataOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private net.osmand.binary.OsmandOdb.StringTable isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.StringTable isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.StringTableOrBuilder isMethod() {
            return isNameExpr;
        }

        private void isMethod() {
            isNameExpr = isStringConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.MapDataBlock isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapDataBlock isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapDataBlock isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapDataBlock isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapDataBlock isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapDataBlock isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapDataBlock isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapDataBlock isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapDataBlock isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapDataBlock isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.MapDataBlock isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.MapDataBlockOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.MapDataBlock.class, net.osmand.binary.OsmandOdb.MapDataBlock.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isStringConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.MapDataBlock isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.MapDataBlock isMethod() {
                net.osmand.binary.OsmandOdb.MapDataBlock isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.MapDataBlock isMethod() {
                net.osmand.binary.OsmandOdb.MapDataBlock isVariable = new net.osmand.binary.OsmandOdb.MapDataBlock(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                if (isNameExpr == null) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.MapDataBlock) {
                    return isMethod((net.osmand.binary.OsmandOdb.MapDataBlock) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.MapDataBlock isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.MapDataBlock isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.MapDataBlock) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private long isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public long isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(long isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.MapData> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.MapData>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.MapData, net.osmand.binary.OsmandOdb.MapData.Builder, net.osmand.binary.OsmandOdb.MapDataOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.MapData> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.MapData isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.MapData isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.MapData.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.MapData isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.MapData isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.MapData.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.MapData.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.MapData> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.MapData.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.MapDataOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.MapDataOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.MapData.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.MapData.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.MapData.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.MapData, net.osmand.binary.OsmandOdb.MapData.Builder, net.osmand.binary.OsmandOdb.MapDataOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.MapData, net.osmand.binary.OsmandOdb.MapData.Builder, net.osmand.binary.OsmandOdb.MapDataOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private net.osmand.binary.OsmandOdb.StringTable isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.StringTable, net.osmand.binary.OsmandOdb.StringTable.Builder, net.osmand.binary.OsmandOdb.StringTableOrBuilder> isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StringTable isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr;
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.StringTable isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr = isNameExpr;
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.StringTable.Builder isParameter) {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.StringTable isParameter) {
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                    } else {
                        isNameExpr = isNameExpr;
                    }
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StringTable.Builder isMethod() {
                isNameExpr |= isIntegerConstant;
                isMethod();
                return isMethod().isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StringTableOrBuilder isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.StringTable, net.osmand.binary.OsmandOdb.StringTable.Builder, net.osmand.binary.OsmandOdb.StringTableOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.StringTable, net.osmand.binary.OsmandOdb.StringTable.Builder, net.osmand.binary.OsmandOdb.StringTableOrBuilder>(isNameExpr, isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new MapDataBlock(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<com.google.protobuf.ByteString> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        long isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements MapDataOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final MapData isVariable;

        public static MapData isMethod() {
            return isNameExpr;
        }

        public MapData isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<com.google.protobuf.ByteString>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.MapData.class, net.osmand.binary.OsmandOdb.MapData.Builder.class);
        }

        public static com.google.protobuf.Parser<MapData> isVariable = new com.google.protobuf.AbstractParser<MapData>() {

            public MapData isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new MapData(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<MapData> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<com.google.protobuf.ByteString> isVariable;

        /**
         * isComment
         */
        public java.util.List<com.google.protobuf.ByteString> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private long isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public long isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        private void isMethod() {
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isStringConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.MapData isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapData isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapData isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapData isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapData isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapData isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapData isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapData isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapData isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.MapData isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.MapData isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.MapDataOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.MapData.class, net.osmand.binary.OsmandOdb.MapData.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.MapData isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.MapData isMethod() {
                net.osmand.binary.OsmandOdb.MapData isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.MapData isMethod() {
                net.osmand.binary.OsmandOdb.MapData isVariable = new net.osmand.binary.OsmandOdb.MapData(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.MapData) {
                    return isMethod((net.osmand.binary.OsmandOdb.MapData) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.MapData isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.MapData isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.MapData) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<com.google.protobuf.ByteString> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<com.google.protobuf.ByteString>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<com.google.protobuf.ByteString> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends com.google.protobuf.ByteString> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            // isComment
            private long isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public long isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(long isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new MapData(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndTileBoxOrBuilder isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.StringTable isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.StringTableOrBuilder isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndexOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndexOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexDataOrBuilder isMethod();
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndAddressIndexOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndAddressIndex isVariable;

        public static OsmAndAddressIndex isMethod() {
            return isNameExpr;
        }

        public OsmAndAddressIndex isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                net.osmand.binary.OsmandOdb.OsmAndTileBox.Builder isVariable = null;
                                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                if (isNameExpr != null) {
                                    isNameExpr.isMethod(isNameExpr);
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr |= isIntegerConstant;
                                break;
                            }
                        case isIntegerConstant:
                            {
                                net.osmand.binary.OsmandOdb.StringTable.Builder isVariable = null;
                                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                if (isNameExpr != null) {
                                    isNameExpr.isMethod(isNameExpr);
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr |= isIntegerConstant;
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.Builder isVariable = null;
                                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                if (isNameExpr != null) {
                                    isNameExpr.isMethod(isNameExpr);
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr |= isIntegerConstant;
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressIndex.class, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndAddressIndex> isVariable = new com.google.protobuf.AbstractParser<OsmAndAddressIndex>() {

            public OsmAndAddressIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndAddressIndex(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndAddressIndex> isMethod() {
            return isNameExpr;
        }

        public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.CitiesType isMethod();

            // isComment
            /**
             * isComment
             */
            java.util.List<net.osmand.binary.OsmandOdb.CityIndex> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.CityIndex isMethod(int isParameter);

            /**
             * isComment
             */
            int isMethod();

            /**
             * isComment
             */
            java.util.List<? extends net.osmand.binary.OsmandOdb.CityIndexOrBuilder> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.CityIndexOrBuilder isMethod(int isParameter);

            // isComment
            /**
             * isComment
             */
            java.util.List<net.osmand.binary.OsmandOdb.CityBlockIndex> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.CityBlockIndex isMethod(int isParameter);

            /**
             * isComment
             */
            int isMethod();

            /**
             * isComment
             */
            java.util.List<? extends net.osmand.binary.OsmandOdb.CityBlockIndexOrBuilder> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.CityBlockIndexOrBuilder isMethod(int isParameter);
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements CitiesIndexOrBuilder {

            // isComment
            private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
                super(isNameExpr);
                this.isFieldAccessExpr = isNameExpr.isMethod();
            }

            private isConstructor(boolean isParameter) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private static final CitiesIndex isVariable;

            public static CitiesIndex isMethod() {
                return isNameExpr;
            }

            public CitiesIndex isMethod() {
                return isNameExpr;
            }

            private final com.google.protobuf.UnknownFieldSet isVariable;

            @java.lang.Override
            public final com.google.protobuf.UnknownFieldSet isMethod() {
                return this.isFieldAccessExpr;
            }

            private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                isMethod();
                int isVariable = isIntegerConstant;
                com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                try {
                    boolean isVariable = true;
                    while (!isNameExpr) {
                        int isVariable = isNameExpr.isMethod();
                        switch(isNameExpr) {
                            case isIntegerConstant:
                                isNameExpr = true;
                                break;
                            default:
                                {
                                    if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                        isNameExpr = true;
                                    }
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    int isVariable = isNameExpr.isMethod();
                                    net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.CitiesType isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    if (isNameExpr == null) {
                                        isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                                    } else {
                                        isNameExpr |= isIntegerConstant;
                                        isNameExpr = isNameExpr;
                                    }
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.CityIndex>();
                                        isNameExpr |= isIntegerConstant;
                                    }
                                    isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.CityBlockIndex>();
                                        isNameExpr |= isIntegerConstant;
                                    }
                                    isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                    break;
                                }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    throw isNameExpr.isMethod(this);
                } catch (java.io.IOException isParameter) {
                    throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
                } finally {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                    this.isFieldAccessExpr = isNameExpr.isMethod();
                    isMethod();
                }
            }

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.class, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.Builder.class);
            }

            public static com.google.protobuf.Parser<CitiesIndex> isVariable = new com.google.protobuf.AbstractParser<CitiesIndex>() {

                public CitiesIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                    return new CitiesIndex(isNameExpr, isNameExpr);
                }
            };

            @java.lang.Override
            public com.google.protobuf.Parser<CitiesIndex> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public enum CitiesType implements com.google.protobuf.ProtocolMessageEnum {

                /**
                 * isComment
                 */
                CitiesOrTowns(isIntegerConstant, isIntegerConstant),
                /**
                 * isComment
                 */
                Postcodes(isIntegerConstant, isIntegerConstant),
                /**
                 * isComment
                 */
                Villages(isIntegerConstant, isIntegerConstant);

                /**
                 * isComment
                 */
                public static final int isVariable = isIntegerConstant;

                /**
                 * isComment
                 */
                public static final int isVariable = isIntegerConstant;

                /**
                 * isComment
                 */
                public static final int isVariable = isIntegerConstant;

                public final int isMethod() {
                    return isNameExpr;
                }

                public static CitiesType isMethod(int isParameter) {
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            return isNameExpr;
                        case isIntegerConstant:
                            return isNameExpr;
                        case isIntegerConstant:
                            return isNameExpr;
                        default:
                            return null;
                    }
                }

                public static com.google.protobuf.Internal.EnumLiteMap<CitiesType> isMethod() {
                    return isNameExpr;
                }

                private static com.google.protobuf.Internal.EnumLiteMap<CitiesType> isVariable = new com.google.protobuf.Internal.EnumLiteMap<CitiesType>() {

                    public CitiesType isMethod(int isParameter) {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                };

                public final com.google.protobuf.Descriptors.EnumValueDescriptor isMethod() {
                    return isMethod().isMethod().isMethod(isNameExpr);
                }

                public final com.google.protobuf.Descriptors.EnumDescriptor isMethod() {
                    return isMethod();
                }

                public static final com.google.protobuf.Descriptors.EnumDescriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod().isMethod().isMethod(isIntegerConstant);
                }

                private static final CitiesType[] isVariable = isMethod();

                public static CitiesType isMethod(com.google.protobuf.Descriptors.EnumValueDescriptor isParameter) {
                    if (isNameExpr.isMethod() != isMethod()) {
                        throw new java.lang.IllegalArgumentException("isStringConstant");
                    }
                    return isNameExpr[isNameExpr.isMethod()];
                }

                private final int isVariable;

                private final int isVariable;

                private isConstructor(int isParameter, int isParameter) {
                    this.isFieldAccessExpr = isNameExpr;
                    this.isFieldAccessExpr = isNameExpr;
                }
            }

            private int isVariable;

            // isComment
            public static final int isVariable = isIntegerConstant;

            private net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.CitiesType isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.CitiesType isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private java.util.List<net.osmand.binary.OsmandOdb.CityIndex> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.CityIndex> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.CityIndexOrBuilder> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.CityIndex isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.CityIndexOrBuilder isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private java.util.List<net.osmand.binary.OsmandOdb.CityBlockIndex> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.CityBlockIndex> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.CityBlockIndexOrBuilder> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.CityBlockIndex isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.CityBlockIndexOrBuilder isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private void isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private byte isVariable = -isIntegerConstant;

            public final boolean isMethod() {
                byte isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr == isIntegerConstant;
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        isNameExpr = isIntegerConstant;
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        isNameExpr = isIntegerConstant;
                        return true;
                    }
                }
                isNameExpr = isIntegerConstant;
                return true;
            }

            public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
                isMethod();
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod());
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                isMethod().isMethod(isNameExpr);
            }

            private int isVariable = -isIntegerConstant;

            public int isMethod() {
                int isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr;
                isNameExpr = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod());
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isMethod().isMethod();
                isNameExpr = isNameExpr;
                return isNameExpr;
            }

            private static final long isVariable = isStringConstant;

            @java.lang.Override
            protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
                return super.isMethod();
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static Builder isMethod() {
                return isNameExpr.isMethod();
            }

            public Builder isMethod() {
                return isMethod();
            }

            public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            public Builder isMethod() {
                return isMethod(this);
            }

            @java.lang.Override
            protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                Builder isVariable = new Builder(isNameExpr);
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndexOrBuilder {

                public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.class, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.Builder.class);
                }

                // isComment
                private isConstructor() {
                    isMethod();
                }

                private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                    super(isNameExpr);
                    isMethod();
                }

                private void isMethod() {
                    if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        isMethod();
                        isMethod();
                    }
                }

                private static Builder isMethod() {
                    return new Builder();
                }

                public Builder isMethod() {
                    super.isMethod();
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isNameExpr.isMethod();
                    }
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                public Builder isMethod() {
                    return isMethod().isMethod(isMethod());
                }

                public com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                }

                public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isVariable = isMethod();
                    if (!isNameExpr.isMethod()) {
                        throw isMethod(isNameExpr);
                    }
                    return isNameExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isVariable = new net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex(this);
                    int isVariable = isNameExpr;
                    int isVariable = isIntegerConstant;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (isNameExpr == null) {
                        if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        }
                        isNameExpr.isFieldAccessExpr = isNameExpr;
                    } else {
                        isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    }
                    if (isNameExpr == null) {
                        if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        }
                        isNameExpr.isFieldAccessExpr = isNameExpr;
                    } else {
                        isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    isMethod();
                    return isNameExpr;
                }

                public Builder isMethod(com.google.protobuf.Message isParameter) {
                    if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex) {
                        return isMethod((net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex) isNameExpr);
                    } else {
                        super.isMethod(isNameExpr);
                        return this;
                    }
                }

                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isParameter) {
                    if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                        return this;
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr == null) {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                            } else {
                                isMethod();
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                            isMethod();
                        }
                    } else {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr.isMethod();
                                isNameExpr = null;
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                            } else {
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                        }
                    }
                    if (isNameExpr == null) {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                            } else {
                                isMethod();
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                            isMethod();
                        }
                    } else {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr.isMethod();
                                isNameExpr = null;
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                            } else {
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                        }
                    }
                    this.isMethod(isNameExpr.isMethod());
                    return this;
                }

                public final boolean isMethod() {
                    if (!isMethod()) {
                        return true;
                    }
                    for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                        if (!isMethod(isNameExpr).isMethod()) {
                            return true;
                        }
                    }
                    for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                        if (!isMethod(isNameExpr).isMethod()) {
                            return true;
                        }
                    }
                    return true;
                }

                public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                    net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isVariable = null;
                    try {
                        isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                    } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                        isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex) isNameExpr.isMethod();
                        throw isNameExpr;
                    } finally {
                        if (isNameExpr != null) {
                            isMethod(isNameExpr);
                        }
                    }
                    return this;
                }

                private int isVariable;

                // isComment
                private net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.CitiesType isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.CitiesType isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.CitiesType isParameter) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                    isMethod();
                    return this;
                }

                // isComment
                private java.util.List<net.osmand.binary.OsmandOdb.CityIndex> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

                private void isMethod() {
                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.CityIndex>(isNameExpr);
                        isNameExpr |= isIntegerConstant;
                    }
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.CityIndex, net.osmand.binary.OsmandOdb.CityIndex.Builder, net.osmand.binary.OsmandOdb.CityIndexOrBuilder> isVariable;

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.CityIndex> isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.CityIndex isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.CityIndex isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.CityIndex.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.CityIndex isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.CityIndex isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.CityIndex.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.CityIndex.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.CityIndex> isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        super.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                        isMethod();
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.CityIndex.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr);
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.CityIndexOrBuilder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public java.util.List<? extends net.osmand.binary.OsmandOdb.CityIndexOrBuilder> isMethod() {
                    if (isNameExpr != null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.CityIndex.Builder isMethod() {
                    return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.CityIndex.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.CityIndex.Builder> isMethod() {
                    return isMethod().isMethod();
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.CityIndex, net.osmand.binary.OsmandOdb.CityIndex.Builder, net.osmand.binary.OsmandOdb.CityIndexOrBuilder> isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.CityIndex, net.osmand.binary.OsmandOdb.CityIndex.Builder, net.osmand.binary.OsmandOdb.CityIndexOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                        isNameExpr = null;
                    }
                    return isNameExpr;
                }

                // isComment
                private java.util.List<net.osmand.binary.OsmandOdb.CityBlockIndex> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

                private void isMethod() {
                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.CityBlockIndex>(isNameExpr);
                        isNameExpr |= isIntegerConstant;
                    }
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.CityBlockIndex, net.osmand.binary.OsmandOdb.CityBlockIndex.Builder, net.osmand.binary.OsmandOdb.CityBlockIndexOrBuilder> isVariable;

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.CityBlockIndex> isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.CityBlockIndex isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.CityBlockIndex isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.CityBlockIndex.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.CityBlockIndex isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.CityBlockIndex isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.CityBlockIndex.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.CityBlockIndex.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.CityBlockIndex> isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        super.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                        isMethod();
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.CityBlockIndex.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr);
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.CityBlockIndexOrBuilder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public java.util.List<? extends net.osmand.binary.OsmandOdb.CityBlockIndexOrBuilder> isMethod() {
                    if (isNameExpr != null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.CityBlockIndex.Builder isMethod() {
                    return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.CityBlockIndex.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.CityBlockIndex.Builder> isMethod() {
                    return isMethod().isMethod();
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.CityBlockIndex, net.osmand.binary.OsmandOdb.CityBlockIndex.Builder, net.osmand.binary.OsmandOdb.CityBlockIndexOrBuilder> isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.CityBlockIndex, net.osmand.binary.OsmandOdb.CityBlockIndex.Builder, net.osmand.binary.OsmandOdb.CityBlockIndexOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                        isNameExpr = null;
                    }
                    return isNameExpr;
                }
            }

            static {
                isNameExpr = new CitiesIndex(true);
                isNameExpr.isMethod();
            }
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private net.osmand.binary.OsmandOdb.OsmAndTileBox isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndTileBoxOrBuilder isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private net.osmand.binary.OsmandOdb.StringTable isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.StringTable isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.StringTableOrBuilder isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndexOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndexOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexDataOrBuilder isMethod() {
            return isNameExpr;
        }

        private void isMethod() {
            isNameExpr = "isStringConstant";
            isNameExpr = "isStringConstant";
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (isMethod()) {
                if (!isMethod().isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            if (isMethod()) {
                if (!isMethod().isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressIndex isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndAddressIndexOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressIndex.class, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                    isMethod();
                    isMethod();
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndAddressIndex isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndAddressIndex isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndAddressIndex isVariable = new net.osmand.binary.OsmandOdb.OsmAndAddressIndex(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                if (isNameExpr == null) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                if (isNameExpr == null) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                if (isNameExpr == null) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndAddressIndex) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndAddressIndex) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressIndex isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (isMethod()) {
                    if (!isMethod().isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                if (isMethod()) {
                    if (!isMethod().isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndAddressIndex isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndAddressIndex) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private net.osmand.binary.OsmandOdb.OsmAndTileBox isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndTileBox, net.osmand.binary.OsmandOdb.OsmAndTileBox.Builder, net.osmand.binary.OsmandOdb.OsmAndTileBoxOrBuilder> isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr;
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndTileBox isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr = isNameExpr;
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndTileBox.Builder isParameter) {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndTileBox isParameter) {
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                    } else {
                        isNameExpr = isNameExpr;
                    }
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndTileBox.Builder isMethod() {
                isNameExpr |= isIntegerConstant;
                isMethod();
                return isMethod().isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndTileBoxOrBuilder isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndTileBox, net.osmand.binary.OsmandOdb.OsmAndTileBox.Builder, net.osmand.binary.OsmandOdb.OsmAndTileBoxOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndTileBox, net.osmand.binary.OsmandOdb.OsmAndTileBox.Builder, net.osmand.binary.OsmandOdb.OsmAndTileBoxOrBuilder>(isNameExpr, isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private net.osmand.binary.OsmandOdb.StringTable isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.StringTable, net.osmand.binary.OsmandOdb.StringTable.Builder, net.osmand.binary.OsmandOdb.StringTableOrBuilder> isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StringTable isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr;
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.StringTable isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr = isNameExpr;
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.StringTable.Builder isParameter) {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.StringTable isParameter) {
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                    } else {
                        isNameExpr = isNameExpr;
                    }
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StringTable.Builder isMethod() {
                isNameExpr |= isIntegerConstant;
                isMethod();
                return isMethod().isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StringTableOrBuilder isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.StringTable, net.osmand.binary.OsmandOdb.StringTable.Builder, net.osmand.binary.OsmandOdb.StringTableOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.StringTable, net.osmand.binary.OsmandOdb.StringTable.Builder, net.osmand.binary.OsmandOdb.StringTableOrBuilder>(isNameExpr, isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndexOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndexOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndexOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndexOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndAddressIndex.CitiesIndexOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.Builder, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexDataOrBuilder> isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr;
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr = isNameExpr;
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.Builder isParameter) {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isParameter) {
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                    } else {
                        isNameExpr = isNameExpr;
                    }
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.Builder isMethod() {
                isNameExpr |= isIntegerConstant;
                isMethod();
                return isMethod().isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexDataOrBuilder isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.Builder, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexDataOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.Builder, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexDataOrBuilder>(isNameExpr, isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new OsmAndAddressIndex(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.IndexedStringTable isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexDataOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexDataOrBuilder isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndAddressNameIndexDataOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndAddressNameIndexData isVariable;

        public static OsmAndAddressNameIndexData isMethod() {
            return isNameExpr;
        }

        public OsmAndAddressNameIndexData isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                net.osmand.binary.OsmandOdb.IndexedStringTable.Builder isVariable = null;
                                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                if (isNameExpr != null) {
                                    isNameExpr.isMethod(isNameExpr);
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr |= isIntegerConstant;
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.class, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndAddressNameIndexData> isVariable = new com.google.protobuf.AbstractParser<OsmAndAddressNameIndexData>() {

            public OsmAndAddressNameIndexData isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndAddressNameIndexData(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndAddressNameIndexData> isMethod() {
            return isNameExpr;
        }

        public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

            // isComment
            /**
             * isComment
             */
            java.util.List<net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod(int isParameter);

            /**
             * isComment
             */
            int isMethod();

            /**
             * isComment
             */
            java.util.List<? extends net.osmand.binary.OsmandOdb.AddressNameIndexDataAtomOrBuilder> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.AddressNameIndexDataAtomOrBuilder isMethod(int isParameter);
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements AddressNameIndexDataOrBuilder {

            // isComment
            private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
                super(isNameExpr);
                this.isFieldAccessExpr = isNameExpr.isMethod();
            }

            private isConstructor(boolean isParameter) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private static final AddressNameIndexData isVariable;

            public static AddressNameIndexData isMethod() {
                return isNameExpr;
            }

            public AddressNameIndexData isMethod() {
                return isNameExpr;
            }

            private final com.google.protobuf.UnknownFieldSet isVariable;

            @java.lang.Override
            public final com.google.protobuf.UnknownFieldSet isMethod() {
                return this.isFieldAccessExpr;
            }

            private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                isMethod();
                int isVariable = isIntegerConstant;
                com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                try {
                    boolean isVariable = true;
                    while (!isNameExpr) {
                        int isVariable = isNameExpr.isMethod();
                        switch(isNameExpr) {
                            case isIntegerConstant:
                                isNameExpr = true;
                                break;
                            default:
                                {
                                    if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                        isNameExpr = true;
                                    }
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom>();
                                        isNameExpr |= isIntegerConstant;
                                    }
                                    isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                    break;
                                }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    throw isNameExpr.isMethod(this);
                } catch (java.io.IOException isParameter) {
                    throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
                } finally {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                    this.isFieldAccessExpr = isNameExpr.isMethod();
                    isMethod();
                }
            }

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData.class, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData.Builder.class);
            }

            public static com.google.protobuf.Parser<AddressNameIndexData> isVariable = new com.google.protobuf.AbstractParser<AddressNameIndexData>() {

                public AddressNameIndexData isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                    return new AddressNameIndexData(isNameExpr, isNameExpr);
                }
            };

            @java.lang.Override
            public com.google.protobuf.Parser<AddressNameIndexData> isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private java.util.List<net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.AddressNameIndexDataAtomOrBuilder> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.AddressNameIndexDataAtomOrBuilder isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private void isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private byte isVariable = -isIntegerConstant;

            public final boolean isMethod() {
                byte isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr == isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        isNameExpr = isIntegerConstant;
                        return true;
                    }
                }
                isNameExpr = isIntegerConstant;
                return true;
            }

            public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
                isMethod();
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                isMethod().isMethod(isNameExpr);
            }

            private int isVariable = -isIntegerConstant;

            public int isMethod() {
                int isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr;
                isNameExpr = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isMethod().isMethod();
                isNameExpr = isNameExpr;
                return isNameExpr;
            }

            private static final long isVariable = isStringConstant;

            @java.lang.Override
            protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
                return super.isMethod();
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static Builder isMethod() {
                return isNameExpr.isMethod();
            }

            public Builder isMethod() {
                return isMethod();
            }

            public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            public Builder isMethod() {
                return isMethod(this);
            }

            @java.lang.Override
            protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                Builder isVariable = new Builder(isNameExpr);
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexDataOrBuilder {

                public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData.class, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData.Builder.class);
                }

                // isComment
                private isConstructor() {
                    isMethod();
                }

                private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                    super(isNameExpr);
                    isMethod();
                }

                private void isMethod() {
                    if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        isMethod();
                    }
                }

                private static Builder isMethod() {
                    return new Builder();
                }

                public Builder isMethod() {
                    super.isMethod();
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                public Builder isMethod() {
                    return isMethod().isMethod(isMethod());
                }

                public com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                }

                public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isVariable = isMethod();
                    if (!isNameExpr.isMethod()) {
                        throw isMethod(isNameExpr);
                    }
                    return isNameExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isVariable = new net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData(this);
                    int isVariable = isNameExpr;
                    if (isNameExpr == null) {
                        if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        }
                        isNameExpr.isFieldAccessExpr = isNameExpr;
                    } else {
                        isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    }
                    isMethod();
                    return isNameExpr;
                }

                public Builder isMethod(com.google.protobuf.Message isParameter) {
                    if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData) {
                        return isMethod((net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData) isNameExpr);
                    } else {
                        super.isMethod(isNameExpr);
                        return this;
                    }
                }

                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isParameter) {
                    if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                        return this;
                    if (isNameExpr == null) {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                            } else {
                                isMethod();
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                            isMethod();
                        }
                    } else {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr.isMethod();
                                isNameExpr = null;
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                            } else {
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                        }
                    }
                    this.isMethod(isNameExpr.isMethod());
                    return this;
                }

                public final boolean isMethod() {
                    for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                        if (!isMethod(isNameExpr).isMethod()) {
                            return true;
                        }
                    }
                    return true;
                }

                public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                    net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isVariable = null;
                    try {
                        isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                    } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                        isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData) isNameExpr.isMethod();
                        throw isNameExpr;
                    } finally {
                        if (isNameExpr != null) {
                            isMethod(isNameExpr);
                        }
                    }
                    return this;
                }

                private int isVariable;

                // isComment
                private java.util.List<net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

                private void isMethod() {
                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom>(isNameExpr);
                        isNameExpr |= isIntegerConstant;
                    }
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom, net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom.Builder, net.osmand.binary.OsmandOdb.AddressNameIndexDataAtomOrBuilder> isVariable;

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom> isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom> isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        super.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                        isMethod();
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr);
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.AddressNameIndexDataAtomOrBuilder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public java.util.List<? extends net.osmand.binary.OsmandOdb.AddressNameIndexDataAtomOrBuilder> isMethod() {
                    if (isNameExpr != null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom.Builder isMethod() {
                    return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom.Builder> isMethod() {
                    return isMethod().isMethod();
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom, net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom.Builder, net.osmand.binary.OsmandOdb.AddressNameIndexDataAtomOrBuilder> isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom, net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom.Builder, net.osmand.binary.OsmandOdb.AddressNameIndexDataAtomOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                        isNameExpr = null;
                    }
                    return isNameExpr;
                }
            }

            static {
                isNameExpr = new AddressNameIndexData(true);
                isNameExpr.isMethod();
            }
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private net.osmand.binary.OsmandOdb.IndexedStringTable isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.IndexedStringTable isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexDataOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexDataOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexDataOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.class, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isVariable = new net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                if (isNameExpr == null) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private net.osmand.binary.OsmandOdb.IndexedStringTable isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.IndexedStringTable, net.osmand.binary.OsmandOdb.IndexedStringTable.Builder, net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder> isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.IndexedStringTable isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr;
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.IndexedStringTable isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr = isNameExpr;
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.IndexedStringTable.Builder isParameter) {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.IndexedStringTable isParameter) {
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                    } else {
                        isNameExpr = isNameExpr;
                    }
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.IndexedStringTable.Builder isMethod() {
                isNameExpr |= isIntegerConstant;
                isMethod();
                return isMethod().isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.IndexedStringTable, net.osmand.binary.OsmandOdb.IndexedStringTable.Builder, net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.IndexedStringTable, net.osmand.binary.OsmandOdb.IndexedStringTable.Builder, net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder>(isNameExpr, isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData.Builder, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexDataOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexDataOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexDataOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData.Builder, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexDataOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexData.Builder, net.osmand.binary.OsmandOdb.OsmAndAddressNameIndexData.AddressNameIndexDataOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new OsmAndAddressNameIndexData(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements AddressNameIndexDataAtomOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final AddressNameIndexDataAtom isVariable;

        public static AddressNameIndexDataAtom isMethod() {
            return isNameExpr;
        }

        public AddressNameIndexDataAtom isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom.class, net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom.Builder.class);
        }

        public static com.google.protobuf.Parser<AddressNameIndexDataAtom> isVariable = new com.google.protobuf.AbstractParser<AddressNameIndexDataAtom>() {

            public AddressNameIndexDataAtom isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new AddressNameIndexDataAtom(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<AddressNameIndexDataAtom> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = "isStringConstant";
            isNameExpr = "isStringConstant";
            isNameExpr = isIntegerConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.AddressNameIndexDataAtomOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom.class, net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod() {
                net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isMethod() {
                net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isVariable = new net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom) {
                    return isMethod((net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.AddressNameIndexDataAtom) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new AddressNameIndexDataAtom(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        long isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.String> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod(int isParameter);

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements CityIndexOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final CityIndex isVariable;

        public static CityIndex isMethod() {
            return isNameExpr;
        }

        public CityIndex isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new com.google.protobuf.LazyStringArrayList();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.CityIndex.class, net.osmand.binary.OsmandOdb.CityIndex.Builder.class);
        }

        public static com.google.protobuf.Parser<CityIndex> isVariable = new com.google.protobuf.AbstractParser<CityIndex>() {

            public CityIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new CityIndex(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<CityIndex> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private long isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public long isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.LazyStringList isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.String> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public java.lang.String isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        private void isMethod() {
            isNameExpr = isIntegerConstant;
            isNameExpr = "isStringConstant";
            isNameExpr = "isStringConstant";
            isNameExpr = isStringConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isIntegerConstant;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.CityIndex isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityIndex isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityIndex isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityIndex isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityIndex isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.CityIndex isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.CityIndexOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.CityIndex.class, net.osmand.binary.OsmandOdb.CityIndex.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.CityIndex isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.CityIndex isMethod() {
                net.osmand.binary.OsmandOdb.CityIndex isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.CityIndex isMethod() {
                net.osmand.binary.OsmandOdb.CityIndex isVariable = new net.osmand.binary.OsmandOdb.CityIndex(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.CityIndex) {
                    return isMethod((net.osmand.binary.OsmandOdb.CityIndex) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.CityIndex isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.CityIndex isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.CityIndex) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private long isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public long isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(long isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.LazyStringList isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.LazyStringArrayList(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.String> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public java.lang.String isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<java.lang.String> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new CityIndex(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.BuildingIndex isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.StreetIndex> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.StreetIndex isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.StreetIndexOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.StreetIndexOrBuilder isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements CityBlockIndexOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final CityBlockIndex isVariable;

        public static CityBlockIndex isMethod() {
            return isNameExpr;
        }

        public CityBlockIndex isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.BuildingIndex>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.StreetIndex>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.CityBlockIndex.class, net.osmand.binary.OsmandOdb.CityBlockIndex.Builder.class);
        }

        public static com.google.protobuf.Parser<CityBlockIndex> isVariable = new com.google.protobuf.AbstractParser<CityBlockIndex>() {

            public CityBlockIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new CityBlockIndex(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<CityBlockIndex> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.BuildingIndex isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.StreetIndex> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.StreetIndex> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.StreetIndexOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.StreetIndex isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.StreetIndexOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = isIntegerConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.CityBlockIndex isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityBlockIndex isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityBlockIndex isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityBlockIndex isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityBlockIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityBlockIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityBlockIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityBlockIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityBlockIndex isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.CityBlockIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.CityBlockIndex isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.CityBlockIndexOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.CityBlockIndex.class, net.osmand.binary.OsmandOdb.CityBlockIndex.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.CityBlockIndex isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.CityBlockIndex isMethod() {
                net.osmand.binary.OsmandOdb.CityBlockIndex isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.CityBlockIndex isMethod() {
                net.osmand.binary.OsmandOdb.CityBlockIndex isVariable = new net.osmand.binary.OsmandOdb.CityBlockIndex(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.CityBlockIndex) {
                    return isMethod((net.osmand.binary.OsmandOdb.CityBlockIndex) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.CityBlockIndex isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.CityBlockIndex isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.CityBlockIndex) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.BuildingIndex>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.BuildingIndex, net.osmand.binary.OsmandOdb.BuildingIndex.Builder, net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.BuildingIndex isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.BuildingIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.BuildingIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.BuildingIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.BuildingIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.BuildingIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.BuildingIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.BuildingIndex> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.BuildingIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.BuildingIndex.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.BuildingIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.BuildingIndex, net.osmand.binary.OsmandOdb.BuildingIndex.Builder, net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.BuildingIndex, net.osmand.binary.OsmandOdb.BuildingIndex.Builder, net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.StreetIndex> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.StreetIndex>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.StreetIndex, net.osmand.binary.OsmandOdb.StreetIndex.Builder, net.osmand.binary.OsmandOdb.StreetIndexOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.StreetIndex> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StreetIndex isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.StreetIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.StreetIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.StreetIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.StreetIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.StreetIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.StreetIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.StreetIndex> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StreetIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StreetIndexOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.StreetIndexOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StreetIndex.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StreetIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.StreetIndex.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.StreetIndex, net.osmand.binary.OsmandOdb.StreetIndex.Builder, net.osmand.binary.OsmandOdb.StreetIndexOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.StreetIndex, net.osmand.binary.OsmandOdb.StreetIndex.Builder, net.osmand.binary.OsmandOdb.StreetIndexOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new CityBlockIndex(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.StreetIntersection> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.StreetIntersection isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.StreetIntersectionOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.StreetIntersectionOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        long isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.String> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod(int isParameter);

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.BuildingIndex isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements StreetIndexOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final StreetIndex isVariable;

        public static StreetIndex isMethod() {
            return isNameExpr;
        }

        public StreetIndex isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.StreetIntersection>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new com.google.protobuf.LazyStringArrayList();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.BuildingIndex>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.StreetIndex.class, net.osmand.binary.OsmandOdb.StreetIndex.Builder.class);
        }

        public static com.google.protobuf.Parser<StreetIndex> isVariable = new com.google.protobuf.AbstractParser<StreetIndex>() {

            public StreetIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new StreetIndex(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<StreetIndex> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.StreetIntersection> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.StreetIntersection> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.StreetIntersectionOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.StreetIntersection isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.StreetIntersectionOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private long isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public long isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.LazyStringList isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.String> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public java.lang.String isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.BuildingIndex isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = "isStringConstant";
            isNameExpr = "isStringConstant";
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isStringConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.StreetIndex isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIndex isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIndex isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIndex isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIndex isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.StreetIndex isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.StreetIndexOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.StreetIndex.class, net.osmand.binary.OsmandOdb.StreetIndex.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = isStringConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.StreetIndex isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.StreetIndex isMethod() {
                net.osmand.binary.OsmandOdb.StreetIndex isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.StreetIndex isMethod() {
                net.osmand.binary.OsmandOdb.StreetIndex isVariable = new net.osmand.binary.OsmandOdb.StreetIndex(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.StreetIndex) {
                    return isMethod((net.osmand.binary.OsmandOdb.StreetIndex) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.StreetIndex isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.StreetIndex isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.StreetIndex) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.StreetIntersection> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.StreetIntersection>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.StreetIntersection, net.osmand.binary.OsmandOdb.StreetIntersection.Builder, net.osmand.binary.OsmandOdb.StreetIntersectionOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.StreetIntersection> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StreetIntersection isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.StreetIntersection isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.StreetIntersection.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.StreetIntersection isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.StreetIntersection isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.StreetIntersection.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.StreetIntersection.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.StreetIntersection> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StreetIntersection.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StreetIntersectionOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.StreetIntersectionOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StreetIntersection.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StreetIntersection.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.StreetIntersection.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.StreetIntersection, net.osmand.binary.OsmandOdb.StreetIntersection.Builder, net.osmand.binary.OsmandOdb.StreetIntersectionOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.StreetIntersection, net.osmand.binary.OsmandOdb.StreetIntersection.Builder, net.osmand.binary.OsmandOdb.StreetIntersectionOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private long isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public long isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(long isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.LazyStringList isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.LazyStringArrayList(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.String> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public java.lang.String isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<java.lang.String> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.BuildingIndex>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.BuildingIndex, net.osmand.binary.OsmandOdb.BuildingIndex.Builder, net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.BuildingIndex isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.BuildingIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.BuildingIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.BuildingIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.BuildingIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.BuildingIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.BuildingIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.BuildingIndex> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.BuildingIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.BuildingIndex.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.BuildingIndex.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.BuildingIndex.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.BuildingIndex, net.osmand.binary.OsmandOdb.BuildingIndex.Builder, net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.BuildingIndex, net.osmand.binary.OsmandOdb.BuildingIndex.Builder, net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new StreetIndex(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.String> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod(int isParameter);

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements StreetIntersectionOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final StreetIntersection isVariable;

        public static StreetIntersection isMethod() {
            return isNameExpr;
        }

        public StreetIntersection isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new com.google.protobuf.LazyStringArrayList();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.StreetIntersection.class, net.osmand.binary.OsmandOdb.StreetIntersection.Builder.class);
        }

        public static com.google.protobuf.Parser<StreetIntersection> isVariable = new com.google.protobuf.AbstractParser<StreetIntersection>() {

            public StreetIntersection isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new StreetIntersection(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<StreetIntersection> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.LazyStringList isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.String> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public java.lang.String isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = "isStringConstant";
            isNameExpr = "isStringConstant";
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.StreetIntersection isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIntersection isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIntersection isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIntersection isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIntersection isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIntersection isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIntersection isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIntersection isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIntersection isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.StreetIntersection isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.StreetIntersection isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.StreetIntersectionOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.StreetIntersection.class, net.osmand.binary.OsmandOdb.StreetIntersection.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.StreetIntersection isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.StreetIntersection isMethod() {
                net.osmand.binary.OsmandOdb.StreetIntersection isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.StreetIntersection isMethod() {
                net.osmand.binary.OsmandOdb.StreetIntersection isVariable = new net.osmand.binary.OsmandOdb.StreetIntersection(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.StreetIntersection) {
                    return isMethod((net.osmand.binary.OsmandOdb.StreetIntersection) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.StreetIntersection isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.StreetIntersection isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.StreetIntersection) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.LazyStringList isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.LazyStringArrayList(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.String> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public java.lang.String isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<java.lang.String> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new StreetIntersection(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        long isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.String> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod(int isParameter);

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.String> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod(int isParameter);

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements BuildingIndexOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final BuildingIndex isVariable;

        public static BuildingIndex isMethod() {
            return isNameExpr;
        }

        public BuildingIndex isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new com.google.protobuf.LazyStringArrayList();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new com.google.protobuf.LazyStringArrayList();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.BuildingIndex.class, net.osmand.binary.OsmandOdb.BuildingIndex.Builder.class);
        }

        public static com.google.protobuf.Parser<BuildingIndex> isVariable = new com.google.protobuf.AbstractParser<BuildingIndex>() {

            public BuildingIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new BuildingIndex(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<BuildingIndex> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private long isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public long isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.LazyStringList isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.String> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public java.lang.String isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.LazyStringList isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.String> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public java.lang.String isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = "isStringConstant";
            isNameExpr = "isStringConstant";
            isNameExpr = "isStringConstant";
            isNameExpr = "isStringConstant";
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isStringConstant;
            isNameExpr = "isStringConstant";
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.BuildingIndex isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.BuildingIndex isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.BuildingIndex isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.BuildingIndex isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.BuildingIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.BuildingIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.BuildingIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.BuildingIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.BuildingIndex isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.BuildingIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.BuildingIndex isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.BuildingIndexOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.BuildingIndex.class, net.osmand.binary.OsmandOdb.BuildingIndex.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.BuildingIndex isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.BuildingIndex isMethod() {
                net.osmand.binary.OsmandOdb.BuildingIndex isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.BuildingIndex isMethod() {
                net.osmand.binary.OsmandOdb.BuildingIndex isVariable = new net.osmand.binary.OsmandOdb.BuildingIndex(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.BuildingIndex) {
                    return isMethod((net.osmand.binary.OsmandOdb.BuildingIndex) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.BuildingIndex isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.BuildingIndex isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.BuildingIndex) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private long isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public long isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(long isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.LazyStringList isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.LazyStringArrayList(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.String> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public java.lang.String isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<java.lang.String> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.LazyStringList isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.LazyStringArrayList(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.String> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public java.lang.String isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<java.lang.String> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new BuildingIndex(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.TransportRoute> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportRoute isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportRouteOrBuilder isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements TransportRoutesOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final TransportRoutes isVariable;

        public static TransportRoutes isMethod() {
            return isNameExpr;
        }

        public TransportRoutes isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.TransportRoute>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.TransportRoutes.class, net.osmand.binary.OsmandOdb.TransportRoutes.Builder.class);
        }

        public static com.google.protobuf.Parser<TransportRoutes> isVariable = new com.google.protobuf.AbstractParser<TransportRoutes>() {

            public TransportRoutes isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new TransportRoutes(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<TransportRoutes> isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.TransportRoute> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.TransportRoute> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportRoute isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportRouteOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.TransportRoutes isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoutes isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoutes isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoutes isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoutes isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoutes isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoutes isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoutes isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoutes isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoutes isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.TransportRoutes isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.TransportRoutesOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.TransportRoutes.class, net.osmand.binary.OsmandOdb.TransportRoutes.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.TransportRoutes isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.TransportRoutes isMethod() {
                net.osmand.binary.OsmandOdb.TransportRoutes isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.TransportRoutes isMethod() {
                net.osmand.binary.OsmandOdb.TransportRoutes isVariable = new net.osmand.binary.OsmandOdb.TransportRoutes(this);
                int isVariable = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.TransportRoutes) {
                    return isMethod((net.osmand.binary.OsmandOdb.TransportRoutes) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRoutes isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.TransportRoutes isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.TransportRoutes) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.TransportRoute> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.TransportRoute>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRoute, net.osmand.binary.OsmandOdb.TransportRoute.Builder, net.osmand.binary.OsmandOdb.TransportRouteOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.TransportRoute> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRoute isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRoute isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRoute.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRoute isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRoute isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRoute.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRoute.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.TransportRoute> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRoute.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRoute.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRoute.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.TransportRoute.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRoute, net.osmand.binary.OsmandOdb.TransportRoute.Builder, net.osmand.binary.OsmandOdb.TransportRouteOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRoute, net.osmand.binary.OsmandOdb.TransportRoute.Builder, net.osmand.binary.OsmandOdb.TransportRouteOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new TransportRoutes(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        long isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.TransportRouteStop> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.TransportRouteStop> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.TransportRouteSchedule> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteScheduleOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportRouteScheduleOrBuilder isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements TransportRouteOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final TransportRoute isVariable;

        public static TransportRoute isMethod() {
            return isNameExpr;
        }

        public TransportRoute isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.TransportRouteStop>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.TransportRouteStop>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.TransportRouteSchedule>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.TransportRoute.class, net.osmand.binary.OsmandOdb.TransportRoute.Builder.class);
        }

        public static com.google.protobuf.Parser<TransportRoute> isVariable = new com.google.protobuf.AbstractParser<TransportRoute>() {

            public TransportRoute isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new TransportRoute(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<TransportRoute> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private long isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public long isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.TransportRouteStop> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.TransportRouteStop> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.TransportRouteStop> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.TransportRouteStop> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.TransportRouteSchedule> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.TransportRouteSchedule> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteScheduleOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportRouteScheduleOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = isStringConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = "isStringConstant";
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.TransportRoute isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoute isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoute isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoute isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoute isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoute isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoute isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoute isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoute isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRoute isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.TransportRoute isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.TransportRouteOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.TransportRoute.class, net.osmand.binary.OsmandOdb.TransportRoute.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                    isMethod();
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isStringConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.TransportRoute isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.TransportRoute isMethod() {
                net.osmand.binary.OsmandOdb.TransportRoute isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.TransportRoute isMethod() {
                net.osmand.binary.OsmandOdb.TransportRoute isVariable = new net.osmand.binary.OsmandOdb.TransportRoute(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.TransportRoute) {
                    return isMethod((net.osmand.binary.OsmandOdb.TransportRoute) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRoute isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.TransportRoute isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.TransportRoute) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private long isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public long isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(long isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.TransportRouteStop> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.TransportRouteStop>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRouteStop, net.osmand.binary.OsmandOdb.TransportRouteStop.Builder, net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.TransportRouteStop> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteStop isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteStop.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRouteStop isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteStop isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRouteStop.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteStop.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.TransportRouteStop> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteStop.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteStop.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteStop.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.TransportRouteStop.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRouteStop, net.osmand.binary.OsmandOdb.TransportRouteStop.Builder, net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRouteStop, net.osmand.binary.OsmandOdb.TransportRouteStop.Builder, net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.TransportRouteStop> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.TransportRouteStop>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRouteStop, net.osmand.binary.OsmandOdb.TransportRouteStop.Builder, net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.TransportRouteStop> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteStop isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteStop.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRouteStop isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteStop isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRouteStop.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteStop.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.TransportRouteStop> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteStop.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteStop.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteStop.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.TransportRouteStop.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRouteStop, net.osmand.binary.OsmandOdb.TransportRouteStop.Builder, net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRouteStop, net.osmand.binary.OsmandOdb.TransportRouteStop.Builder, net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.TransportRouteSchedule> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.TransportRouteSchedule>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRouteSchedule, net.osmand.binary.OsmandOdb.TransportRouteSchedule.Builder, net.osmand.binary.OsmandOdb.TransportRouteScheduleOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.TransportRouteSchedule> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteSchedule isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteSchedule.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRouteSchedule isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteSchedule isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRouteSchedule.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteSchedule.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.TransportRouteSchedule> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteSchedule.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteScheduleOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteScheduleOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteSchedule.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteSchedule.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.TransportRouteSchedule.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRouteSchedule, net.osmand.binary.OsmandOdb.TransportRouteSchedule.Builder, net.osmand.binary.OsmandOdb.TransportRouteScheduleOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRouteSchedule, net.osmand.binary.OsmandOdb.TransportRouteSchedule.Builder, net.osmand.binary.OsmandOdb.TransportRouteScheduleOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new TransportRoute(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.TransportRouteScheduleException> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteScheduleExceptionOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportRouteScheduleExceptionOrBuilder isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements TransportRouteScheduleOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final TransportRouteSchedule isVariable;

        public static TransportRouteSchedule isMethod() {
            return isNameExpr;
        }

        public TransportRouteSchedule isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.TransportRouteScheduleException>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.TransportRouteSchedule.class, net.osmand.binary.OsmandOdb.TransportRouteSchedule.Builder.class);
        }

        public static com.google.protobuf.Parser<TransportRouteSchedule> isVariable = new com.google.protobuf.AbstractParser<TransportRouteSchedule>() {

            public TransportRouteSchedule isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new TransportRouteSchedule(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<TransportRouteSchedule> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.TransportRouteScheduleException> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.TransportRouteScheduleException> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteScheduleExceptionOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportRouteScheduleExceptionOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.TransportRouteSchedule isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.TransportRouteScheduleOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.TransportRouteSchedule.class, net.osmand.binary.OsmandOdb.TransportRouteSchedule.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod() {
                net.osmand.binary.OsmandOdb.TransportRouteSchedule isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.TransportRouteSchedule isMethod() {
                net.osmand.binary.OsmandOdb.TransportRouteSchedule isVariable = new net.osmand.binary.OsmandOdb.TransportRouteSchedule(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.TransportRouteSchedule) {
                    return isMethod((net.osmand.binary.OsmandOdb.TransportRouteSchedule) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRouteSchedule isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.TransportRouteSchedule isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.TransportRouteSchedule) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.TransportRouteScheduleException> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.TransportRouteScheduleException>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRouteScheduleException, net.osmand.binary.OsmandOdb.TransportRouteScheduleException.Builder, net.osmand.binary.OsmandOdb.TransportRouteScheduleExceptionOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.TransportRouteScheduleException> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteScheduleException isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteScheduleException.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRouteScheduleException isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteScheduleException isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRouteScheduleException.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportRouteScheduleException.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.TransportRouteScheduleException> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteScheduleException.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteScheduleExceptionOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.TransportRouteScheduleExceptionOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteScheduleException.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRouteScheduleException.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.TransportRouteScheduleException.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRouteScheduleException, net.osmand.binary.OsmandOdb.TransportRouteScheduleException.Builder, net.osmand.binary.OsmandOdb.TransportRouteScheduleExceptionOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportRouteScheduleException, net.osmand.binary.OsmandOdb.TransportRouteScheduleException.Builder, net.osmand.binary.OsmandOdb.TransportRouteScheduleExceptionOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new TransportRouteSchedule(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        boolean isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements TransportRouteScheduleExceptionOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final TransportRouteScheduleException isVariable;

        public static TransportRouteScheduleException isMethod() {
            return isNameExpr;
        }

        public TransportRouteScheduleException isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.TransportRouteScheduleException.class, net.osmand.binary.OsmandOdb.TransportRouteScheduleException.Builder.class);
        }

        public static com.google.protobuf.Parser<TransportRouteScheduleException> isVariable = new com.google.protobuf.AbstractParser<TransportRouteScheduleException>() {

            public TransportRouteScheduleException isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new TransportRouteScheduleException(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<TransportRouteScheduleException> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private boolean isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = true;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.TransportRouteScheduleException isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.TransportRouteScheduleExceptionOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.TransportRouteScheduleException.class, net.osmand.binary.OsmandOdb.TransportRouteScheduleException.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = true;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod() {
                net.osmand.binary.OsmandOdb.TransportRouteScheduleException isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.TransportRouteScheduleException isMethod() {
                net.osmand.binary.OsmandOdb.TransportRouteScheduleException isVariable = new net.osmand.binary.OsmandOdb.TransportRouteScheduleException(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.TransportRouteScheduleException) {
                    return isMethod((net.osmand.binary.OsmandOdb.TransportRouteScheduleException) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRouteScheduleException isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.TransportRouteScheduleException isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.TransportRouteScheduleException) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private boolean isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public boolean isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(boolean isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = true;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new TransportRouteScheduleException(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        long isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements TransportRouteStopOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final TransportRouteStop isVariable;

        public static TransportRouteStop isMethod() {
            return isNameExpr;
        }

        public TransportRouteStop isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.TransportRouteStop.class, net.osmand.binary.OsmandOdb.TransportRouteStop.Builder.class);
        }

        public static com.google.protobuf.Parser<TransportRouteStop> isVariable = new com.google.protobuf.AbstractParser<TransportRouteStop>() {

            public TransportRouteStop isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new TransportRouteStop(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<TransportRouteStop> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private long isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public long isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        private void isMethod() {
            isNameExpr = isStringConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportRouteStop isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.TransportRouteStop isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.TransportRouteStopOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.TransportRouteStop.class, net.osmand.binary.OsmandOdb.TransportRouteStop.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isStringConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.TransportRouteStop isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.TransportRouteStop isMethod() {
                net.osmand.binary.OsmandOdb.TransportRouteStop isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.TransportRouteStop isMethod() {
                net.osmand.binary.OsmandOdb.TransportRouteStop isVariable = new net.osmand.binary.OsmandOdb.TransportRouteStop(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.TransportRouteStop) {
                    return isMethod((net.osmand.binary.OsmandOdb.TransportRouteStop) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRouteStop isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.TransportRouteStop isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.TransportRouteStop) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private long isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public long isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(long isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new TransportRouteStop(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        long isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements TransportStopOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final TransportStop isVariable;

        public static TransportStop isMethod() {
            return isNameExpr;
        }

        public TransportStop isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.TransportStop.class, net.osmand.binary.OsmandOdb.TransportStop.Builder.class);
        }

        public static com.google.protobuf.Parser<TransportStop> isVariable = new com.google.protobuf.AbstractParser<TransportStop>() {

            public TransportStop isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new TransportStop(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<TransportStop> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private long isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public long isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isStringConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.TransportStop isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStop isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStop isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStop isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStop isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStop isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStop isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStop isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStop isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStop isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.TransportStop isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.TransportStopOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.TransportStop.class, net.osmand.binary.OsmandOdb.TransportStop.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.TransportStop isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.TransportStop isMethod() {
                net.osmand.binary.OsmandOdb.TransportStop isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.TransportStop isMethod() {
                net.osmand.binary.OsmandOdb.TransportStop isVariable = new net.osmand.binary.OsmandOdb.TransportStop(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.TransportStop) {
                    return isMethod((net.osmand.binary.OsmandOdb.TransportStop) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportStop isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.TransportStop isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.TransportStop) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private long isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public long isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(long isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new TransportStop(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.TransportStopsTree> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportStopsTree isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.TransportStop> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportStop isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.TransportStopOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportStopOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        long isMethod();
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements TransportStopsTreeOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final TransportStopsTree isVariable;

        public static TransportStopsTree isMethod() {
            return isNameExpr;
        }

        public TransportStopsTree isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.TransportStopsTree>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.TransportStop>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.TransportStopsTree.class, net.osmand.binary.OsmandOdb.TransportStopsTree.Builder.class);
        }

        public static com.google.protobuf.Parser<TransportStopsTree> isVariable = new com.google.protobuf.AbstractParser<TransportStopsTree>() {

            public TransportStopsTree isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new TransportStopsTree(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<TransportStopsTree> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.TransportStopsTree> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.TransportStopsTree> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportStopsTree isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.TransportStop> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.TransportStop> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.TransportStopOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportStop isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportStopOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private long isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public long isMethod() {
            return isNameExpr;
        }

        private void isMethod() {
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isStringConstant;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.TransportStopsTree isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStopsTree isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStopsTree isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStopsTree isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStopsTree isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStopsTree isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStopsTree isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStopsTree isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStopsTree isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.TransportStopsTree isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.TransportStopsTree isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.TransportStopsTree.class, net.osmand.binary.OsmandOdb.TransportStopsTree.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = isStringConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.TransportStopsTree isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.TransportStopsTree isMethod() {
                net.osmand.binary.OsmandOdb.TransportStopsTree isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.TransportStopsTree isMethod() {
                net.osmand.binary.OsmandOdb.TransportStopsTree isVariable = new net.osmand.binary.OsmandOdb.TransportStopsTree(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.TransportStopsTree) {
                    return isMethod((net.osmand.binary.OsmandOdb.TransportStopsTree) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportStopsTree isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.TransportStopsTree isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.TransportStopsTree) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.TransportStopsTree> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.TransportStopsTree>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportStopsTree, net.osmand.binary.OsmandOdb.TransportStopsTree.Builder, net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.TransportStopsTree> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportStopsTree isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportStopsTree isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportStopsTree.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportStopsTree isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportStopsTree isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportStopsTree.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportStopsTree.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.TransportStopsTree> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportStopsTree.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportStopsTree.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportStopsTree.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.TransportStopsTree.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportStopsTree, net.osmand.binary.OsmandOdb.TransportStopsTree.Builder, net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportStopsTree, net.osmand.binary.OsmandOdb.TransportStopsTree.Builder, net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.TransportStop> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.TransportStop>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportStop, net.osmand.binary.OsmandOdb.TransportStop.Builder, net.osmand.binary.OsmandOdb.TransportStopOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.TransportStop> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportStop isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportStop isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportStop.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportStop isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportStop isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportStop.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.TransportStop.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.TransportStop> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportStop.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportStopOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.TransportStopOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportStop.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportStop.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.TransportStop.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportStop, net.osmand.binary.OsmandOdb.TransportStop.Builder, net.osmand.binary.OsmandOdb.TransportStopOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.TransportStop, net.osmand.binary.OsmandOdb.TransportStop.Builder, net.osmand.binary.OsmandOdb.TransportStopOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private long isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public long isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(long isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new TransportStopsTree(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportRoutes isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportRoutesOrBuilder isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportStopsTree isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.StringTable isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.StringTableOrBuilder isMethod();
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndTransportIndexOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndTransportIndex isVariable;

        public static OsmAndTransportIndex isMethod() {
            return isNameExpr;
        }

        public OsmAndTransportIndex isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                net.osmand.binary.OsmandOdb.TransportRoutes.Builder isVariable = null;
                                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                if (isNameExpr != null) {
                                    isNameExpr.isMethod(isNameExpr);
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr |= isIntegerConstant;
                                break;
                            }
                        case isIntegerConstant:
                            {
                                net.osmand.binary.OsmandOdb.TransportStopsTree.Builder isVariable = null;
                                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                if (isNameExpr != null) {
                                    isNameExpr.isMethod(isNameExpr);
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr |= isIntegerConstant;
                                break;
                            }
                        case isIntegerConstant:
                            {
                                net.osmand.binary.OsmandOdb.StringTable.Builder isVariable = null;
                                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                if (isNameExpr != null) {
                                    isNameExpr.isMethod(isNameExpr);
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr |= isIntegerConstant;
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndTransportIndex.class, net.osmand.binary.OsmandOdb.OsmAndTransportIndex.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndTransportIndex> isVariable = new com.google.protobuf.AbstractParser<OsmAndTransportIndex>() {

            public OsmAndTransportIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndTransportIndex(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndTransportIndex> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private net.osmand.binary.OsmandOdb.TransportRoutes isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportRoutes isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportRoutesOrBuilder isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private net.osmand.binary.OsmandOdb.TransportStopsTree isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportStopsTree isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private net.osmand.binary.OsmandOdb.StringTable isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.StringTable isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.StringTableOrBuilder isMethod() {
            return isNameExpr;
        }

        private void isMethod() {
            isNameExpr = "isStringConstant";
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (isMethod()) {
                if (!isMethod().isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            if (isMethod()) {
                if (!isMethod().isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndTransportIndex isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndTransportIndexOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndTransportIndex.class, net.osmand.binary.OsmandOdb.OsmAndTransportIndex.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                    isMethod();
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndTransportIndex isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndTransportIndex isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndTransportIndex isVariable = new net.osmand.binary.OsmandOdb.OsmAndTransportIndex(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                if (isNameExpr == null) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                if (isNameExpr == null) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                if (isNameExpr == null) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndTransportIndex) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndTransportIndex) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndTransportIndex isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (isMethod()) {
                    if (!isMethod().isMethod()) {
                        return true;
                    }
                }
                if (isMethod()) {
                    if (!isMethod().isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndTransportIndex isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndTransportIndex) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private net.osmand.binary.OsmandOdb.TransportRoutes isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.TransportRoutes, net.osmand.binary.OsmandOdb.TransportRoutes.Builder, net.osmand.binary.OsmandOdb.TransportRoutesOrBuilder> isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRoutes isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr;
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRoutes isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr = isNameExpr;
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRoutes.Builder isParameter) {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportRoutes isParameter) {
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                    } else {
                        isNameExpr = isNameExpr;
                    }
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRoutes.Builder isMethod() {
                isNameExpr |= isIntegerConstant;
                isMethod();
                return isMethod().isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportRoutesOrBuilder isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.TransportRoutes, net.osmand.binary.OsmandOdb.TransportRoutes.Builder, net.osmand.binary.OsmandOdb.TransportRoutesOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.TransportRoutes, net.osmand.binary.OsmandOdb.TransportRoutes.Builder, net.osmand.binary.OsmandOdb.TransportRoutesOrBuilder>(isNameExpr, isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private net.osmand.binary.OsmandOdb.TransportStopsTree isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.TransportStopsTree, net.osmand.binary.OsmandOdb.TransportStopsTree.Builder, net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder> isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportStopsTree isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr;
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportStopsTree isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr = isNameExpr;
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportStopsTree.Builder isParameter) {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.TransportStopsTree isParameter) {
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                    } else {
                        isNameExpr = isNameExpr;
                    }
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportStopsTree.Builder isMethod() {
                isNameExpr |= isIntegerConstant;
                isMethod();
                return isMethod().isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.TransportStopsTree, net.osmand.binary.OsmandOdb.TransportStopsTree.Builder, net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.TransportStopsTree, net.osmand.binary.OsmandOdb.TransportStopsTree.Builder, net.osmand.binary.OsmandOdb.TransportStopsTreeOrBuilder>(isNameExpr, isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private net.osmand.binary.OsmandOdb.StringTable isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.StringTable, net.osmand.binary.OsmandOdb.StringTable.Builder, net.osmand.binary.OsmandOdb.StringTableOrBuilder> isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StringTable isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr;
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.StringTable isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr = isNameExpr;
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.StringTable.Builder isParameter) {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.StringTable isParameter) {
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                    } else {
                        isNameExpr = isNameExpr;
                    }
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StringTable.Builder isMethod() {
                isNameExpr |= isIntegerConstant;
                isMethod();
                return isMethod().isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StringTableOrBuilder isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.StringTable, net.osmand.binary.OsmandOdb.StringTable.Builder, net.osmand.binary.OsmandOdb.StringTableOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.StringTable, net.osmand.binary.OsmandOdb.StringTable.Builder, net.osmand.binary.OsmandOdb.StringTableOrBuilder>(isNameExpr, isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new OsmAndTransportIndex(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndTileBoxOrBuilder isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndCategoryTable> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndCategoryTableOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndCategoryTableOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexOrBuilder isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndSubtypesTableOrBuilder isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBox> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBoxData> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataOrBuilder isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndPoiIndexOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndPoiIndex isVariable;

        public static OsmAndPoiIndex isMethod() {
            return isNameExpr;
        }

        public OsmAndPoiIndex isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                net.osmand.binary.OsmandOdb.OsmAndTileBox.Builder isVariable = null;
                                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                if (isNameExpr != null) {
                                    isNameExpr.isMethod(isNameExpr);
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr |= isIntegerConstant;
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndCategoryTable>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.Builder isVariable = null;
                                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                if (isNameExpr != null) {
                                    isNameExpr.isMethod(isNameExpr);
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr |= isIntegerConstant;
                                break;
                            }
                        case isIntegerConstant:
                            {
                                net.osmand.binary.OsmandOdb.OsmAndSubtypesTable.Builder isVariable = null;
                                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                if (isNameExpr != null) {
                                    isNameExpr.isMethod(isNameExpr);
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr |= isIntegerConstant;
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiBox>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiBoxData>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiIndex.class, net.osmand.binary.OsmandOdb.OsmAndPoiIndex.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndPoiIndex> isVariable = new com.google.protobuf.AbstractParser<OsmAndPoiIndex>() {

            public OsmAndPoiIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndPoiIndex(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndPoiIndex> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private net.osmand.binary.OsmandOdb.OsmAndTileBox isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndTileBoxOrBuilder isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndCategoryTable> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndCategoryTable> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndCategoryTableOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndCategoryTableOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexOrBuilder isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndSubtypesTableOrBuilder isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBox> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBox> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBoxData> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBoxData> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = "isStringConstant";
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod().isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            if (isMethod()) {
                if (!isMethod().isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            if (isMethod()) {
                if (!isMethod().isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiIndex isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndPoiIndexOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiIndex.class, net.osmand.binary.OsmandOdb.OsmAndPoiIndex.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                    isMethod();
                    isMethod();
                    isMethod();
                    isMethod();
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiIndex isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiIndex isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiIndex isVariable = new net.osmand.binary.OsmandOdb.OsmAndPoiIndex(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                if (isNameExpr == null) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                if (isNameExpr == null) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                if (isNameExpr == null) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndPoiIndex) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndPoiIndex) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiIndex isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod().isMethod()) {
                    return true;
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                if (isMethod()) {
                    if (!isMethod().isMethod()) {
                        return true;
                    }
                }
                if (isMethod()) {
                    if (!isMethod().isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndPoiIndex isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndPoiIndex) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private net.osmand.binary.OsmandOdb.OsmAndTileBox isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndTileBox, net.osmand.binary.OsmandOdb.OsmAndTileBox.Builder, net.osmand.binary.OsmandOdb.OsmAndTileBoxOrBuilder> isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndTileBox isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr;
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndTileBox isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr = isNameExpr;
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndTileBox.Builder isParameter) {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndTileBox isParameter) {
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                    } else {
                        isNameExpr = isNameExpr;
                    }
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndTileBox.Builder isMethod() {
                isNameExpr |= isIntegerConstant;
                isMethod();
                return isMethod().isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndTileBoxOrBuilder isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndTileBox, net.osmand.binary.OsmandOdb.OsmAndTileBox.Builder, net.osmand.binary.OsmandOdb.OsmAndTileBoxOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndTileBox, net.osmand.binary.OsmandOdb.OsmAndTileBox.Builder, net.osmand.binary.OsmandOdb.OsmAndTileBoxOrBuilder>(isNameExpr, isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndCategoryTable> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndCategoryTable>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndCategoryTable, net.osmand.binary.OsmandOdb.OsmAndCategoryTable.Builder, net.osmand.binary.OsmandOdb.OsmAndCategoryTableOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndCategoryTable> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndCategoryTable isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndCategoryTable.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndCategoryTable isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndCategoryTable isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndCategoryTable.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndCategoryTable.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndCategoryTable> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndCategoryTable.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndCategoryTableOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndCategoryTableOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndCategoryTable.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndCategoryTable.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndCategoryTable.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndCategoryTable, net.osmand.binary.OsmandOdb.OsmAndCategoryTable.Builder, net.osmand.binary.OsmandOdb.OsmAndCategoryTableOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndCategoryTable, net.osmand.binary.OsmandOdb.OsmAndCategoryTable.Builder, net.osmand.binary.OsmandOdb.OsmAndCategoryTableOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexOrBuilder> isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr;
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr = isNameExpr;
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.Builder isParameter) {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isParameter) {
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                    } else {
                        isNameExpr = isNameExpr;
                    }
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.Builder isMethod() {
                isNameExpr |= isIntegerConstant;
                isMethod();
                return isMethod().isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexOrBuilder isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexOrBuilder>(isNameExpr, isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndSubtypesTable, net.osmand.binary.OsmandOdb.OsmAndSubtypesTable.Builder, net.osmand.binary.OsmandOdb.OsmAndSubtypesTableOrBuilder> isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr;
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr = isNameExpr;
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndSubtypesTable.Builder isParameter) {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isParameter) {
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                    } else {
                        isNameExpr = isNameExpr;
                    }
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndSubtypesTable.Builder isMethod() {
                isNameExpr |= isIntegerConstant;
                isMethod();
                return isMethod().isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndSubtypesTableOrBuilder isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndSubtypesTable, net.osmand.binary.OsmandOdb.OsmAndSubtypesTable.Builder, net.osmand.binary.OsmandOdb.OsmAndSubtypesTableOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndSubtypesTable, net.osmand.binary.OsmandOdb.OsmAndSubtypesTable.Builder, net.osmand.binary.OsmandOdb.OsmAndSubtypesTableOrBuilder>(isNameExpr, isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBox> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiBox>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiBox, net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBox> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBox isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBox isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBox isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBox> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiBox, net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiBox, net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBoxData> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiBoxData>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiBoxData, net.osmand.binary.OsmandOdb.OsmAndPoiBoxData.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBoxData> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBoxData.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBoxData.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBoxData.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBoxData> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxData.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxData.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxData.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBoxData.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiBoxData, net.osmand.binary.OsmandOdb.OsmAndPoiBoxData.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiBoxData, net.osmand.binary.OsmandOdb.OsmAndPoiBoxData.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new OsmAndPoiIndex(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.IndexedStringTable isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexDataOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexDataOrBuilder isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndPoiNameIndexOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndPoiNameIndex isVariable;

        public static OsmAndPoiNameIndex isMethod() {
            return isNameExpr;
        }

        public OsmAndPoiNameIndex isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                net.osmand.binary.OsmandOdb.IndexedStringTable.Builder isVariable = null;
                                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                if (isNameExpr != null) {
                                    isNameExpr.isMethod(isNameExpr);
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr |= isIntegerConstant;
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.class, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndPoiNameIndex> isVariable = new com.google.protobuf.AbstractParser<OsmAndPoiNameIndex>() {

            public OsmAndPoiNameIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndPoiNameIndex(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndPoiNameIndex> isMethod() {
            return isNameExpr;
        }

        public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

            // isComment
            /**
             * isComment
             */
            java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod(int isParameter);

            /**
             * isComment
             */
            int isMethod();

            /**
             * isComment
             */
            java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtomOrBuilder> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtomOrBuilder isMethod(int isParameter);
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndPoiNameIndexDataOrBuilder {

            // isComment
            private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
                super(isNameExpr);
                this.isFieldAccessExpr = isNameExpr.isMethod();
            }

            private isConstructor(boolean isParameter) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private static final OsmAndPoiNameIndexData isVariable;

            public static OsmAndPoiNameIndexData isMethod() {
                return isNameExpr;
            }

            public OsmAndPoiNameIndexData isMethod() {
                return isNameExpr;
            }

            private final com.google.protobuf.UnknownFieldSet isVariable;

            @java.lang.Override
            public final com.google.protobuf.UnknownFieldSet isMethod() {
                return this.isFieldAccessExpr;
            }

            private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                isMethod();
                int isVariable = isIntegerConstant;
                com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                try {
                    boolean isVariable = true;
                    while (!isNameExpr) {
                        int isVariable = isNameExpr.isMethod();
                        switch(isNameExpr) {
                            case isIntegerConstant:
                                isNameExpr = true;
                                break;
                            default:
                                {
                                    if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                        isNameExpr = true;
                                    }
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom>();
                                        isNameExpr |= isIntegerConstant;
                                    }
                                    isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                    break;
                                }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    throw isNameExpr.isMethod(this);
                } catch (java.io.IOException isParameter) {
                    throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
                } finally {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                    this.isFieldAccessExpr = isNameExpr.isMethod();
                    isMethod();
                }
            }

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData.class, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData.Builder.class);
            }

            public static com.google.protobuf.Parser<OsmAndPoiNameIndexData> isVariable = new com.google.protobuf.AbstractParser<OsmAndPoiNameIndexData>() {

                public OsmAndPoiNameIndexData isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                    return new OsmAndPoiNameIndexData(isNameExpr, isNameExpr);
                }
            };

            @java.lang.Override
            public com.google.protobuf.Parser<OsmAndPoiNameIndexData> isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtomOrBuilder> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtomOrBuilder isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private void isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private byte isVariable = -isIntegerConstant;

            public final boolean isMethod() {
                byte isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr == isIntegerConstant;
                isNameExpr = isIntegerConstant;
                return true;
            }

            public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
                isMethod();
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                isMethod().isMethod(isNameExpr);
            }

            private int isVariable = -isIntegerConstant;

            public int isMethod() {
                int isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr;
                isNameExpr = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isMethod().isMethod();
                isNameExpr = isNameExpr;
                return isNameExpr;
            }

            private static final long isVariable = isStringConstant;

            @java.lang.Override
            protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
                return super.isMethod();
            }

            public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static Builder isMethod() {
                return isNameExpr.isMethod();
            }

            public Builder isMethod() {
                return isMethod();
            }

            public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            public Builder isMethod() {
                return isMethod(this);
            }

            @java.lang.Override
            protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                Builder isVariable = new Builder(isNameExpr);
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexDataOrBuilder {

                public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData.class, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData.Builder.class);
                }

                // isComment
                private isConstructor() {
                    isMethod();
                }

                private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                    super(isNameExpr);
                    isMethod();
                }

                private void isMethod() {
                    if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        isMethod();
                    }
                }

                private static Builder isMethod() {
                    return new Builder();
                }

                public Builder isMethod() {
                    super.isMethod();
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                public Builder isMethod() {
                    return isMethod().isMethod(isMethod());
                }

                public com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                }

                public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isVariable = isMethod();
                    if (!isNameExpr.isMethod()) {
                        throw isMethod(isNameExpr);
                    }
                    return isNameExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isVariable = new net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData(this);
                    int isVariable = isNameExpr;
                    if (isNameExpr == null) {
                        if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        }
                        isNameExpr.isFieldAccessExpr = isNameExpr;
                    } else {
                        isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    }
                    isMethod();
                    return isNameExpr;
                }

                public Builder isMethod(com.google.protobuf.Message isParameter) {
                    if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData) {
                        return isMethod((net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData) isNameExpr);
                    } else {
                        super.isMethod(isNameExpr);
                        return this;
                    }
                }

                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isParameter) {
                    if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                        return this;
                    if (isNameExpr == null) {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                            } else {
                                isMethod();
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                            isMethod();
                        }
                    } else {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr.isMethod();
                                isNameExpr = null;
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                            } else {
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                        }
                    }
                    this.isMethod(isNameExpr.isMethod());
                    return this;
                }

                public final boolean isMethod() {
                    return true;
                }

                public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                    net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isVariable = null;
                    try {
                        isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                    } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                        isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData) isNameExpr.isMethod();
                        throw isNameExpr;
                    } finally {
                        if (isNameExpr != null) {
                            isMethod(isNameExpr);
                        }
                    }
                    return this;
                }

                private int isVariable;

                // isComment
                private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

                private void isMethod() {
                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom>(isNameExpr);
                        isNameExpr |= isIntegerConstant;
                    }
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtomOrBuilder> isVariable;

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom> isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom> isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        super.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                        isMethod();
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr);
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtomOrBuilder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtomOrBuilder> isMethod() {
                    if (isNameExpr != null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom.Builder isMethod() {
                    return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom.Builder> isMethod() {
                    return isMethod().isMethod();
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtomOrBuilder> isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtomOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                        isNameExpr = null;
                    }
                    return isNameExpr;
                }
            }

            static {
                isNameExpr = new OsmAndPoiNameIndexData(true);
                isNameExpr.isMethod();
            }
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private net.osmand.binary.OsmandOdb.IndexedStringTable isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.IndexedStringTable isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexDataOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexDataOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.class, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isVariable = new net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                if (isNameExpr == null) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private net.osmand.binary.OsmandOdb.IndexedStringTable isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.IndexedStringTable, net.osmand.binary.OsmandOdb.IndexedStringTable.Builder, net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder> isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.IndexedStringTable isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr;
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.IndexedStringTable isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr = isNameExpr;
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.IndexedStringTable.Builder isParameter) {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.IndexedStringTable isParameter) {
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                    } else {
                        isNameExpr = isNameExpr;
                    }
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.IndexedStringTable.Builder isMethod() {
                isNameExpr |= isIntegerConstant;
                isMethod();
                return isMethod().isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.IndexedStringTable, net.osmand.binary.OsmandOdb.IndexedStringTable.Builder, net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.IndexedStringTable, net.osmand.binary.OsmandOdb.IndexedStringTable.Builder, net.osmand.binary.OsmandOdb.IndexedStringTableOrBuilder>(isNameExpr, isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexDataOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexDataOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexDataOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexDataOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexData.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndex.OsmAndPoiNameIndexDataOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new OsmAndPoiNameIndex(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndPoiNameIndexDataAtomOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndPoiNameIndexDataAtom isVariable;

        public static OsmAndPoiNameIndexDataAtom isMethod() {
            return isNameExpr;
        }

        public OsmAndPoiNameIndexDataAtom isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom.class, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndPoiNameIndexDataAtom> isVariable = new com.google.protobuf.AbstractParser<OsmAndPoiNameIndexDataAtom>() {

            public OsmAndPoiNameIndexDataAtom isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndPoiNameIndexDataAtom(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndPoiNameIndexDataAtom> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        private void isMethod() {
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtomOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom.class, net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isVariable = new net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndPoiNameIndexDataAtom) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new OsmAndPoiNameIndexDataAtom(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.String> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod(int isParameter);

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndCategoryTableOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndCategoryTable isVariable;

        public static OsmAndCategoryTable isMethod() {
            return isNameExpr;
        }

        public OsmAndCategoryTable isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new com.google.protobuf.LazyStringArrayList();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndCategoryTable.class, net.osmand.binary.OsmandOdb.OsmAndCategoryTable.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndCategoryTable> isVariable = new com.google.protobuf.AbstractParser<OsmAndCategoryTable>() {

            public OsmAndCategoryTable isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndCategoryTable(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndCategoryTable> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.LazyStringList isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.String> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public java.lang.String isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = "isStringConstant";
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndCategoryTable isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndCategoryTableOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndCategoryTable.class, net.osmand.binary.OsmandOdb.OsmAndCategoryTable.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndCategoryTable isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndCategoryTable isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndCategoryTable isVariable = new net.osmand.binary.OsmandOdb.OsmAndCategoryTable(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndCategoryTable) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndCategoryTable) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndCategoryTable isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndCategoryTable isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndCategoryTable) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.LazyStringList isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.LazyStringArrayList(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.String> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public java.lang.String isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<java.lang.String> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new OsmAndCategoryTable(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiSubtype> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiSubtypeOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiSubtypeOrBuilder isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndSubtypesTableOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndSubtypesTable isVariable;

        public static OsmAndSubtypesTable isMethod() {
            return isNameExpr;
        }

        public OsmAndSubtypesTable isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiSubtype>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndSubtypesTable.class, net.osmand.binary.OsmandOdb.OsmAndSubtypesTable.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndSubtypesTable> isVariable = new com.google.protobuf.AbstractParser<OsmAndSubtypesTable>() {

            public OsmAndSubtypesTable isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndSubtypesTable(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndSubtypesTable> isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiSubtype> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiSubtype> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiSubtypeOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiSubtypeOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndSubtypesTableOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndSubtypesTable.class, net.osmand.binary.OsmandOdb.OsmAndSubtypesTable.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isVariable = new net.osmand.binary.OsmandOdb.OsmAndSubtypesTable(this);
                int isVariable = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndSubtypesTable) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndSubtypesTable) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndSubtypesTable isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndSubtypesTable) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiSubtype> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiSubtype>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiSubtype, net.osmand.binary.OsmandOdb.OsmAndPoiSubtype.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiSubtypeOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiSubtype> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiSubtype.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiSubtype.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiSubtype.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndPoiSubtype> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiSubtype.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiSubtypeOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiSubtypeOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiSubtype.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiSubtype.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiSubtype.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiSubtype, net.osmand.binary.OsmandOdb.OsmAndPoiSubtype.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiSubtypeOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiSubtype, net.osmand.binary.OsmandOdb.OsmAndPoiSubtype.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiSubtypeOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new OsmAndSubtypesTable(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        boolean isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.String> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod(int isParameter);

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndPoiSubtypeOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndPoiSubtype isVariable;

        public static OsmAndPoiSubtype isMethod() {
            return isNameExpr;
        }

        public OsmAndPoiSubtype isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new com.google.protobuf.LazyStringArrayList();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiSubtype.class, net.osmand.binary.OsmandOdb.OsmAndPoiSubtype.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndPoiSubtype> isVariable = new com.google.protobuf.AbstractParser<OsmAndPoiSubtype>() {

            public OsmAndPoiSubtype isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndPoiSubtype(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndPoiSubtype> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private boolean isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.LazyStringList isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.String> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public java.lang.String isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = "isStringConstant";
            isNameExpr = "isStringConstant";
            isNameExpr = true;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndPoiSubtypeOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiSubtype.class, net.osmand.binary.OsmandOdb.OsmAndPoiSubtype.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = true;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isVariable = new net.osmand.binary.OsmandOdb.OsmAndPoiSubtype(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndPoiSubtype) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndPoiSubtype) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndPoiSubtype isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndPoiSubtype) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private boolean isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public boolean isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(boolean isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = true;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.LazyStringList isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.LazyStringArrayList(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.String> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public java.lang.String isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<java.lang.String> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new OsmAndPoiSubtype(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiCategoriesOrBuilder isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBox> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndPoiBoxOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndPoiBox isVariable;

        public static OsmAndPoiBox isMethod() {
            return isNameExpr;
        }

        public OsmAndPoiBox isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                net.osmand.binary.OsmandOdb.OsmAndPoiCategories.Builder isVariable = null;
                                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                if (isNameExpr != null) {
                                    isNameExpr.isMethod(isNameExpr);
                                    isNameExpr = isNameExpr.isMethod();
                                }
                                isNameExpr |= isIntegerConstant;
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiBox>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBox.class, net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndPoiBox> isVariable = new com.google.protobuf.AbstractParser<OsmAndPoiBox>() {

            public OsmAndPoiBox isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndPoiBox(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndPoiBox> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private net.osmand.binary.OsmandOdb.OsmAndPoiCategories isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiCategoriesOrBuilder isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBox> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBox> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        private void isMethod() {
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isIntegerConstant;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBox isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBox.class, net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiBox isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiBox isVariable = new net.osmand.binary.OsmandOdb.OsmAndPoiBox(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                if (isNameExpr == null) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndPoiBox) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndPoiBox) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBox isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndPoiBox isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndPoiBox) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private net.osmand.binary.OsmandOdb.OsmAndPoiCategories isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiCategories, net.osmand.binary.OsmandOdb.OsmAndPoiCategories.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiCategoriesOrBuilder> isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr;
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiCategories isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr = isNameExpr;
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiCategories.Builder isParameter) {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiCategories isParameter) {
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                    } else {
                        isNameExpr = isNameExpr;
                    }
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                isNameExpr |= isIntegerConstant;
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiCategories.Builder isMethod() {
                isNameExpr |= isIntegerConstant;
                isMethod();
                return isMethod().isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiCategoriesOrBuilder isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiCategories, net.osmand.binary.OsmandOdb.OsmAndPoiCategories.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiCategoriesOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiCategories, net.osmand.binary.OsmandOdb.OsmAndPoiCategories.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiCategoriesOrBuilder>(isNameExpr, isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBox> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiBox>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiBox, net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBox> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBox isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBox isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBox isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBox isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBox> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiBox, net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiBox, net.osmand.binary.OsmandOdb.OsmAndPoiBox.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiBoxOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new OsmAndPoiBox(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndPoiCategoriesOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndPoiCategories isVariable;

        public static OsmAndPoiCategories isMethod() {
            return isNameExpr;
        }

        public OsmAndPoiCategories isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiCategories.class, net.osmand.binary.OsmandOdb.OsmAndPoiCategories.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndPoiCategories> isVariable = new com.google.protobuf.AbstractParser<OsmAndPoiCategories>() {

            public OsmAndPoiCategories isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndPoiCategories(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndPoiCategories> isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiCategories isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndPoiCategoriesOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiCategories.class, net.osmand.binary.OsmandOdb.OsmAndPoiCategories.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiCategories isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiCategories isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiCategories isVariable = new net.osmand.binary.OsmandOdb.OsmAndPoiCategories(this);
                int isVariable = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndPoiCategories) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndPoiCategories) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiCategories isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndPoiCategories isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndPoiCategories) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new OsmAndPoiCategories(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtomOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtomOrBuilder isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndPoiBoxDataOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndPoiBoxData isVariable;

        public static OsmAndPoiBoxData isMethod() {
            return isNameExpr;
        }

        public OsmAndPoiBoxData isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBoxData.class, net.osmand.binary.OsmandOdb.OsmAndPoiBoxData.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndPoiBoxData> isVariable = new com.google.protobuf.AbstractParser<OsmAndPoiBoxData>() {

            public OsmAndPoiBoxData isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndPoiBoxData(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndPoiBoxData> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtomOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtomOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBoxData.class, net.osmand.binary.OsmandOdb.OsmAndPoiBoxData.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isVariable = new net.osmand.binary.OsmandOdb.OsmAndPoiBoxData(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndPoiBoxData) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndPoiBoxData) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndPoiBoxData isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndPoiBoxData) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtomOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtomOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtomOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtomOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom.Builder, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtomOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new OsmAndPoiBoxData(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        long isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Integer> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        int isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.String> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod(int isParameter);

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndPoiBoxDataAtomOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndPoiBoxDataAtom isVariable;

        public static OsmAndPoiBoxDataAtom isMethod() {
            return isNameExpr;
        }

        public OsmAndPoiBoxDataAtom isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Integer>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new com.google.protobuf.LazyStringArrayList();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom.class, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndPoiBoxDataAtom> isVariable = new com.google.protobuf.AbstractParser<OsmAndPoiBoxDataAtom>() {

            public OsmAndPoiBoxDataAtom isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndPoiBoxDataAtom(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndPoiBoxDataAtom> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private long isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public long isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Integer> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Integer> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public int isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.LazyStringList isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.String> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public java.lang.String isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = "isStringConstant";
            isNameExpr = "isStringConstant";
            isNameExpr = isStringConstant;
            isNameExpr = "isStringConstant";
            isNameExpr = "isStringConstant";
            isNameExpr = "isStringConstant";
            isNameExpr = "isStringConstant";
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtomOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom.class, net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isVariable = new net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.UnmodifiableLazyStringList(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndPoiBoxDataAtom) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private long isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public long isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(long isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isStringConstant;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<java.lang.Integer> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Integer>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Integer> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public int isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Integer> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.LazyStringList isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new com.google.protobuf.LazyStringArrayList(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.String> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public java.lang.String isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<java.lang.String> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new OsmAndPoiBoxDataAtom(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        java.util.List<java.lang.Long> isMethod();

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        long isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements IdTableOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final IdTable isVariable;

        public static IdTable isMethod() {
            return isNameExpr;
        }

        public IdTable isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Long>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod());
                                break;
                            }
                        case isIntegerConstant:
                            {
                                int isVariable = isNameExpr.isMethod();
                                int isVariable = isNameExpr.isMethod(isNameExpr);
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr = new java.util.ArrayList<java.lang.Long>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                while (isNameExpr.isMethod() > isIntegerConstant) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod(isNameExpr);
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.IdTable.class, net.osmand.binary.OsmandOdb.IdTable.Builder.class);
        }

        public static com.google.protobuf.Parser<IdTable> isVariable = new com.google.protobuf.AbstractParser<IdTable>() {

            public IdTable isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new IdTable(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<IdTable> isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<java.lang.Long> isVariable;

        /**
         * isComment
         */
        public java.util.List<java.lang.Long> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public long isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            {
                int isVariable = isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isNameExpr;
                isNameExpr += isIntegerConstant * isMethod().isMethod();
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.IdTable isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IdTable isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IdTable isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IdTable isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IdTable isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IdTable isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IdTable isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IdTable isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IdTable isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.IdTable isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.IdTable isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.IdTableOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.IdTable.class, net.osmand.binary.OsmandOdb.IdTable.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.IdTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.IdTable isMethod() {
                net.osmand.binary.OsmandOdb.IdTable isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.IdTable isMethod() {
                net.osmand.binary.OsmandOdb.IdTable isVariable = new net.osmand.binary.OsmandOdb.IdTable(this);
                int isVariable = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.IdTable) {
                    return isMethod((net.osmand.binary.OsmandOdb.IdTable) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.IdTable isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    }
                    isMethod();
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.IdTable isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.IdTable) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.util.List<java.lang.Long> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<java.lang.Long>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            /**
             * isComment
             */
            public java.util.List<java.lang.Long> isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public long isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, long isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(long isParameter) {
                isMethod();
                isNameExpr.isMethod(isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends java.lang.Long> isParameter) {
                isMethod();
                super.isMethod(isNameExpr, isNameExpr);
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new IdTable(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements RestrictionDataOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final RestrictionData isVariable;

        public static RestrictionData isMethod() {
            return isNameExpr;
        }

        public RestrictionData isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.RestrictionData.class, net.osmand.binary.OsmandOdb.RestrictionData.Builder.class);
        }

        public static com.google.protobuf.Parser<RestrictionData> isVariable = new com.google.protobuf.AbstractParser<RestrictionData>() {

            public RestrictionData isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new RestrictionData(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<RestrictionData> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        private void isMethod() {
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
            isNameExpr = isIntegerConstant;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.RestrictionData isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RestrictionData isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RestrictionData isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RestrictionData isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RestrictionData isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RestrictionData isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RestrictionData isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RestrictionData isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RestrictionData isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RestrictionData isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.RestrictionData isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.RestrictionDataOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.RestrictionData.class, net.osmand.binary.OsmandOdb.RestrictionData.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.RestrictionData isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.RestrictionData isMethod() {
                net.osmand.binary.OsmandOdb.RestrictionData isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.RestrictionData isMethod() {
                net.osmand.binary.OsmandOdb.RestrictionData isVariable = new net.osmand.binary.OsmandOdb.RestrictionData(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.RestrictionData) {
                    return isMethod((net.osmand.binary.OsmandOdb.RestrictionData) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.RestrictionData isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.RestrictionData isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.RestrictionData) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new RestrictionData(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        int isMethod();

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements RouteDataOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final RouteData isVariable;

        public static RouteData isMethod() {
            return isNameExpr;
        }

        public RouteData isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.RouteData.class, net.osmand.binary.OsmandOdb.RouteData.Builder.class);
        }

        public static com.google.protobuf.Parser<RouteData> isVariable = new com.google.protobuf.AbstractParser<RouteData>() {

            public RouteData isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new RouteData(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<RouteData> isMethod() {
            return isNameExpr;
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private int isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr;
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private com.google.protobuf.ByteString isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            return isNameExpr;
        }

        private void isMethod() {
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            isNameExpr = isIntegerConstant;
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.RouteData isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RouteData isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RouteData isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RouteData isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RouteData isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RouteData isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RouteData isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RouteData isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RouteData isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.RouteData isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.RouteData isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.RouteDataOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.RouteData.class, net.osmand.binary.OsmandOdb.RouteData.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.RouteData isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.RouteData isMethod() {
                net.osmand.binary.OsmandOdb.RouteData isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.RouteData isMethod() {
                net.osmand.binary.OsmandOdb.RouteData isVariable = new net.osmand.binary.OsmandOdb.RouteData(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.RouteData) {
                    return isMethod((net.osmand.binary.OsmandOdb.RouteData) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.RouteData isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isMethod(isNameExpr.isMethod());
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                if (!isMethod()) {
                    return true;
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.RouteData isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.RouteData) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            // isComment
            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isIntegerConstant;
                isMethod();
                return this;
            }

            // isComment
            private com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }
        }

        static {
            isNameExpr = new RouteData(true);
            isNameExpr.isMethod();
        }
    }

    public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

        // isComment
        /**
         * isComment
         */
        boolean isMethod();

        /**
         * isComment
         */
        java.lang.String isMethod();

        /**
         * isComment
         */
        com.google.protobuf.ByteString isMethod();

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRuleOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRuleOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder isMethod(int isParameter);

        // isComment
        /**
         * isComment
         */
        java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod(int isParameter);

        /**
         * isComment
         */
        int isMethod();

        /**
         * isComment
         */
        java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlockOrBuilder> isMethod();

        /**
         * isComment
         */
        net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlockOrBuilder isMethod(int isParameter);
    }

    /**
     * isComment
     */
    public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements OsmAndRoutingIndexOrBuilder {

        // isComment
        private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
            super(isNameExpr);
            this.isFieldAccessExpr = isNameExpr.isMethod();
        }

        private isConstructor(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private static final OsmAndRoutingIndex isVariable;

        public static OsmAndRoutingIndex isMethod() {
            return isNameExpr;
        }

        public OsmAndRoutingIndex isMethod() {
            return isNameExpr;
        }

        private final com.google.protobuf.UnknownFieldSet isVariable;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet isMethod() {
            return this.isFieldAccessExpr;
        }

        private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            isMethod();
            int isVariable = isIntegerConstant;
            com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            try {
                boolean isVariable = true;
                while (!isNameExpr) {
                    int isVariable = isNameExpr.isMethod();
                    switch(isNameExpr) {
                        case isIntegerConstant:
                            isNameExpr = true;
                            break;
                        default:
                            {
                                if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                    isNameExpr = true;
                                }
                                break;
                            }
                        case isIntegerConstant:
                            {
                                isNameExpr |= isIntegerConstant;
                                isNameExpr = isNameExpr.isMethod();
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                        case isIntegerConstant:
                            {
                                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock>();
                                    isNameExpr |= isIntegerConstant;
                                }
                                isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                break;
                            }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                throw isNameExpr.isMethod(this);
            } catch (java.io.IOException isParameter) {
                throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
            } finally {
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr.isMethod();
                isMethod();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
            return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.class, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.Builder.class);
        }

        public static com.google.protobuf.Parser<OsmAndRoutingIndex> isVariable = new com.google.protobuf.AbstractParser<OsmAndRoutingIndex>() {

            public OsmAndRoutingIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return new OsmAndRoutingIndex(isNameExpr, isNameExpr);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<OsmAndRoutingIndex> isMethod() {
            return isNameExpr;
        }

        public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            java.lang.String isMethod();

            /**
             * isComment
             */
            com.google.protobuf.ByteString isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            java.lang.String isMethod();

            /**
             * isComment
             */
            com.google.protobuf.ByteString isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements RouteEncodingRuleOrBuilder {

            // isComment
            private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
                super(isNameExpr);
                this.isFieldAccessExpr = isNameExpr.isMethod();
            }

            private isConstructor(boolean isParameter) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private static final RouteEncodingRule isVariable;

            public static RouteEncodingRule isMethod() {
                return isNameExpr;
            }

            public RouteEncodingRule isMethod() {
                return isNameExpr;
            }

            private final com.google.protobuf.UnknownFieldSet isVariable;

            @java.lang.Override
            public final com.google.protobuf.UnknownFieldSet isMethod() {
                return this.isFieldAccessExpr;
            }

            private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                isMethod();
                int isVariable = isIntegerConstant;
                com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                try {
                    boolean isVariable = true;
                    while (!isNameExpr) {
                        int isVariable = isNameExpr.isMethod();
                        switch(isNameExpr) {
                            case isIntegerConstant:
                                isNameExpr = true;
                                break;
                            default:
                                {
                                    if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                        isNameExpr = true;
                                    }
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    throw isNameExpr.isMethod(this);
                } catch (java.io.IOException isParameter) {
                    throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
                } finally {
                    this.isFieldAccessExpr = isNameExpr.isMethod();
                    isMethod();
                }
            }

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule.class, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule.Builder.class);
            }

            public static com.google.protobuf.Parser<RouteEncodingRule> isVariable = new com.google.protobuf.AbstractParser<RouteEncodingRule>() {

                public RouteEncodingRule isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                    return new RouteEncodingRule(isNameExpr, isNameExpr);
                }
            };

            @java.lang.Override
            public com.google.protobuf.Parser<RouteEncodingRule> isMethod() {
                return isNameExpr;
            }

            private int isVariable;

            // isComment
            public static final int isVariable = isIntegerConstant;

            private java.lang.Object isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof java.lang.String) {
                    return (java.lang.String) isNameExpr;
                } else {
                    com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                    java.lang.String isVariable = isNameExpr.isMethod();
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr;
                    }
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof java.lang.String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private java.lang.Object isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof java.lang.String) {
                    return (java.lang.String) isNameExpr;
                } else {
                    com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                    java.lang.String isVariable = isNameExpr.isMethod();
                    if (isNameExpr.isMethod()) {
                        isNameExpr = isNameExpr;
                    }
                    return isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof java.lang.String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            private void isMethod() {
                isNameExpr = "isStringConstant";
                isNameExpr = "isStringConstant";
                isNameExpr = isIntegerConstant;
            }

            private byte isVariable = -isIntegerConstant;

            public final boolean isMethod() {
                byte isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr == isIntegerConstant;
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                isNameExpr = isIntegerConstant;
                return true;
            }

            public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
                isMethod();
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isMethod());
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isMethod());
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                isMethod().isMethod(isNameExpr);
            }

            private int isVariable = -isIntegerConstant;

            public int isMethod() {
                int isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr;
                isNameExpr = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                isNameExpr += isMethod().isMethod();
                isNameExpr = isNameExpr;
                return isNameExpr;
            }

            private static final long isVariable = isStringConstant;

            @java.lang.Override
            protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
                return super.isMethod();
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static Builder isMethod() {
                return isNameExpr.isMethod();
            }

            public Builder isMethod() {
                return isMethod();
            }

            public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            public Builder isMethod() {
                return isMethod(this);
            }

            @java.lang.Override
            protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                Builder isVariable = new Builder(isNameExpr);
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRuleOrBuilder {

                public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule.class, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule.Builder.class);
                }

                // isComment
                private isConstructor() {
                    isMethod();
                }

                private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                    super(isNameExpr);
                    isMethod();
                }

                private void isMethod() {
                    if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    }
                }

                private static Builder isMethod() {
                    return new Builder();
                }

                public Builder isMethod() {
                    super.isMethod();
                    isNameExpr = "isStringConstant";
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = "isStringConstant";
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    return this;
                }

                public Builder isMethod() {
                    return isMethod().isMethod(isMethod());
                }

                public com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                }

                public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isVariable = isMethod();
                    if (!isNameExpr.isMethod()) {
                        throw isMethod(isNameExpr);
                    }
                    return isNameExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isVariable = new net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule(this);
                    int isVariable = isNameExpr;
                    int isVariable = isIntegerConstant;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    isMethod();
                    return isNameExpr;
                }

                public Builder isMethod(com.google.protobuf.Message isParameter) {
                    if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule) {
                        return isMethod((net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule) isNameExpr);
                    } else {
                        super.isMethod(isNameExpr);
                        return this;
                    }
                }

                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isParameter) {
                    if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                        return this;
                    if (isNameExpr.isMethod()) {
                        isNameExpr |= isIntegerConstant;
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isMethod();
                    }
                    if (isNameExpr.isMethod()) {
                        isNameExpr |= isIntegerConstant;
                        isNameExpr = isNameExpr.isFieldAccessExpr;
                        isMethod();
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    this.isMethod(isNameExpr.isMethod());
                    return this;
                }

                public final boolean isMethod() {
                    if (!isMethod()) {
                        return true;
                    }
                    if (!isMethod()) {
                        return true;
                    }
                    return true;
                }

                public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                    net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isVariable = null;
                    try {
                        isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                    } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                        isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule) isNameExpr.isMethod();
                        throw isNameExpr;
                    } finally {
                        if (isNameExpr != null) {
                            isMethod(isNameExpr);
                        }
                    }
                    return this;
                }

                private int isVariable;

                // isComment
                private java.lang.Object isVariable = "isStringConstant";

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public java.lang.String isMethod() {
                    java.lang.Object isVariable = isNameExpr;
                    if (!(isNameExpr instanceof java.lang.String)) {
                        java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                        isNameExpr = isNameExpr;
                        return isNameExpr;
                    } else {
                        return (java.lang.String) isNameExpr;
                    }
                }

                /**
                 * isComment
                 */
                public com.google.protobuf.ByteString isMethod() {
                    java.lang.Object isVariable = isNameExpr;
                    if (isNameExpr instanceof String) {
                        com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                        isNameExpr = isNameExpr;
                        return isNameExpr;
                    } else {
                        return (com.google.protobuf.ByteString) isNameExpr;
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(java.lang.String isParameter) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isMethod().isMethod();
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                // isComment
                private java.lang.Object isVariable = "isStringConstant";

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public java.lang.String isMethod() {
                    java.lang.Object isVariable = isNameExpr;
                    if (!(isNameExpr instanceof java.lang.String)) {
                        java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                        isNameExpr = isNameExpr;
                        return isNameExpr;
                    } else {
                        return (java.lang.String) isNameExpr;
                    }
                }

                /**
                 * isComment
                 */
                public com.google.protobuf.ByteString isMethod() {
                    java.lang.Object isVariable = isNameExpr;
                    if (isNameExpr instanceof String) {
                        com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                        isNameExpr = isNameExpr;
                        return isNameExpr;
                    } else {
                        return (com.google.protobuf.ByteString) isNameExpr;
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(java.lang.String isParameter) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isMethod().isMethod();
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }
            }

            static {
                isNameExpr = new RouteEncodingRule(true);
                isNameExpr.isMethod();
            }
        }

        public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            int isMethod();

            // isComment
            /**
             * isComment
             */
            java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(int isParameter);

            /**
             * isComment
             */
            int isMethod();

            /**
             * isComment
             */
            java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder isMethod(int isParameter);
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements RouteDataBoxOrBuilder {

            // isComment
            private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
                super(isNameExpr);
                this.isFieldAccessExpr = isNameExpr.isMethod();
            }

            private isConstructor(boolean isParameter) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private static final RouteDataBox isVariable;

            public static RouteDataBox isMethod() {
                return isNameExpr;
            }

            public RouteDataBox isMethod() {
                return isNameExpr;
            }

            private final com.google.protobuf.UnknownFieldSet isVariable;

            @java.lang.Override
            public final com.google.protobuf.UnknownFieldSet isMethod() {
                return this.isFieldAccessExpr;
            }

            private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                isMethod();
                int isVariable = isIntegerConstant;
                com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                try {
                    boolean isVariable = true;
                    while (!isNameExpr) {
                        int isVariable = isNameExpr.isMethod();
                        switch(isNameExpr) {
                            case isIntegerConstant:
                                isNameExpr = true;
                                break;
                            default:
                                {
                                    if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                        isNameExpr = true;
                                    }
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    isNameExpr |= isIntegerConstant;
                                    isNameExpr = isNameExpr.isMethod();
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox>();
                                        isNameExpr |= isIntegerConstant;
                                    }
                                    isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                    break;
                                }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    throw isNameExpr.isMethod(this);
                } catch (java.io.IOException isParameter) {
                    throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
                } finally {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                    this.isFieldAccessExpr = isNameExpr.isMethod();
                    isMethod();
                }
            }

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.class, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder.class);
            }

            public static com.google.protobuf.Parser<RouteDataBox> isVariable = new com.google.protobuf.AbstractParser<RouteDataBox>() {

                public RouteDataBox isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                    return new RouteDataBox(isNameExpr, isNameExpr);
                }
            };

            @java.lang.Override
            public com.google.protobuf.Parser<RouteDataBox> isMethod() {
                return isNameExpr;
            }

            private int isVariable;

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private int isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private void isMethod() {
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
                isNameExpr = isIntegerConstant;
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private byte isVariable = -isIntegerConstant;

            public final boolean isMethod() {
                byte isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr == isIntegerConstant;
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                if (!isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        isNameExpr = isIntegerConstant;
                        return true;
                    }
                }
                isNameExpr = isIntegerConstant;
                return true;
            }

            public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
                isMethod();
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                isMethod().isMethod(isNameExpr);
            }

            private int isVariable = -isIntegerConstant;

            public int isMethod() {
                int isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr;
                isNameExpr = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                isNameExpr += isMethod().isMethod();
                isNameExpr = isNameExpr;
                return isNameExpr;
            }

            private static final long isVariable = isStringConstant;

            @java.lang.Override
            protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
                return super.isMethod();
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static Builder isMethod() {
                return isNameExpr.isMethod();
            }

            public Builder isMethod() {
                return isMethod();
            }

            public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            public Builder isMethod() {
                return isMethod(this);
            }

            @java.lang.Override
            protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                Builder isVariable = new Builder(isNameExpr);
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder {

                public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.class, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder.class);
                }

                // isComment
                private isConstructor() {
                    isMethod();
                }

                private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                    super(isNameExpr);
                    isMethod();
                }

                private void isMethod() {
                    if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        isMethod();
                    }
                }

                private static Builder isMethod() {
                    return new Builder();
                }

                public Builder isMethod() {
                    super.isMethod();
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                public Builder isMethod() {
                    return isMethod().isMethod(isMethod());
                }

                public com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                }

                public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isVariable = isMethod();
                    if (!isNameExpr.isMethod()) {
                        throw isMethod(isNameExpr);
                    }
                    return isNameExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isVariable = new net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox(this);
                    int isVariable = isNameExpr;
                    int isVariable = isIntegerConstant;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    if (isNameExpr == null) {
                        if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        }
                        isNameExpr.isFieldAccessExpr = isNameExpr;
                    } else {
                        isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    isMethod();
                    return isNameExpr;
                }

                public Builder isMethod(com.google.protobuf.Message isParameter) {
                    if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox) {
                        return isMethod((net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox) isNameExpr);
                    } else {
                        super.isMethod(isNameExpr);
                        return this;
                    }
                }

                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isParameter) {
                    if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                        return this;
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr == null) {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                            } else {
                                isMethod();
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                            isMethod();
                        }
                    } else {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr.isMethod();
                                isNameExpr = null;
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                            } else {
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                        }
                    }
                    this.isMethod(isNameExpr.isMethod());
                    return this;
                }

                public final boolean isMethod() {
                    if (!isMethod()) {
                        return true;
                    }
                    if (!isMethod()) {
                        return true;
                    }
                    if (!isMethod()) {
                        return true;
                    }
                    if (!isMethod()) {
                        return true;
                    }
                    for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                        if (!isMethod(isNameExpr).isMethod()) {
                            return true;
                        }
                    }
                    return true;
                }

                public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                    net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isVariable = null;
                    try {
                        isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                    } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                        isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox) isNameExpr.isMethod();
                        throw isNameExpr;
                    } finally {
                        if (isNameExpr != null) {
                            isMethod(isNameExpr);
                        }
                    }
                    return this;
                }

                private int isVariable;

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private int isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    return isNameExpr;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr;
                    isMethod();
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isNameExpr = isIntegerConstant;
                    isMethod();
                    return this;
                }

                // isComment
                private java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

                private void isMethod() {
                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox>(isNameExpr);
                        isNameExpr |= isIntegerConstant;
                    }
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isVariable;

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        super.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                        isMethod();
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr);
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isMethod() {
                    if (isNameExpr != null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isMethod() {
                    return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder> isMethod() {
                    return isMethod().isMethod();
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                        isNameExpr = null;
                    }
                    return isNameExpr;
                }
            }

            static {
                isNameExpr = new RouteDataBox(true);
                isNameExpr.isMethod();
            }
        }

        public interface isClassOrIsInterface extends com.google.protobuf.MessageOrBuilder {

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.IdTable isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.IdTableOrBuilder isMethod();

            // isComment
            /**
             * isComment
             */
            java.util.List<net.osmand.binary.OsmandOdb.RouteData> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.RouteData isMethod(int isParameter);

            /**
             * isComment
             */
            int isMethod();

            /**
             * isComment
             */
            java.util.List<? extends net.osmand.binary.OsmandOdb.RouteDataOrBuilder> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.RouteDataOrBuilder isMethod(int isParameter);

            // isComment
            /**
             * isComment
             */
            java.util.List<net.osmand.binary.OsmandOdb.RestrictionData> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.RestrictionData isMethod(int isParameter);

            /**
             * isComment
             */
            int isMethod();

            /**
             * isComment
             */
            java.util.List<? extends net.osmand.binary.OsmandOdb.RestrictionDataOrBuilder> isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.RestrictionDataOrBuilder isMethod(int isParameter);

            // isComment
            /**
             * isComment
             */
            boolean isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.StringTable isMethod();

            /**
             * isComment
             */
            net.osmand.binary.OsmandOdb.StringTableOrBuilder isMethod();
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage implements RouteDataBlockOrBuilder {

            // isComment
            private isConstructor(com.google.protobuf.GeneratedMessage.Builder<?> isParameter) {
                super(isNameExpr);
                this.isFieldAccessExpr = isNameExpr.isMethod();
            }

            private isConstructor(boolean isParameter) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private static final RouteDataBlock isVariable;

            public static RouteDataBlock isMethod() {
                return isNameExpr;
            }

            public RouteDataBlock isMethod() {
                return isNameExpr;
            }

            private final com.google.protobuf.UnknownFieldSet isVariable;

            @java.lang.Override
            public final com.google.protobuf.UnknownFieldSet isMethod() {
                return this.isFieldAccessExpr;
            }

            private isConstructor(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                isMethod();
                int isVariable = isIntegerConstant;
                com.google.protobuf.UnknownFieldSet.Builder isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                try {
                    boolean isVariable = true;
                    while (!isNameExpr) {
                        int isVariable = isNameExpr.isMethod();
                        switch(isNameExpr) {
                            case isIntegerConstant:
                                isNameExpr = true;
                                break;
                            default:
                                {
                                    if (!isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr)) {
                                        isNameExpr = true;
                                    }
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    net.osmand.binary.OsmandOdb.IdTable.Builder isVariable = null;
                                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                        isNameExpr = isNameExpr.isMethod();
                                    }
                                    isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                    if (isNameExpr != null) {
                                        isNameExpr.isMethod(isNameExpr);
                                        isNameExpr = isNameExpr.isMethod();
                                    }
                                    isNameExpr |= isIntegerConstant;
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.RouteData>();
                                        isNameExpr |= isIntegerConstant;
                                    }
                                    isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.RestrictionData>();
                                        isNameExpr |= isIntegerConstant;
                                    }
                                    isNameExpr.isMethod(isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr));
                                    break;
                                }
                            case isIntegerConstant:
                                {
                                    net.osmand.binary.OsmandOdb.StringTable.Builder isVariable = null;
                                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                                        isNameExpr = isNameExpr.isMethod();
                                    }
                                    isNameExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr);
                                    if (isNameExpr != null) {
                                        isNameExpr.isMethod(isNameExpr);
                                        isNameExpr = isNameExpr.isMethod();
                                    }
                                    isNameExpr |= isIntegerConstant;
                                    break;
                                }
                        }
                    }
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    throw isNameExpr.isMethod(this);
                } catch (java.io.IOException isParameter) {
                    throw new com.google.protobuf.InvalidProtocolBufferException(isNameExpr.isMethod()).isMethod(this);
                } finally {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                    this.isFieldAccessExpr = isNameExpr.isMethod();
                    isMethod();
                }
            }

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock.class, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock.Builder.class);
            }

            public static com.google.protobuf.Parser<RouteDataBlock> isVariable = new com.google.protobuf.AbstractParser<RouteDataBlock>() {

                public RouteDataBlock isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                    return new RouteDataBlock(isNameExpr, isNameExpr);
                }
            };

            @java.lang.Override
            public com.google.protobuf.Parser<RouteDataBlock> isMethod() {
                return isNameExpr;
            }

            private int isVariable;

            // isComment
            public static final int isVariable = isIntegerConstant;

            private net.osmand.binary.OsmandOdb.IdTable isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.IdTable isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.IdTableOrBuilder isMethod() {
                return isNameExpr;
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private java.util.List<net.osmand.binary.OsmandOdb.RouteData> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.RouteData> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.RouteDataOrBuilder> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.RouteData isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.RouteDataOrBuilder isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private java.util.List<net.osmand.binary.OsmandOdb.RestrictionData> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.RestrictionData> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.RestrictionDataOrBuilder> isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public int isMethod() {
                return isNameExpr.isMethod();
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.RestrictionData isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.RestrictionDataOrBuilder isMethod(int isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            // isComment
            public static final int isVariable = isIntegerConstant;

            private net.osmand.binary.OsmandOdb.StringTable isVariable;

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StringTable isMethod() {
                return isNameExpr;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.StringTableOrBuilder isMethod() {
                return isNameExpr;
            }

            private void isMethod() {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            private byte isVariable = -isIntegerConstant;

            public final boolean isMethod() {
                byte isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr == isIntegerConstant;
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        isNameExpr = isIntegerConstant;
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        isNameExpr = isIntegerConstant;
                        return true;
                    }
                }
                isNameExpr = isIntegerConstant;
                return true;
            }

            public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
                isMethod();
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                isMethod().isMethod(isNameExpr);
            }

            private int isVariable = -isIntegerConstant;

            public int isMethod() {
                int isVariable = isNameExpr;
                if (isNameExpr != -isIntegerConstant)
                    return isNameExpr;
                isNameExpr = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
                }
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr);
                }
                isNameExpr += isMethod().isMethod();
                isNameExpr = isNameExpr;
                return isNameExpr;
            }

            private static final long isVariable = isStringConstant;

            @java.lang.Override
            protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
                return super.isMethod();
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod(java.io.InputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr);
            }

            public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                return isNameExpr.isMethod(isNameExpr, isNameExpr);
            }

            public static Builder isMethod() {
                return isNameExpr.isMethod();
            }

            public Builder isMethod() {
                return isMethod();
            }

            public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            public Builder isMethod() {
                return isMethod(this);
            }

            @java.lang.Override
            protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                Builder isVariable = new Builder(isNameExpr);
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlockOrBuilder {

                public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock.class, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock.Builder.class);
                }

                // isComment
                private isConstructor() {
                    isMethod();
                }

                private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                    super(isNameExpr);
                    isMethod();
                }

                private void isMethod() {
                    if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        isMethod();
                        isMethod();
                        isMethod();
                        isMethod();
                    }
                }

                private static Builder isMethod() {
                    return new Builder();
                }

                public Builder isMethod() {
                    super.isMethod();
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    } else {
                        isNameExpr.isMethod();
                    }
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isNameExpr.isMethod();
                    }
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    } else {
                        isNameExpr.isMethod();
                    }
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    } else {
                        isNameExpr.isMethod();
                    }
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    return this;
                }

                public Builder isMethod() {
                    return isMethod().isMethod(isMethod());
                }

                public com.google.protobuf.Descriptors.Descriptor isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod() {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                }

                public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isVariable = isMethod();
                    if (!isNameExpr.isMethod()) {
                        throw isMethod(isNameExpr);
                    }
                    return isNameExpr;
                }

                public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod() {
                    net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isVariable = new net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock(this);
                    int isVariable = isNameExpr;
                    int isVariable = isIntegerConstant;
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    if (isNameExpr == null) {
                        isNameExpr.isFieldAccessExpr = isNameExpr;
                    } else {
                        isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    }
                    if (isNameExpr == null) {
                        if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        }
                        isNameExpr.isFieldAccessExpr = isNameExpr;
                    } else {
                        isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    }
                    if (isNameExpr == null) {
                        if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        }
                        isNameExpr.isFieldAccessExpr = isNameExpr;
                    } else {
                        isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    }
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr |= isIntegerConstant;
                    }
                    if (isNameExpr == null) {
                        isNameExpr.isFieldAccessExpr = isNameExpr;
                    } else {
                        isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                    isMethod();
                    return isNameExpr;
                }

                public Builder isMethod(com.google.protobuf.Message isParameter) {
                    if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock) {
                        return isMethod((net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock) isNameExpr);
                    } else {
                        super.isMethod(isNameExpr);
                        return this;
                    }
                }

                public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isParameter) {
                    if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                        return this;
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    if (isNameExpr == null) {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                            } else {
                                isMethod();
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                            isMethod();
                        }
                    } else {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr.isMethod();
                                isNameExpr = null;
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                            } else {
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                        }
                    }
                    if (isNameExpr == null) {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                            } else {
                                isMethod();
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                            isMethod();
                        }
                    } else {
                        if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                            if (isNameExpr.isMethod()) {
                                isNameExpr.isMethod();
                                isNameExpr = null;
                                isNameExpr = isNameExpr.isFieldAccessExpr;
                                isNameExpr = (isNameExpr & ~isIntegerConstant);
                                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                            } else {
                                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                            }
                        }
                    }
                    if (isNameExpr.isMethod()) {
                        isMethod(isNameExpr.isMethod());
                    }
                    this.isMethod(isNameExpr.isMethod());
                    return this;
                }

                public final boolean isMethod() {
                    for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                        if (!isMethod(isNameExpr).isMethod()) {
                            return true;
                        }
                    }
                    for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                        if (!isMethod(isNameExpr).isMethod()) {
                            return true;
                        }
                    }
                    return true;
                }

                public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                    net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isVariable = null;
                    try {
                        isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                    } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                        isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock) isNameExpr.isMethod();
                        throw isNameExpr;
                    } finally {
                        if (isNameExpr != null) {
                            isMethod(isNameExpr);
                        }
                    }
                    return this;
                }

                private int isVariable;

                // isComment
                private net.osmand.binary.OsmandOdb.IdTable isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

                private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.IdTable, net.osmand.binary.OsmandOdb.IdTable.Builder, net.osmand.binary.OsmandOdb.IdTableOrBuilder> isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.IdTable isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr;
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.IdTable isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isNameExpr = isNameExpr;
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    isNameExpr |= isIntegerConstant;
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.IdTable.Builder isParameter) {
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isMethod();
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr.isMethod());
                    }
                    isNameExpr |= isIntegerConstant;
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.IdTable isParameter) {
                    if (isNameExpr == null) {
                        if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                        } else {
                            isNameExpr = isNameExpr;
                        }
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    isNameExpr |= isIntegerConstant;
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isMethod();
                    } else {
                        isNameExpr.isMethod();
                    }
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    return this;
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.IdTable.Builder isMethod() {
                    isNameExpr |= isIntegerConstant;
                    isMethod();
                    return isMethod().isMethod();
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.IdTableOrBuilder isMethod() {
                    if (isNameExpr != null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr;
                    }
                }

                /**
                 * isComment
                 */
                private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.IdTable, net.osmand.binary.OsmandOdb.IdTable.Builder, net.osmand.binary.OsmandOdb.IdTableOrBuilder> isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.IdTable, net.osmand.binary.OsmandOdb.IdTable.Builder, net.osmand.binary.OsmandOdb.IdTableOrBuilder>(isNameExpr, isMethod(), isMethod());
                        isNameExpr = null;
                    }
                    return isNameExpr;
                }

                // isComment
                private java.util.List<net.osmand.binary.OsmandOdb.RouteData> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

                private void isMethod() {
                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.RouteData>(isNameExpr);
                        isNameExpr |= isIntegerConstant;
                    }
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.RouteData, net.osmand.binary.OsmandOdb.RouteData.Builder, net.osmand.binary.OsmandOdb.RouteDataOrBuilder> isVariable;

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.RouteData> isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.RouteData isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.RouteData isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.RouteData.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.RouteData isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.RouteData isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.RouteData.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.RouteData.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.RouteData> isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        super.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                        isMethod();
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.RouteData.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr);
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.RouteDataOrBuilder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public java.util.List<? extends net.osmand.binary.OsmandOdb.RouteDataOrBuilder> isMethod() {
                    if (isNameExpr != null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.RouteData.Builder isMethod() {
                    return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.RouteData.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.RouteData.Builder> isMethod() {
                    return isMethod().isMethod();
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.RouteData, net.osmand.binary.OsmandOdb.RouteData.Builder, net.osmand.binary.OsmandOdb.RouteDataOrBuilder> isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.RouteData, net.osmand.binary.OsmandOdb.RouteData.Builder, net.osmand.binary.OsmandOdb.RouteDataOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                        isNameExpr = null;
                    }
                    return isNameExpr;
                }

                // isComment
                private java.util.List<net.osmand.binary.OsmandOdb.RestrictionData> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

                private void isMethod() {
                    if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.RestrictionData>(isNameExpr);
                        isNameExpr |= isIntegerConstant;
                    }
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.RestrictionData, net.osmand.binary.OsmandOdb.RestrictionData.Builder, net.osmand.binary.OsmandOdb.RestrictionDataOrBuilder> isVariable;

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.RestrictionData> isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public int isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.RestrictionData isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.RestrictionData isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.RestrictionData.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.RestrictionData isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.RestrictionData isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.RestrictionData.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.RestrictionData.Builder isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.RestrictionData> isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        super.isMethod(isNameExpr, isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                        isMethod();
                    } else {
                        isNameExpr.isMethod();
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        isMethod();
                        isNameExpr.isMethod(isNameExpr);
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    return this;
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.RestrictionData.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr);
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.RestrictionDataOrBuilder isMethod(int isParameter) {
                    if (isNameExpr == null) {
                        return isNameExpr.isMethod(isNameExpr);
                    } else {
                        return isNameExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public java.util.List<? extends net.osmand.binary.OsmandOdb.RestrictionDataOrBuilder> isMethod() {
                    if (isNameExpr != null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    }
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.RestrictionData.Builder isMethod() {
                    return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.RestrictionData.Builder isMethod(int isParameter) {
                    return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
                }

                /**
                 * isComment
                 */
                public java.util.List<net.osmand.binary.OsmandOdb.RestrictionData.Builder> isMethod() {
                    return isMethod().isMethod();
                }

                private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.RestrictionData, net.osmand.binary.OsmandOdb.RestrictionData.Builder, net.osmand.binary.OsmandOdb.RestrictionDataOrBuilder> isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.RestrictionData, net.osmand.binary.OsmandOdb.RestrictionData.Builder, net.osmand.binary.OsmandOdb.RestrictionDataOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                        isNameExpr = null;
                    }
                    return isNameExpr;
                }

                // isComment
                private net.osmand.binary.OsmandOdb.StringTable isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

                private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.StringTable, net.osmand.binary.OsmandOdb.StringTable.Builder, net.osmand.binary.OsmandOdb.StringTableOrBuilder> isVariable;

                /**
                 * isComment
                 */
                public boolean isMethod() {
                    return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.StringTable isMethod() {
                    if (isNameExpr == null) {
                        return isNameExpr;
                    } else {
                        return isNameExpr.isMethod();
                    }
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.StringTable isParameter) {
                    if (isNameExpr == null) {
                        if (isNameExpr == null) {
                            throw new NullPointerException();
                        }
                        isNameExpr = isNameExpr;
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    isNameExpr |= isIntegerConstant;
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.StringTable.Builder isParameter) {
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isMethod();
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr.isMethod());
                    }
                    isNameExpr |= isIntegerConstant;
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod(net.osmand.binary.OsmandOdb.StringTable isParameter) {
                    if (isNameExpr == null) {
                        if (((isNameExpr & isIntegerConstant) == isIntegerConstant) && isNameExpr != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr).isMethod(isNameExpr).isMethod();
                        } else {
                            isNameExpr = isNameExpr;
                        }
                        isMethod();
                    } else {
                        isNameExpr.isMethod(isNameExpr);
                    }
                    isNameExpr |= isIntegerConstant;
                    return this;
                }

                /**
                 * isComment
                 */
                public Builder isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                        isMethod();
                    } else {
                        isNameExpr.isMethod();
                    }
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    return this;
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.StringTable.Builder isMethod() {
                    isNameExpr |= isIntegerConstant;
                    isMethod();
                    return isMethod().isMethod();
                }

                /**
                 * isComment
                 */
                public net.osmand.binary.OsmandOdb.StringTableOrBuilder isMethod() {
                    if (isNameExpr != null) {
                        return isNameExpr.isMethod();
                    } else {
                        return isNameExpr;
                    }
                }

                /**
                 * isComment
                 */
                private com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.StringTable, net.osmand.binary.OsmandOdb.StringTable.Builder, net.osmand.binary.OsmandOdb.StringTableOrBuilder> isMethod() {
                    if (isNameExpr == null) {
                        isNameExpr = new com.google.protobuf.SingleFieldBuilder<net.osmand.binary.OsmandOdb.StringTable, net.osmand.binary.OsmandOdb.StringTable.Builder, net.osmand.binary.OsmandOdb.StringTableOrBuilder>(isNameExpr, isMethod(), isMethod());
                        isNameExpr = null;
                    }
                    return isNameExpr;
                }
            }

            static {
                isNameExpr = new RouteDataBlock(true);
                isNameExpr.isMethod();
            }
        }

        private int isVariable;

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.lang.Object isVariable;

        /**
         * isComment
         */
        public boolean isMethod() {
            return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
        }

        /**
         * isComment
         */
        public java.lang.String isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                return (java.lang.String) isNameExpr;
            } else {
                com.google.protobuf.ByteString isVariable = (com.google.protobuf.ByteString) isNameExpr;
                java.lang.String isVariable = isNameExpr.isMethod();
                if (isNameExpr.isMethod()) {
                    isNameExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        /**
         * isComment
         */
        public com.google.protobuf.ByteString isMethod() {
            java.lang.Object isVariable = isNameExpr;
            if (isNameExpr instanceof java.lang.String) {
                com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                isNameExpr = isNameExpr;
                return isNameExpr;
            } else {
                return (com.google.protobuf.ByteString) isNameExpr;
            }
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRuleOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRuleOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        // isComment
        public static final int isVariable = isIntegerConstant;

        private java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock> isVariable;

        /**
         * isComment
         */
        public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlockOrBuilder> isMethod() {
            return isNameExpr;
        }

        /**
         * isComment
         */
        public int isMethod() {
            return isNameExpr.isMethod();
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlockOrBuilder isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        private void isMethod() {
            isNameExpr = "isStringConstant";
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
        }

        private byte isVariable = -isIntegerConstant;

        public final boolean isMethod() {
            byte isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr == isIntegerConstant;
            if (!isMethod()) {
                isNameExpr = isIntegerConstant;
                return true;
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                if (!isMethod(isNameExpr).isMethod()) {
                    isNameExpr = isIntegerConstant;
                    return true;
                }
            }
            isNameExpr = isIntegerConstant;
            return true;
        }

        public void isMethod(com.google.protobuf.CodedOutputStream isParameter) throws java.io.IOException {
            isMethod();
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr.isMethod(isIntegerConstant, isMethod());
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isMethod().isMethod(isNameExpr);
        }

        private int isVariable = -isIntegerConstant;

        public int isMethod() {
            int isVariable = isNameExpr;
            if (isNameExpr != -isIntegerConstant)
                return isNameExpr;
            isNameExpr = isIntegerConstant;
            if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isMethod());
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isMethod(); isNameExpr++) {
                isNameExpr += isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isIntegerConstant, isNameExpr.isMethod(isNameExpr));
            }
            isNameExpr += isMethod().isMethod();
            isNameExpr = isNameExpr;
            return isNameExpr;
        }

        private static final long isVariable = isStringConstant;

        @java.lang.Override
        protected java.lang.Object isMethod() throws java.io.ObjectStreamException {
            return super.isMethod();
        }

        public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod(com.google.protobuf.ByteString isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod(com.google.protobuf.ByteString isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod(byte[] isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod(byte[] isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws com.google.protobuf.InvalidProtocolBufferException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod(java.io.InputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod(java.io.InputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod(com.google.protobuf.CodedInputStream isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr);
        }

        public static net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
            return isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public static Builder isMethod() {
            return isNameExpr.isMethod();
        }

        public Builder isMethod() {
            return isMethod();
        }

        public static Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isParameter) {
            return isMethod().isMethod(isNameExpr);
        }

        public Builder isMethod() {
            return isMethod(this);
        }

        @java.lang.Override
        protected Builder isMethod(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
            Builder isVariable = new Builder(isNameExpr);
            return isNameExpr;
        }

        /**
         * isComment
         */
        public static final class isClassOrIsInterface extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements net.osmand.binary.OsmandOdb.OsmAndRoutingIndexOrBuilder {

            public static final com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.class, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.Builder.class);
            }

            // isComment
            private isConstructor() {
                isMethod();
            }

            private isConstructor(com.google.protobuf.GeneratedMessage.BuilderParent isParameter) {
                super(isNameExpr);
                isMethod();
            }

            private void isMethod() {
                if (isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    isMethod();
                    isMethod();
                    isMethod();
                    isMethod();
                }
            }

            private static Builder isMethod() {
                return new Builder();
            }

            public Builder isMethod() {
                super.isMethod();
                isNameExpr = "isStringConstant";
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            public Builder isMethod() {
                return isMethod().isMethod(isMethod());
            }

            public com.google.protobuf.Descriptors.Descriptor isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod() {
                return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
            }

            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isVariable = isMethod();
                if (!isNameExpr.isMethod()) {
                    throw isMethod(isNameExpr);
                }
                return isNameExpr;
            }

            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isMethod() {
                net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isVariable = new net.osmand.binary.OsmandOdb.OsmAndRoutingIndex(this);
                int isVariable = isNameExpr;
                int isVariable = isIntegerConstant;
                if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr |= isIntegerConstant;
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                if (isNameExpr == null) {
                    if (((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                        isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        isNameExpr = (isNameExpr & ~isIntegerConstant);
                    }
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } else {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                }
                isNameExpr.isFieldAccessExpr = isNameExpr;
                isMethod();
                return isNameExpr;
            }

            public Builder isMethod(com.google.protobuf.Message isParameter) {
                if (isNameExpr instanceof net.osmand.binary.OsmandOdb.OsmAndRoutingIndex) {
                    return isMethod((net.osmand.binary.OsmandOdb.OsmAndRoutingIndex) isNameExpr);
                } else {
                    super.isMethod(isNameExpr);
                    return this;
                }
            }

            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isParameter) {
                if (isNameExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod())
                    return this;
                if (isNameExpr.isMethod()) {
                    isNameExpr |= isIntegerConstant;
                    isNameExpr = isNameExpr.isFieldAccessExpr;
                    isMethod();
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                if (isNameExpr == null) {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                        } else {
                            isMethod();
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                        isMethod();
                    }
                } else {
                    if (!isNameExpr.isFieldAccessExpr.isMethod()) {
                        if (isNameExpr.isMethod()) {
                            isNameExpr.isMethod();
                            isNameExpr = null;
                            isNameExpr = isNameExpr.isFieldAccessExpr;
                            isNameExpr = (isNameExpr & ~isIntegerConstant);
                            isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr ? isMethod() : null;
                        } else {
                            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                        }
                    }
                }
                this.isMethod(isNameExpr.isMethod());
                return this;
            }

            public final boolean isMethod() {
                if (!isMethod()) {
                    return true;
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                for (int isVariable = isIntegerConstant; isNameExpr < isMethod(); isNameExpr++) {
                    if (!isMethod(isNameExpr).isMethod()) {
                        return true;
                    }
                }
                return true;
            }

            public Builder isMethod(com.google.protobuf.CodedInputStream isParameter, com.google.protobuf.ExtensionRegistryLite isParameter) throws java.io.IOException {
                net.osmand.binary.OsmandOdb.OsmAndRoutingIndex isVariable = null;
                try {
                    isNameExpr = isNameExpr.isMethod(isNameExpr, isNameExpr);
                } catch (com.google.protobuf.InvalidProtocolBufferException isParameter) {
                    isNameExpr = (net.osmand.binary.OsmandOdb.OsmAndRoutingIndex) isNameExpr.isMethod();
                    throw isNameExpr;
                } finally {
                    if (isNameExpr != null) {
                        isMethod(isNameExpr);
                    }
                }
                return this;
            }

            private int isVariable;

            // isComment
            private java.lang.Object isVariable = "isStringConstant";

            /**
             * isComment
             */
            public boolean isMethod() {
                return ((isNameExpr & isIntegerConstant) == isIntegerConstant);
            }

            /**
             * isComment
             */
            public java.lang.String isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (!(isNameExpr instanceof java.lang.String)) {
                    java.lang.String isVariable = ((com.google.protobuf.ByteString) isNameExpr).isMethod();
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (java.lang.String) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public com.google.protobuf.ByteString isMethod() {
                java.lang.Object isVariable = isNameExpr;
                if (isNameExpr instanceof String) {
                    com.google.protobuf.ByteString isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod((java.lang.String) isNameExpr);
                    isNameExpr = isNameExpr;
                    return isNameExpr;
                } else {
                    return (com.google.protobuf.ByteString) isNameExpr;
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.String isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                isNameExpr = (isNameExpr & ~isIntegerConstant);
                isNameExpr = isMethod().isMethod();
                isMethod();
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(com.google.protobuf.ByteString isParameter) {
                if (isNameExpr == null) {
                    throw new NullPointerException();
                }
                isNameExpr |= isIntegerConstant;
                isNameExpr = isNameExpr;
                isMethod();
                return this;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRuleOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRuleOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRuleOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRuleOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRule.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteEncodingRuleOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBox.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBoxOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }

            // isComment
            private java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock> isVariable = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();

            private void isMethod() {
                if (!((isNameExpr & isIntegerConstant) == isIntegerConstant)) {
                    isNameExpr = new java.util.ArrayList<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock>(isNameExpr);
                    isNameExpr |= isIntegerConstant;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlockOrBuilder> isVariable;

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock> isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public int isMethod() {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isMethod();
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock isParameter) {
                if (isNameExpr == null) {
                    if (isNameExpr == null) {
                        throw new NullPointerException();
                    }
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock.Builder isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr, isNameExpr.isMethod());
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(java.lang.Iterable<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock> isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    super.isMethod(isNameExpr, isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod();
                    isNameExpr = (isNameExpr & ~isIntegerConstant);
                    isMethod();
                } else {
                    isNameExpr.isMethod();
                }
                return this;
            }

            /**
             * isComment
             */
            public Builder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    isMethod();
                    isNameExpr.isMethod(isNameExpr);
                    isMethod();
                } else {
                    isNameExpr.isMethod(isNameExpr);
                }
                return this;
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr);
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlockOrBuilder isMethod(int isParameter) {
                if (isNameExpr == null) {
                    return isNameExpr.isMethod(isNameExpr);
                } else {
                    return isNameExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public java.util.List<? extends net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlockOrBuilder> isMethod() {
                if (isNameExpr != null) {
                    return isNameExpr.isMethod();
                } else {
                    return isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock.Builder isMethod() {
                return isMethod().isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock.Builder isMethod(int isParameter) {
                return isMethod().isMethod(isNameExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod());
            }

            /**
             * isComment
             */
            public java.util.List<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock.Builder> isMethod() {
                return isMethod().isMethod();
            }

            private com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlockOrBuilder> isMethod() {
                if (isNameExpr == null) {
                    isNameExpr = new com.google.protobuf.RepeatedFieldBuilder<net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlock.Builder, net.osmand.binary.OsmandOdb.OsmAndRoutingIndex.RouteDataBlockOrBuilder>(isNameExpr, ((isNameExpr & isIntegerConstant) == isIntegerConstant), isMethod(), isMethod());
                    isNameExpr = null;
                }
                return isNameExpr;
            }
        }

        static {
            isNameExpr = new OsmAndRoutingIndex(true);
            isNameExpr.isMethod();
        }
    }

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    private static com.google.protobuf.Descriptors.Descriptor isVariable;

    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable isVariable;

    public static com.google.protobuf.Descriptors.FileDescriptor isMethod() {
        return isNameExpr;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor isVariable;

    static {
        java.lang.String[] isVariable = { "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant", "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" + "isStringConstant" };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner isVariable = new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {

            public com.google.protobuf.ExtensionRegistry isMethod(com.google.protobuf.Descriptors.FileDescriptor isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isNameExpr.isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isNameExpr.isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isNameExpr.isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isNameExpr.isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant" });
                isNameExpr = isNameExpr.isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant" });
                isNameExpr = isNameExpr.isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isMethod().isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isNameExpr.isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isNameExpr.isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                isNameExpr = isNameExpr.isMethod().isMethod(isIntegerConstant);
                isNameExpr = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(isNameExpr, new java.lang.String[] { "isStringConstant", "isStringConstant", "isStringConstant", "isStringConstant" });
                return null;
            }
        };
        isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, new com.google.protobuf.Descriptors.FileDescriptor[] {}, isNameExpr);
    }
}
