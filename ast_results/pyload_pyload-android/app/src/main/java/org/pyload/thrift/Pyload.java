// isComment
package org.pyload.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class isClassOrIsInterface {

    public interface isClassOrIsInterface {

        public String isMethod(String isParameter, String isParameter, String isParameter) throws org.apache.thrift.TException;

        public void isMethod(String isParameter, String isParameter, String isParameter, String isParameter) throws org.apache.thrift.TException;

        public Map<String, ConfigSection> isMethod() throws org.apache.thrift.TException;

        public Map<String, ConfigSection> isMethod() throws org.apache.thrift.TException;

        public void isMethod() throws org.apache.thrift.TException;

        public void isMethod() throws org.apache.thrift.TException;

        public boolean isMethod() throws org.apache.thrift.TException;

        public ServerStatus isMethod() throws org.apache.thrift.TException;

        public long isMethod() throws org.apache.thrift.TException;

        public String isMethod() throws org.apache.thrift.TException;

        public void isMethod() throws org.apache.thrift.TException;

        public void isMethod() throws org.apache.thrift.TException;

        public List<String> isMethod(int isParameter) throws org.apache.thrift.TException;

        public boolean isMethod() throws org.apache.thrift.TException;

        public boolean isMethod() throws org.apache.thrift.TException;

        public boolean isMethod() throws org.apache.thrift.TException;

        public Map<String, List<String>> isMethod(List<String> isParameter) throws org.apache.thrift.TException;

        public Map<String, List<String>> isMethod(List<String> isParameter) throws org.apache.thrift.TException;

        public Map<String, List<String>> isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException;

        public OnlineCheck isMethod(List<String> isParameter) throws org.apache.thrift.TException;

        public OnlineCheck isMethod(List<String> isParameter, String isParameter, ByteBuffer isParameter) throws org.apache.thrift.TException;

        public OnlineCheck isMethod(int isParameter) throws org.apache.thrift.TException;

        public List<DownloadInfo> isMethod() throws org.apache.thrift.TException;

        public PackageData isMethod(int isParameter) throws PackageDoesNotExists, org.apache.thrift.TException;

        public PackageData isMethod(int isParameter) throws PackageDoesNotExists, org.apache.thrift.TException;

        public FileData isMethod(int isParameter) throws FileDoesNotExists, org.apache.thrift.TException;

        public List<PackageData> isMethod() throws org.apache.thrift.TException;

        public List<PackageData> isMethod() throws org.apache.thrift.TException;

        public List<PackageData> isMethod() throws org.apache.thrift.TException;

        public List<PackageData> isMethod() throws org.apache.thrift.TException;

        public Map<Short, Integer> isMethod(Destination isParameter) throws org.apache.thrift.TException;

        public Map<Short, Integer> isMethod(int isParameter) throws org.apache.thrift.TException;

        public List<Integer> isMethod(List<String> isParameter, Destination isParameter) throws org.apache.thrift.TException;

        public int isMethod(String isParameter, List<String> isParameter, Destination isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, List<String> isParameter) throws org.apache.thrift.TException;

        public void isMethod(String isParameter, ByteBuffer isParameter) throws org.apache.thrift.TException;

        public void isMethod(List<Integer> isParameter) throws org.apache.thrift.TException;

        public void isMethod(List<Integer> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter) throws org.apache.thrift.TException;

        public void isMethod() throws org.apache.thrift.TException;

        public void isMethod(List<Integer> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, String isParameter) throws org.apache.thrift.TException;

        public void isMethod(Destination isParameter, int isParameter) throws org.apache.thrift.TException;

        public void isMethod(List<Integer> isParameter, int isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, short isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, short isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, Map<String, String> isParameter) throws PackageDoesNotExists, org.apache.thrift.TException;

        public List<Integer> isMethod() throws org.apache.thrift.TException;

        public void isMethod() throws org.apache.thrift.TException;

        public boolean isMethod() throws org.apache.thrift.TException;

        public CaptchaTask isMethod(boolean isParameter) throws org.apache.thrift.TException;

        public String isMethod(int isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, String isParameter) throws org.apache.thrift.TException;

        public List<EventInfo> isMethod(String isParameter) throws org.apache.thrift.TException;

        public List<AccountInfo> isMethod(boolean isParameter) throws org.apache.thrift.TException;

        public List<String> isMethod() throws org.apache.thrift.TException;

        public void isMethod(String isParameter, String isParameter, String isParameter, Map<String, String> isParameter) throws org.apache.thrift.TException;

        public void isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException;

        public boolean isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException;

        public UserData isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException;

        public Map<String, UserData> isMethod() throws org.apache.thrift.TException;

        public Map<String, Map<String, String>> isMethod() throws org.apache.thrift.TException;

        public boolean isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException;

        public String isMethod(ServiceCall isParameter) throws ServiceDoesNotExists, ServiceException, org.apache.thrift.TException;

        public Map<String, Map<String, String>> isMethod() throws org.apache.thrift.TException;

        public Map<String, String> isMethod(String isParameter) throws org.apache.thrift.TException;
    }

    public interface isClassOrIsInterface {

        public void isMethod(String isParameter, String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getConfigValue_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(String isParameter, String isParameter, String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setConfigValue_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getConfig_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPluginConfig_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pauseServer_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.unpauseServer_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.togglePause_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.statusServer_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.freeSpace_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getServerVersion_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.kill_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.restart_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLog_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.isTimeDownload_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.isTimeReconnect_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.toggleReconnect_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(List<String> isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.generatePackages_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(List<String> isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkURLs_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.parseURLs_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(List<String> isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkOnlineStatus_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(List<String> isParameter, String isParameter, ByteBuffer isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkOnlineStatusContainer_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pollResults_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.statusDownloads_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPackageData_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPackageInfo_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFileData_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getQueue_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCollector_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getQueueData_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCollectorData_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(Destination isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPackageOrder_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFileOrder_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(List<String> isParameter, Destination isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.generateAndAddPackages_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(String isParameter, List<String> isParameter, Destination isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addPackage_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, List<String> isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addFiles_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(String isParameter, ByteBuffer isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.uploadContainer_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(List<Integer> isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteFiles_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(List<Integer> isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deletePackages_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pushToQueue_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pullFromQueue_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.restartPackage_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.restartFile_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.recheckPackage_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopAllDownloads_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(List<Integer> isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopDownloads_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setPackageName_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(Destination isParameter, int isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.movePackage_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(List<Integer> isParameter, int isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.moveFiles_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, short isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.orderPackage_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, short isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.orderFile_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, Map<String, String> isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setPackageData_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteFinished_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.restartFailed_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.isCaptchaWaiting_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(boolean isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCaptchaTask_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCaptchaTaskStatus_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(int isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setCaptchaResult_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(String isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getEvents_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(boolean isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAccounts_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAccountTypes_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(String isParameter, String isParameter, String isParameter, Map<String, String> isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateAccount_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeAccount_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.login_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getUserData_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAllUserData_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getServices_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.hasService_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(ServiceCall isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.call_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAllInfo_call> isParameter) throws org.apache.thrift.TException;

        public void isMethod(String isParameter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getInfoByPlugin_call> isParameter) throws org.apache.thrift.TException;
    }

    public static class isClassOrIsInterface extends org.apache.thrift.TServiceClient implements Iface {

        public static class isClassOrIsInterface implements org.apache.thrift.TServiceClientFactory<Client> {

            public isConstructor() {
            }

            public Client isMethod(org.apache.thrift.protocol.TProtocol isParameter) {
                return new Client(isNameExpr);
            }

            public Client isMethod(org.apache.thrift.protocol.TProtocol isParameter, org.apache.thrift.protocol.TProtocol isParameter) {
                return new Client(isNameExpr, isNameExpr);
            }
        }

        public isConstructor(org.apache.thrift.protocol.TProtocol isParameter) {
            super(isNameExpr, isNameExpr);
        }

        public isConstructor(org.apache.thrift.protocol.TProtocol isParameter, org.apache.thrift.protocol.TProtocol isParameter) {
            super(isNameExpr, isNameExpr);
        }

        public String isMethod(String isParameter, String isParameter, String isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr, isNameExpr);
            return isMethod();
        }

        public void isMethod(String isParameter, String isParameter, String isParameter) throws org.apache.thrift.TException {
            getConfigValue_args isVariable = new getConfigValue_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public String isMethod() throws org.apache.thrift.TException {
            getConfigValue_result isVariable = new getConfigValue_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public void isMethod(String isParameter, String isParameter, String isParameter, String isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr);
            isMethod();
        }

        public void isMethod(String isParameter, String isParameter, String isParameter, String isParameter) throws org.apache.thrift.TException {
            setConfigValue_args isVariable = new setConfigValue_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            setConfigValue_result isVariable = new setConfigValue_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public Map<String, ConfigSection> isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            getConfig_args isVariable = new getConfig_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public Map<String, ConfigSection> isMethod() throws org.apache.thrift.TException {
            getConfig_result isVariable = new getConfig_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public Map<String, ConfigSection> isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            getPluginConfig_args isVariable = new getPluginConfig_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public Map<String, ConfigSection> isMethod() throws org.apache.thrift.TException {
            getPluginConfig_result isVariable = new getPluginConfig_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public void isMethod() throws org.apache.thrift.TException {
            isMethod();
            isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            pauseServer_args isVariable = new pauseServer_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            pauseServer_result isVariable = new pauseServer_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod() throws org.apache.thrift.TException {
            isMethod();
            isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            unpauseServer_args isVariable = new unpauseServer_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            unpauseServer_result isVariable = new unpauseServer_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public boolean isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            togglePause_args isVariable = new togglePause_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public boolean isMethod() throws org.apache.thrift.TException {
            togglePause_result isVariable = new togglePause_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public ServerStatus isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            statusServer_args isVariable = new statusServer_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public ServerStatus isMethod() throws org.apache.thrift.TException {
            statusServer_result isVariable = new statusServer_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public long isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            freeSpace_args isVariable = new freeSpace_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public long isMethod() throws org.apache.thrift.TException {
            freeSpace_result isVariable = new freeSpace_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public String isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            getServerVersion_args isVariable = new getServerVersion_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public String isMethod() throws org.apache.thrift.TException {
            getServerVersion_result isVariable = new getServerVersion_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public void isMethod() throws org.apache.thrift.TException {
            isMethod();
            isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            kill_args isVariable = new kill_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            kill_result isVariable = new kill_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod() throws org.apache.thrift.TException {
            isMethod();
            isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            restart_args isVariable = new restart_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            restart_result isVariable = new restart_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public List<String> isMethod(int isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            getLog_args isVariable = new getLog_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public List<String> isMethod() throws org.apache.thrift.TException {
            getLog_result isVariable = new getLog_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public boolean isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            isTimeDownload_args isVariable = new isTimeDownload_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public boolean isMethod() throws org.apache.thrift.TException {
            isTimeDownload_result isVariable = new isTimeDownload_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public boolean isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            isTimeReconnect_args isVariable = new isTimeReconnect_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public boolean isMethod() throws org.apache.thrift.TException {
            isTimeReconnect_result isVariable = new isTimeReconnect_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public boolean isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            toggleReconnect_args isVariable = new toggleReconnect_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public boolean isMethod() throws org.apache.thrift.TException {
            toggleReconnect_result isVariable = new toggleReconnect_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public Map<String, List<String>> isMethod(List<String> isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(List<String> isParameter) throws org.apache.thrift.TException {
            generatePackages_args isVariable = new generatePackages_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public Map<String, List<String>> isMethod() throws org.apache.thrift.TException {
            generatePackages_result isVariable = new generatePackages_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public Map<String, List<String>> isMethod(List<String> isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(List<String> isParameter) throws org.apache.thrift.TException {
            checkURLs_args isVariable = new checkURLs_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public Map<String, List<String>> isMethod() throws org.apache.thrift.TException {
            checkURLs_result isVariable = new checkURLs_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public Map<String, List<String>> isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            return isMethod();
        }

        public void isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException {
            parseURLs_args isVariable = new parseURLs_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public Map<String, List<String>> isMethod() throws org.apache.thrift.TException {
            parseURLs_result isVariable = new parseURLs_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public OnlineCheck isMethod(List<String> isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(List<String> isParameter) throws org.apache.thrift.TException {
            checkOnlineStatus_args isVariable = new checkOnlineStatus_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public OnlineCheck isMethod() throws org.apache.thrift.TException {
            checkOnlineStatus_result isVariable = new checkOnlineStatus_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public OnlineCheck isMethod(List<String> isParameter, String isParameter, ByteBuffer isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr, isNameExpr);
            return isMethod();
        }

        public void isMethod(List<String> isParameter, String isParameter, ByteBuffer isParameter) throws org.apache.thrift.TException {
            checkOnlineStatusContainer_args isVariable = new checkOnlineStatusContainer_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public OnlineCheck isMethod() throws org.apache.thrift.TException {
            checkOnlineStatusContainer_result isVariable = new checkOnlineStatusContainer_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public OnlineCheck isMethod(int isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            pollResults_args isVariable = new pollResults_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public OnlineCheck isMethod() throws org.apache.thrift.TException {
            pollResults_result isVariable = new pollResults_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public List<DownloadInfo> isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            statusDownloads_args isVariable = new statusDownloads_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public List<DownloadInfo> isMethod() throws org.apache.thrift.TException {
            statusDownloads_result isVariable = new statusDownloads_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public PackageData isMethod(int isParameter) throws PackageDoesNotExists, org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            getPackageData_args isVariable = new getPackageData_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public PackageData isMethod() throws PackageDoesNotExists, org.apache.thrift.TException {
            getPackageData_result isVariable = new getPackageData_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isFieldAccessExpr != null) {
                throw isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public PackageData isMethod(int isParameter) throws PackageDoesNotExists, org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            getPackageInfo_args isVariable = new getPackageInfo_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public PackageData isMethod() throws PackageDoesNotExists, org.apache.thrift.TException {
            getPackageInfo_result isVariable = new getPackageInfo_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isFieldAccessExpr != null) {
                throw isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public FileData isMethod(int isParameter) throws FileDoesNotExists, org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            getFileData_args isVariable = new getFileData_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public FileData isMethod() throws FileDoesNotExists, org.apache.thrift.TException {
            getFileData_result isVariable = new getFileData_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isFieldAccessExpr != null) {
                throw isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public List<PackageData> isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            getQueue_args isVariable = new getQueue_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public List<PackageData> isMethod() throws org.apache.thrift.TException {
            getQueue_result isVariable = new getQueue_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public List<PackageData> isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            getCollector_args isVariable = new getCollector_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public List<PackageData> isMethod() throws org.apache.thrift.TException {
            getCollector_result isVariable = new getCollector_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public List<PackageData> isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            getQueueData_args isVariable = new getQueueData_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public List<PackageData> isMethod() throws org.apache.thrift.TException {
            getQueueData_result isVariable = new getQueueData_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public List<PackageData> isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            getCollectorData_args isVariable = new getCollectorData_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public List<PackageData> isMethod() throws org.apache.thrift.TException {
            getCollectorData_result isVariable = new getCollectorData_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public Map<Short, Integer> isMethod(Destination isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(Destination isParameter) throws org.apache.thrift.TException {
            getPackageOrder_args isVariable = new getPackageOrder_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public Map<Short, Integer> isMethod() throws org.apache.thrift.TException {
            getPackageOrder_result isVariable = new getPackageOrder_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public Map<Short, Integer> isMethod(int isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            getFileOrder_args isVariable = new getFileOrder_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public Map<Short, Integer> isMethod() throws org.apache.thrift.TException {
            getFileOrder_result isVariable = new getFileOrder_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public List<Integer> isMethod(List<String> isParameter, Destination isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            return isMethod();
        }

        public void isMethod(List<String> isParameter, Destination isParameter) throws org.apache.thrift.TException {
            generateAndAddPackages_args isVariable = new generateAndAddPackages_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public List<Integer> isMethod() throws org.apache.thrift.TException {
            generateAndAddPackages_result isVariable = new generateAndAddPackages_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public int isMethod(String isParameter, List<String> isParameter, Destination isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr, isNameExpr);
            return isMethod();
        }

        public void isMethod(String isParameter, List<String> isParameter, Destination isParameter) throws org.apache.thrift.TException {
            addPackage_args isVariable = new addPackage_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public int isMethod() throws org.apache.thrift.TException {
            addPackage_result isVariable = new addPackage_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public void isMethod(int isParameter, List<String> isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            isMethod();
        }

        public void isMethod(int isParameter, List<String> isParameter) throws org.apache.thrift.TException {
            addFiles_args isVariable = new addFiles_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            addFiles_result isVariable = new addFiles_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(String isParameter, ByteBuffer isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            isMethod();
        }

        public void isMethod(String isParameter, ByteBuffer isParameter) throws org.apache.thrift.TException {
            uploadContainer_args isVariable = new uploadContainer_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            uploadContainer_result isVariable = new uploadContainer_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(List<Integer> isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            isMethod();
        }

        public void isMethod(List<Integer> isParameter) throws org.apache.thrift.TException {
            deleteFiles_args isVariable = new deleteFiles_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            deleteFiles_result isVariable = new deleteFiles_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(List<Integer> isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            isMethod();
        }

        public void isMethod(List<Integer> isParameter) throws org.apache.thrift.TException {
            deletePackages_args isVariable = new deletePackages_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            deletePackages_result isVariable = new deletePackages_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            isMethod();
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            pushToQueue_args isVariable = new pushToQueue_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            pushToQueue_result isVariable = new pushToQueue_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            isMethod();
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            pullFromQueue_args isVariable = new pullFromQueue_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            pullFromQueue_result isVariable = new pullFromQueue_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            isMethod();
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            restartPackage_args isVariable = new restartPackage_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            restartPackage_result isVariable = new restartPackage_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            isMethod();
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            restartFile_args isVariable = new restartFile_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            restartFile_result isVariable = new restartFile_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            isMethod();
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            recheckPackage_args isVariable = new recheckPackage_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            recheckPackage_result isVariable = new recheckPackage_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod() throws org.apache.thrift.TException {
            isMethod();
            isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            stopAllDownloads_args isVariable = new stopAllDownloads_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            stopAllDownloads_result isVariable = new stopAllDownloads_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(List<Integer> isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            isMethod();
        }

        public void isMethod(List<Integer> isParameter) throws org.apache.thrift.TException {
            stopDownloads_args isVariable = new stopDownloads_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            stopDownloads_result isVariable = new stopDownloads_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(int isParameter, String isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            isMethod();
        }

        public void isMethod(int isParameter, String isParameter) throws org.apache.thrift.TException {
            setPackageName_args isVariable = new setPackageName_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            setPackageName_result isVariable = new setPackageName_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(Destination isParameter, int isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            isMethod();
        }

        public void isMethod(Destination isParameter, int isParameter) throws org.apache.thrift.TException {
            movePackage_args isVariable = new movePackage_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            movePackage_result isVariable = new movePackage_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(List<Integer> isParameter, int isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            isMethod();
        }

        public void isMethod(List<Integer> isParameter, int isParameter) throws org.apache.thrift.TException {
            moveFiles_args isVariable = new moveFiles_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            moveFiles_result isVariable = new moveFiles_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(int isParameter, short isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            isMethod();
        }

        public void isMethod(int isParameter, short isParameter) throws org.apache.thrift.TException {
            orderPackage_args isVariable = new orderPackage_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            orderPackage_result isVariable = new orderPackage_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(int isParameter, short isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            isMethod();
        }

        public void isMethod(int isParameter, short isParameter) throws org.apache.thrift.TException {
            orderFile_args isVariable = new orderFile_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            orderFile_result isVariable = new orderFile_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(int isParameter, Map<String, String> isParameter) throws PackageDoesNotExists, org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            isMethod();
        }

        public void isMethod(int isParameter, Map<String, String> isParameter) throws org.apache.thrift.TException {
            setPackageData_args isVariable = new setPackageData_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws PackageDoesNotExists, org.apache.thrift.TException {
            setPackageData_result isVariable = new setPackageData_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isFieldAccessExpr != null) {
                throw isNameExpr.isFieldAccessExpr;
            }
            return;
        }

        public List<Integer> isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            deleteFinished_args isVariable = new deleteFinished_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public List<Integer> isMethod() throws org.apache.thrift.TException {
            deleteFinished_result isVariable = new deleteFinished_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public void isMethod() throws org.apache.thrift.TException {
            isMethod();
            isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            restartFailed_args isVariable = new restartFailed_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            restartFailed_result isVariable = new restartFailed_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public boolean isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            isCaptchaWaiting_args isVariable = new isCaptchaWaiting_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public boolean isMethod() throws org.apache.thrift.TException {
            isCaptchaWaiting_result isVariable = new isCaptchaWaiting_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public CaptchaTask isMethod(boolean isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(boolean isParameter) throws org.apache.thrift.TException {
            getCaptchaTask_args isVariable = new getCaptchaTask_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public CaptchaTask isMethod() throws org.apache.thrift.TException {
            getCaptchaTask_result isVariable = new getCaptchaTask_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public String isMethod(int isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(int isParameter) throws org.apache.thrift.TException {
            getCaptchaTaskStatus_args isVariable = new getCaptchaTaskStatus_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public String isMethod() throws org.apache.thrift.TException {
            getCaptchaTaskStatus_result isVariable = new getCaptchaTaskStatus_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public void isMethod(int isParameter, String isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            isMethod();
        }

        public void isMethod(int isParameter, String isParameter) throws org.apache.thrift.TException {
            setCaptchaResult_args isVariable = new setCaptchaResult_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            setCaptchaResult_result isVariable = new setCaptchaResult_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public List<EventInfo> isMethod(String isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(String isParameter) throws org.apache.thrift.TException {
            getEvents_args isVariable = new getEvents_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public List<EventInfo> isMethod() throws org.apache.thrift.TException {
            getEvents_result isVariable = new getEvents_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public List<AccountInfo> isMethod(boolean isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(boolean isParameter) throws org.apache.thrift.TException {
            getAccounts_args isVariable = new getAccounts_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public List<AccountInfo> isMethod() throws org.apache.thrift.TException {
            getAccounts_result isVariable = new getAccounts_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public List<String> isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            getAccountTypes_args isVariable = new getAccountTypes_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public List<String> isMethod() throws org.apache.thrift.TException {
            getAccountTypes_result isVariable = new getAccountTypes_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public void isMethod(String isParameter, String isParameter, String isParameter, Map<String, String> isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr, isNameExpr, isNameExpr);
            isMethod();
        }

        public void isMethod(String isParameter, String isParameter, String isParameter, Map<String, String> isParameter) throws org.apache.thrift.TException {
            updateAccount_args isVariable = new updateAccount_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            updateAccount_result isVariable = new updateAccount_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public void isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            isMethod();
        }

        public void isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException {
            removeAccount_args isVariable = new removeAccount_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public void isMethod() throws org.apache.thrift.TException {
            removeAccount_result isVariable = new removeAccount_result();
            isMethod(isNameExpr, "isStringConstant");
            return;
        }

        public boolean isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            return isMethod();
        }

        public void isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException {
            login_args isVariable = new login_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public boolean isMethod() throws org.apache.thrift.TException {
            login_result isVariable = new login_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public UserData isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            return isMethod();
        }

        public void isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException {
            getUserData_args isVariable = new getUserData_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public UserData isMethod() throws org.apache.thrift.TException {
            getUserData_result isVariable = new getUserData_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public Map<String, UserData> isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            getAllUserData_args isVariable = new getAllUserData_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public Map<String, UserData> isMethod() throws org.apache.thrift.TException {
            getAllUserData_result isVariable = new getAllUserData_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public Map<String, Map<String, String>> isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            getServices_args isVariable = new getServices_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public Map<String, Map<String, String>> isMethod() throws org.apache.thrift.TException {
            getServices_result isVariable = new getServices_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public boolean isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr, isNameExpr);
            return isMethod();
        }

        public void isMethod(String isParameter, String isParameter) throws org.apache.thrift.TException {
            hasService_args isVariable = new hasService_args();
            isNameExpr.isMethod(isNameExpr);
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public boolean isMethod() throws org.apache.thrift.TException {
            hasService_result isVariable = new hasService_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public String isMethod(ServiceCall isParameter) throws ServiceDoesNotExists, ServiceException, org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(ServiceCall isParameter) throws org.apache.thrift.TException {
            call_args isVariable = new call_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public String isMethod() throws ServiceDoesNotExists, ServiceException, org.apache.thrift.TException {
            call_result isVariable = new call_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isFieldAccessExpr != null) {
                throw isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isFieldAccessExpr != null) {
                throw isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public Map<String, Map<String, String>> isMethod() throws org.apache.thrift.TException {
            isMethod();
            return isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
            getAllInfo_args isVariable = new getAllInfo_args();
            isMethod("isStringConstant", isNameExpr);
        }

        public Map<String, Map<String, String>> isMethod() throws org.apache.thrift.TException {
            getAllInfo_result isVariable = new getAllInfo_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }

        public Map<String, String> isMethod(String isParameter) throws org.apache.thrift.TException {
            isMethod(isNameExpr);
            return isMethod();
        }

        public void isMethod(String isParameter) throws org.apache.thrift.TException {
            getInfoByPlugin_args isVariable = new getInfoByPlugin_args();
            isNameExpr.isMethod(isNameExpr);
            isMethod("isStringConstant", isNameExpr);
        }

        public Map<String, String> isMethod() throws org.apache.thrift.TException {
            getInfoByPlugin_result isVariable = new getInfoByPlugin_result();
            isMethod(isNameExpr, "isStringConstant");
            if (isNameExpr.isMethod()) {
                return isNameExpr.isFieldAccessExpr;
            }
            throw new org.apache.thrift.TApplicationException(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant");
        }
    }

    public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncClient implements AsyncIface {

        public static class isClassOrIsInterface implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {

            private org.apache.thrift.async.TAsyncClientManager isVariable;

            private org.apache.thrift.protocol.TProtocolFactory isVariable;

            public isConstructor(org.apache.thrift.async.TAsyncClientManager isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter) {
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public AsyncClient isMethod(org.apache.thrift.transport.TNonblockingTransport isParameter) {
                return new AsyncClient(isNameExpr, isNameExpr, isNameExpr);
            }
        }

        public isConstructor(org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.async.TAsyncClientManager isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) {
            super(isNameExpr, isNameExpr, isNameExpr);
        }

        public void isMethod(String isParameter, String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<getConfigValue_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getConfigValue_call isVariable = new getConfigValue_call(isNameExpr, isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private String isVariable;

            private String isVariable;

            private String isVariable;

            public isConstructor(String isParameter, String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<getConfigValue_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getConfigValue_args isVariable = new getConfigValue_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public String isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(String isParameter, String isParameter, String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<setConfigValue_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            setConfigValue_call isVariable = new setConfigValue_call(isNameExpr, isNameExpr, isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private String isVariable;

            private String isVariable;

            private String isVariable;

            private String isVariable;

            public isConstructor(String isParameter, String isParameter, String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<setConfigValue_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                setConfigValue_args isVariable = new setConfigValue_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<getConfig_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getConfig_call isVariable = new getConfig_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<getConfig_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getConfig_args isVariable = new getConfig_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public Map<String, ConfigSection> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<getPluginConfig_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getPluginConfig_call isVariable = new getPluginConfig_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<getPluginConfig_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getPluginConfig_args isVariable = new getPluginConfig_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public Map<String, ConfigSection> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<pauseServer_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            pauseServer_call isVariable = new pauseServer_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<pauseServer_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                pauseServer_args isVariable = new pauseServer_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<unpauseServer_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            unpauseServer_call isVariable = new unpauseServer_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<unpauseServer_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                unpauseServer_args isVariable = new unpauseServer_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<togglePause_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            togglePause_call isVariable = new togglePause_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<togglePause_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                togglePause_args isVariable = new togglePause_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public boolean isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<statusServer_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            statusServer_call isVariable = new statusServer_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<statusServer_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                statusServer_args isVariable = new statusServer_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public ServerStatus isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<freeSpace_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            freeSpace_call isVariable = new freeSpace_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<freeSpace_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                freeSpace_args isVariable = new freeSpace_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public long isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<getServerVersion_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getServerVersion_call isVariable = new getServerVersion_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<getServerVersion_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getServerVersion_args isVariable = new getServerVersion_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public String isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<kill_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            kill_call isVariable = new kill_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<kill_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                kill_args isVariable = new kill_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<restart_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            restart_call isVariable = new restart_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<restart_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                restart_args isVariable = new restart_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<getLog_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getLog_call isVariable = new getLog_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            public isConstructor(int isParameter, org.apache.thrift.async.AsyncMethodCallback<getLog_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getLog_args isVariable = new getLog_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public List<String> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<isTimeDownload_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            isTimeDownload_call isVariable = new isTimeDownload_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<isTimeDownload_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                isTimeDownload_args isVariable = new isTimeDownload_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public boolean isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<isTimeReconnect_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            isTimeReconnect_call isVariable = new isTimeReconnect_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<isTimeReconnect_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                isTimeReconnect_args isVariable = new isTimeReconnect_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public boolean isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<toggleReconnect_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            toggleReconnect_call isVariable = new toggleReconnect_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<toggleReconnect_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                toggleReconnect_args isVariable = new toggleReconnect_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public boolean isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(List<String> isParameter, org.apache.thrift.async.AsyncMethodCallback<generatePackages_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            generatePackages_call isVariable = new generatePackages_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private List<String> isVariable;

            public isConstructor(List<String> isParameter, org.apache.thrift.async.AsyncMethodCallback<generatePackages_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                generatePackages_args isVariable = new generatePackages_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public Map<String, List<String>> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(List<String> isParameter, org.apache.thrift.async.AsyncMethodCallback<checkURLs_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            checkURLs_call isVariable = new checkURLs_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private List<String> isVariable;

            public isConstructor(List<String> isParameter, org.apache.thrift.async.AsyncMethodCallback<checkURLs_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                checkURLs_args isVariable = new checkURLs_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public Map<String, List<String>> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<parseURLs_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            parseURLs_call isVariable = new parseURLs_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private String isVariable;

            private String isVariable;

            public isConstructor(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<parseURLs_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                parseURLs_args isVariable = new parseURLs_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public Map<String, List<String>> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(List<String> isParameter, org.apache.thrift.async.AsyncMethodCallback<checkOnlineStatus_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            checkOnlineStatus_call isVariable = new checkOnlineStatus_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private List<String> isVariable;

            public isConstructor(List<String> isParameter, org.apache.thrift.async.AsyncMethodCallback<checkOnlineStatus_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                checkOnlineStatus_args isVariable = new checkOnlineStatus_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public OnlineCheck isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(List<String> isParameter, String isParameter, ByteBuffer isParameter, org.apache.thrift.async.AsyncMethodCallback<checkOnlineStatusContainer_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            checkOnlineStatusContainer_call isVariable = new checkOnlineStatusContainer_call(isNameExpr, isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private List<String> isVariable;

            private String isVariable;

            private ByteBuffer isVariable;

            public isConstructor(List<String> isParameter, String isParameter, ByteBuffer isParameter, org.apache.thrift.async.AsyncMethodCallback<checkOnlineStatusContainer_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                checkOnlineStatusContainer_args isVariable = new checkOnlineStatusContainer_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public OnlineCheck isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<pollResults_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            pollResults_call isVariable = new pollResults_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            public isConstructor(int isParameter, org.apache.thrift.async.AsyncMethodCallback<pollResults_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                pollResults_args isVariable = new pollResults_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public OnlineCheck isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<statusDownloads_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            statusDownloads_call isVariable = new statusDownloads_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<statusDownloads_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                statusDownloads_args isVariable = new statusDownloads_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public List<DownloadInfo> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<getPackageData_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getPackageData_call isVariable = new getPackageData_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            public isConstructor(int isParameter, org.apache.thrift.async.AsyncMethodCallback<getPackageData_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getPackageData_args isVariable = new getPackageData_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public PackageData isMethod() throws PackageDoesNotExists, org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<getPackageInfo_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getPackageInfo_call isVariable = new getPackageInfo_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            public isConstructor(int isParameter, org.apache.thrift.async.AsyncMethodCallback<getPackageInfo_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getPackageInfo_args isVariable = new getPackageInfo_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public PackageData isMethod() throws PackageDoesNotExists, org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<getFileData_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getFileData_call isVariable = new getFileData_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            public isConstructor(int isParameter, org.apache.thrift.async.AsyncMethodCallback<getFileData_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getFileData_args isVariable = new getFileData_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public FileData isMethod() throws FileDoesNotExists, org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<getQueue_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getQueue_call isVariable = new getQueue_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<getQueue_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getQueue_args isVariable = new getQueue_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public List<PackageData> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<getCollector_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getCollector_call isVariable = new getCollector_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<getCollector_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getCollector_args isVariable = new getCollector_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public List<PackageData> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<getQueueData_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getQueueData_call isVariable = new getQueueData_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<getQueueData_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getQueueData_args isVariable = new getQueueData_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public List<PackageData> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<getCollectorData_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getCollectorData_call isVariable = new getCollectorData_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<getCollectorData_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getCollectorData_args isVariable = new getCollectorData_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public List<PackageData> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(Destination isParameter, org.apache.thrift.async.AsyncMethodCallback<getPackageOrder_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getPackageOrder_call isVariable = new getPackageOrder_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private Destination isVariable;

            public isConstructor(Destination isParameter, org.apache.thrift.async.AsyncMethodCallback<getPackageOrder_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getPackageOrder_args isVariable = new getPackageOrder_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public Map<Short, Integer> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<getFileOrder_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getFileOrder_call isVariable = new getFileOrder_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            public isConstructor(int isParameter, org.apache.thrift.async.AsyncMethodCallback<getFileOrder_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getFileOrder_args isVariable = new getFileOrder_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public Map<Short, Integer> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(List<String> isParameter, Destination isParameter, org.apache.thrift.async.AsyncMethodCallback<generateAndAddPackages_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            generateAndAddPackages_call isVariable = new generateAndAddPackages_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private List<String> isVariable;

            private Destination isVariable;

            public isConstructor(List<String> isParameter, Destination isParameter, org.apache.thrift.async.AsyncMethodCallback<generateAndAddPackages_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                generateAndAddPackages_args isVariable = new generateAndAddPackages_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public List<Integer> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(String isParameter, List<String> isParameter, Destination isParameter, org.apache.thrift.async.AsyncMethodCallback<addPackage_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            addPackage_call isVariable = new addPackage_call(isNameExpr, isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private String isVariable;

            private List<String> isVariable;

            private Destination isVariable;

            public isConstructor(String isParameter, List<String> isParameter, Destination isParameter, org.apache.thrift.async.AsyncMethodCallback<addPackage_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                addPackage_args isVariable = new addPackage_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public int isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, List<String> isParameter, org.apache.thrift.async.AsyncMethodCallback<addFiles_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            addFiles_call isVariable = new addFiles_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            private List<String> isVariable;

            public isConstructor(int isParameter, List<String> isParameter, org.apache.thrift.async.AsyncMethodCallback<addFiles_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                addFiles_args isVariable = new addFiles_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(String isParameter, ByteBuffer isParameter, org.apache.thrift.async.AsyncMethodCallback<uploadContainer_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            uploadContainer_call isVariable = new uploadContainer_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private String isVariable;

            private ByteBuffer isVariable;

            public isConstructor(String isParameter, ByteBuffer isParameter, org.apache.thrift.async.AsyncMethodCallback<uploadContainer_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                uploadContainer_args isVariable = new uploadContainer_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(List<Integer> isParameter, org.apache.thrift.async.AsyncMethodCallback<deleteFiles_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            deleteFiles_call isVariable = new deleteFiles_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private List<Integer> isVariable;

            public isConstructor(List<Integer> isParameter, org.apache.thrift.async.AsyncMethodCallback<deleteFiles_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                deleteFiles_args isVariable = new deleteFiles_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(List<Integer> isParameter, org.apache.thrift.async.AsyncMethodCallback<deletePackages_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            deletePackages_call isVariable = new deletePackages_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private List<Integer> isVariable;

            public isConstructor(List<Integer> isParameter, org.apache.thrift.async.AsyncMethodCallback<deletePackages_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                deletePackages_args isVariable = new deletePackages_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<pushToQueue_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            pushToQueue_call isVariable = new pushToQueue_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            public isConstructor(int isParameter, org.apache.thrift.async.AsyncMethodCallback<pushToQueue_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                pushToQueue_args isVariable = new pushToQueue_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<pullFromQueue_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            pullFromQueue_call isVariable = new pullFromQueue_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            public isConstructor(int isParameter, org.apache.thrift.async.AsyncMethodCallback<pullFromQueue_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                pullFromQueue_args isVariable = new pullFromQueue_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<restartPackage_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            restartPackage_call isVariable = new restartPackage_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            public isConstructor(int isParameter, org.apache.thrift.async.AsyncMethodCallback<restartPackage_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                restartPackage_args isVariable = new restartPackage_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<restartFile_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            restartFile_call isVariable = new restartFile_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            public isConstructor(int isParameter, org.apache.thrift.async.AsyncMethodCallback<restartFile_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                restartFile_args isVariable = new restartFile_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<recheckPackage_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            recheckPackage_call isVariable = new recheckPackage_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            public isConstructor(int isParameter, org.apache.thrift.async.AsyncMethodCallback<recheckPackage_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                recheckPackage_args isVariable = new recheckPackage_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<stopAllDownloads_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            stopAllDownloads_call isVariable = new stopAllDownloads_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<stopAllDownloads_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                stopAllDownloads_args isVariable = new stopAllDownloads_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(List<Integer> isParameter, org.apache.thrift.async.AsyncMethodCallback<stopDownloads_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            stopDownloads_call isVariable = new stopDownloads_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private List<Integer> isVariable;

            public isConstructor(List<Integer> isParameter, org.apache.thrift.async.AsyncMethodCallback<stopDownloads_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                stopDownloads_args isVariable = new stopDownloads_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<setPackageName_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            setPackageName_call isVariable = new setPackageName_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            private String isVariable;

            public isConstructor(int isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<setPackageName_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                setPackageName_args isVariable = new setPackageName_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(Destination isParameter, int isParameter, org.apache.thrift.async.AsyncMethodCallback<movePackage_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            movePackage_call isVariable = new movePackage_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private Destination isVariable;

            private int isVariable;

            public isConstructor(Destination isParameter, int isParameter, org.apache.thrift.async.AsyncMethodCallback<movePackage_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                movePackage_args isVariable = new movePackage_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(List<Integer> isParameter, int isParameter, org.apache.thrift.async.AsyncMethodCallback<moveFiles_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            moveFiles_call isVariable = new moveFiles_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private List<Integer> isVariable;

            private int isVariable;

            public isConstructor(List<Integer> isParameter, int isParameter, org.apache.thrift.async.AsyncMethodCallback<moveFiles_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                moveFiles_args isVariable = new moveFiles_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, short isParameter, org.apache.thrift.async.AsyncMethodCallback<orderPackage_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            orderPackage_call isVariable = new orderPackage_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            private short isVariable;

            public isConstructor(int isParameter, short isParameter, org.apache.thrift.async.AsyncMethodCallback<orderPackage_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                orderPackage_args isVariable = new orderPackage_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, short isParameter, org.apache.thrift.async.AsyncMethodCallback<orderFile_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            orderFile_call isVariable = new orderFile_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            private short isVariable;

            public isConstructor(int isParameter, short isParameter, org.apache.thrift.async.AsyncMethodCallback<orderFile_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                orderFile_args isVariable = new orderFile_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, Map<String, String> isParameter, org.apache.thrift.async.AsyncMethodCallback<setPackageData_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            setPackageData_call isVariable = new setPackageData_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            private Map<String, String> isVariable;

            public isConstructor(int isParameter, Map<String, String> isParameter, org.apache.thrift.async.AsyncMethodCallback<setPackageData_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                setPackageData_args isVariable = new setPackageData_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws PackageDoesNotExists, org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<deleteFinished_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            deleteFinished_call isVariable = new deleteFinished_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<deleteFinished_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                deleteFinished_args isVariable = new deleteFinished_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public List<Integer> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<restartFailed_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            restartFailed_call isVariable = new restartFailed_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<restartFailed_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                restartFailed_args isVariable = new restartFailed_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<isCaptchaWaiting_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            isCaptchaWaiting_call isVariable = new isCaptchaWaiting_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<isCaptchaWaiting_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                isCaptchaWaiting_args isVariable = new isCaptchaWaiting_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public boolean isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(boolean isParameter, org.apache.thrift.async.AsyncMethodCallback<getCaptchaTask_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getCaptchaTask_call isVariable = new getCaptchaTask_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private boolean isVariable;

            public isConstructor(boolean isParameter, org.apache.thrift.async.AsyncMethodCallback<getCaptchaTask_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getCaptchaTask_args isVariable = new getCaptchaTask_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public CaptchaTask isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, org.apache.thrift.async.AsyncMethodCallback<getCaptchaTaskStatus_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getCaptchaTaskStatus_call isVariable = new getCaptchaTaskStatus_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            public isConstructor(int isParameter, org.apache.thrift.async.AsyncMethodCallback<getCaptchaTaskStatus_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getCaptchaTaskStatus_args isVariable = new getCaptchaTaskStatus_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public String isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(int isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<setCaptchaResult_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            setCaptchaResult_call isVariable = new setCaptchaResult_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private int isVariable;

            private String isVariable;

            public isConstructor(int isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<setCaptchaResult_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                setCaptchaResult_args isVariable = new setCaptchaResult_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(String isParameter, org.apache.thrift.async.AsyncMethodCallback<getEvents_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getEvents_call isVariable = new getEvents_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private String isVariable;

            public isConstructor(String isParameter, org.apache.thrift.async.AsyncMethodCallback<getEvents_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getEvents_args isVariable = new getEvents_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public List<EventInfo> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(boolean isParameter, org.apache.thrift.async.AsyncMethodCallback<getAccounts_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getAccounts_call isVariable = new getAccounts_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private boolean isVariable;

            public isConstructor(boolean isParameter, org.apache.thrift.async.AsyncMethodCallback<getAccounts_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getAccounts_args isVariable = new getAccounts_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public List<AccountInfo> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<getAccountTypes_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getAccountTypes_call isVariable = new getAccountTypes_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<getAccountTypes_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getAccountTypes_args isVariable = new getAccountTypes_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public List<String> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(String isParameter, String isParameter, String isParameter, Map<String, String> isParameter, org.apache.thrift.async.AsyncMethodCallback<updateAccount_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            updateAccount_call isVariable = new updateAccount_call(isNameExpr, isNameExpr, isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private String isVariable;

            private String isVariable;

            private String isVariable;

            private Map<String, String> isVariable;

            public isConstructor(String isParameter, String isParameter, String isParameter, Map<String, String> isParameter, org.apache.thrift.async.AsyncMethodCallback<updateAccount_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                updateAccount_args isVariable = new updateAccount_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<removeAccount_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            removeAccount_call isVariable = new removeAccount_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private String isVariable;

            private String isVariable;

            public isConstructor(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<removeAccount_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                removeAccount_args isVariable = new removeAccount_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public void isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<login_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            login_call isVariable = new login_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private String isVariable;

            private String isVariable;

            public isConstructor(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<login_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                login_args isVariable = new login_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public boolean isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<getUserData_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getUserData_call isVariable = new getUserData_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private String isVariable;

            private String isVariable;

            public isConstructor(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<getUserData_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getUserData_args isVariable = new getUserData_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public UserData isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<getAllUserData_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getAllUserData_call isVariable = new getAllUserData_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<getAllUserData_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getAllUserData_args isVariable = new getAllUserData_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public Map<String, UserData> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<getServices_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getServices_call isVariable = new getServices_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<getServices_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getServices_args isVariable = new getServices_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public Map<String, Map<String, String>> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<hasService_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            hasService_call isVariable = new hasService_call(isNameExpr, isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private String isVariable;

            private String isVariable;

            public isConstructor(String isParameter, String isParameter, org.apache.thrift.async.AsyncMethodCallback<hasService_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                hasService_args isVariable = new hasService_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public boolean isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(ServiceCall isParameter, org.apache.thrift.async.AsyncMethodCallback<call_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            call_call isVariable = new call_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private ServiceCall isVariable;

            public isConstructor(ServiceCall isParameter, org.apache.thrift.async.AsyncMethodCallback<call_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                call_args isVariable = new call_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public String isMethod() throws ServiceDoesNotExists, ServiceException, org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(org.apache.thrift.async.AsyncMethodCallback<getAllInfo_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getAllInfo_call isVariable = new getAllInfo_call(isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            public isConstructor(org.apache.thrift.async.AsyncMethodCallback<getAllInfo_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getAllInfo_args isVariable = new getAllInfo_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public Map<String, Map<String, String>> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }

        public void isMethod(String isParameter, org.apache.thrift.async.AsyncMethodCallback<getInfoByPlugin_call> isParameter) throws org.apache.thrift.TException {
            isMethod();
            getInfoByPlugin_call isVariable = new getInfoByPlugin_call(isNameExpr, isNameExpr, this, isNameExpr, isNameExpr);
            this.isFieldAccessExpr = isNameExpr;
            isNameExpr.isMethod(isNameExpr);
        }

        public static class isClassOrIsInterface extends org.apache.thrift.async.TAsyncMethodCall {

            private String isVariable;

            public isConstructor(String isParameter, org.apache.thrift.async.AsyncMethodCallback<getInfoByPlugin_call> isParameter, org.apache.thrift.async.TAsyncClient isParameter, org.apache.thrift.protocol.TProtocolFactory isParameter, org.apache.thrift.transport.TNonblockingTransport isParameter) throws org.apache.thrift.TException {
                super(isNameExpr, isNameExpr, isNameExpr, isNameExpr, true);
                this.isFieldAccessExpr = isNameExpr;
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod(new org.apache.thrift.protocol.TMessage("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isIntegerConstant));
                getInfoByPlugin_args isVariable = new getInfoByPlugin_args();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
            }

            public Map<String, String> isMethod() throws org.apache.thrift.TException {
                if (isMethod() != isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                    throw new IllegalStateException("isStringConstant");
                }
                org.apache.thrift.transport.TMemoryInputTransport isVariable = new org.apache.thrift.transport.TMemoryInputTransport(isMethod().isMethod());
                org.apache.thrift.protocol.TProtocol isVariable = isNameExpr.isMethod().isMethod(isNameExpr);
                return (new Client(isNameExpr)).isMethod();
            }
        }
    }

    public static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {

        private static final Logger isVariable = isNameExpr.isMethod(Processor.class.isMethod());

        public isConstructor(I isParameter) {
            super(isNameExpr, isMethod(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected isConstructor(I isParameter, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> isParameter) {
            super(isNameExpr, isMethod(isNameExpr));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> isMethod(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> isParameter) {
            isNameExpr.isMethod("isStringConstant", new getConfigValue());
            isNameExpr.isMethod("isStringConstant", new setConfigValue());
            isNameExpr.isMethod("isStringConstant", new getConfig());
            isNameExpr.isMethod("isStringConstant", new getPluginConfig());
            isNameExpr.isMethod("isStringConstant", new pauseServer());
            isNameExpr.isMethod("isStringConstant", new unpauseServer());
            isNameExpr.isMethod("isStringConstant", new togglePause());
            isNameExpr.isMethod("isStringConstant", new statusServer());
            isNameExpr.isMethod("isStringConstant", new freeSpace());
            isNameExpr.isMethod("isStringConstant", new getServerVersion());
            isNameExpr.isMethod("isStringConstant", new kill());
            isNameExpr.isMethod("isStringConstant", new restart());
            isNameExpr.isMethod("isStringConstant", new getLog());
            isNameExpr.isMethod("isStringConstant", new isTimeDownload());
            isNameExpr.isMethod("isStringConstant", new isTimeReconnect());
            isNameExpr.isMethod("isStringConstant", new toggleReconnect());
            isNameExpr.isMethod("isStringConstant", new generatePackages());
            isNameExpr.isMethod("isStringConstant", new checkURLs());
            isNameExpr.isMethod("isStringConstant", new parseURLs());
            isNameExpr.isMethod("isStringConstant", new checkOnlineStatus());
            isNameExpr.isMethod("isStringConstant", new checkOnlineStatusContainer());
            isNameExpr.isMethod("isStringConstant", new pollResults());
            isNameExpr.isMethod("isStringConstant", new statusDownloads());
            isNameExpr.isMethod("isStringConstant", new getPackageData());
            isNameExpr.isMethod("isStringConstant", new getPackageInfo());
            isNameExpr.isMethod("isStringConstant", new getFileData());
            isNameExpr.isMethod("isStringConstant", new getQueue());
            isNameExpr.isMethod("isStringConstant", new getCollector());
            isNameExpr.isMethod("isStringConstant", new getQueueData());
            isNameExpr.isMethod("isStringConstant", new getCollectorData());
            isNameExpr.isMethod("isStringConstant", new getPackageOrder());
            isNameExpr.isMethod("isStringConstant", new getFileOrder());
            isNameExpr.isMethod("isStringConstant", new generateAndAddPackages());
            isNameExpr.isMethod("isStringConstant", new addPackage());
            isNameExpr.isMethod("isStringConstant", new addFiles());
            isNameExpr.isMethod("isStringConstant", new uploadContainer());
            isNameExpr.isMethod("isStringConstant", new deleteFiles());
            isNameExpr.isMethod("isStringConstant", new deletePackages());
            isNameExpr.isMethod("isStringConstant", new pushToQueue());
            isNameExpr.isMethod("isStringConstant", new pullFromQueue());
            isNameExpr.isMethod("isStringConstant", new restartPackage());
            isNameExpr.isMethod("isStringConstant", new restartFile());
            isNameExpr.isMethod("isStringConstant", new recheckPackage());
            isNameExpr.isMethod("isStringConstant", new stopAllDownloads());
            isNameExpr.isMethod("isStringConstant", new stopDownloads());
            isNameExpr.isMethod("isStringConstant", new setPackageName());
            isNameExpr.isMethod("isStringConstant", new movePackage());
            isNameExpr.isMethod("isStringConstant", new moveFiles());
            isNameExpr.isMethod("isStringConstant", new orderPackage());
            isNameExpr.isMethod("isStringConstant", new orderFile());
            isNameExpr.isMethod("isStringConstant", new setPackageData());
            isNameExpr.isMethod("isStringConstant", new deleteFinished());
            isNameExpr.isMethod("isStringConstant", new restartFailed());
            isNameExpr.isMethod("isStringConstant", new isCaptchaWaiting());
            isNameExpr.isMethod("isStringConstant", new getCaptchaTask());
            isNameExpr.isMethod("isStringConstant", new getCaptchaTaskStatus());
            isNameExpr.isMethod("isStringConstant", new setCaptchaResult());
            isNameExpr.isMethod("isStringConstant", new getEvents());
            isNameExpr.isMethod("isStringConstant", new getAccounts());
            isNameExpr.isMethod("isStringConstant", new getAccountTypes());
            isNameExpr.isMethod("isStringConstant", new updateAccount());
            isNameExpr.isMethod("isStringConstant", new removeAccount());
            isNameExpr.isMethod("isStringConstant", new login());
            isNameExpr.isMethod("isStringConstant", new getUserData());
            isNameExpr.isMethod("isStringConstant", new getAllUserData());
            isNameExpr.isMethod("isStringConstant", new getServices());
            isNameExpr.isMethod("isStringConstant", new hasService());
            isNameExpr.isMethod("isStringConstant", new call());
            isNameExpr.isMethod("isStringConstant", new getAllInfo());
            isNameExpr.isMethod("isStringConstant", new getInfoByPlugin());
            return isNameExpr;
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getConfigValue_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getConfigValue_args isMethod() {
                return new getConfigValue_args();
            }

            protected getConfigValue_result isMethod(I isParameter, getConfigValue_args isParameter) throws org.apache.thrift.TException {
                getConfigValue_result isVariable = new getConfigValue_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setConfigValue_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected setConfigValue_args isMethod() {
                return new setConfigValue_args();
            }

            protected setConfigValue_result isMethod(I isParameter, setConfigValue_args isParameter) throws org.apache.thrift.TException {
                setConfigValue_result isVariable = new setConfigValue_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getConfig_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getConfig_args isMethod() {
                return new getConfig_args();
            }

            protected getConfig_result isMethod(I isParameter, getConfig_args isParameter) throws org.apache.thrift.TException {
                getConfig_result isVariable = new getConfig_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPluginConfig_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getPluginConfig_args isMethod() {
                return new getPluginConfig_args();
            }

            protected getPluginConfig_result isMethod(I isParameter, getPluginConfig_args isParameter) throws org.apache.thrift.TException {
                getPluginConfig_result isVariable = new getPluginConfig_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pauseServer_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected pauseServer_args isMethod() {
                return new pauseServer_args();
            }

            protected pauseServer_result isMethod(I isParameter, pauseServer_args isParameter) throws org.apache.thrift.TException {
                pauseServer_result isVariable = new pauseServer_result();
                isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unpauseServer_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected unpauseServer_args isMethod() {
                return new unpauseServer_args();
            }

            protected unpauseServer_result isMethod(I isParameter, unpauseServer_args isParameter) throws org.apache.thrift.TException {
                unpauseServer_result isVariable = new unpauseServer_result();
                isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, togglePause_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected togglePause_args isMethod() {
                return new togglePause_args();
            }

            protected togglePause_result isMethod(I isParameter, togglePause_args isParameter) throws org.apache.thrift.TException {
                togglePause_result isVariable = new togglePause_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                isNameExpr.isMethod(true);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statusServer_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected statusServer_args isMethod() {
                return new statusServer_args();
            }

            protected statusServer_result isMethod(I isParameter, statusServer_args isParameter) throws org.apache.thrift.TException {
                statusServer_result isVariable = new statusServer_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, freeSpace_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected freeSpace_args isMethod() {
                return new freeSpace_args();
            }

            protected freeSpace_result isMethod(I isParameter, freeSpace_args isParameter) throws org.apache.thrift.TException {
                freeSpace_result isVariable = new freeSpace_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                isNameExpr.isMethod(true);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getServerVersion_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getServerVersion_args isMethod() {
                return new getServerVersion_args();
            }

            protected getServerVersion_result isMethod(I isParameter, getServerVersion_args isParameter) throws org.apache.thrift.TException {
                getServerVersion_result isVariable = new getServerVersion_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, kill_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected kill_args isMethod() {
                return new kill_args();
            }

            protected kill_result isMethod(I isParameter, kill_args isParameter) throws org.apache.thrift.TException {
                kill_result isVariable = new kill_result();
                isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restart_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected restart_args isMethod() {
                return new restart_args();
            }

            protected restart_result isMethod(I isParameter, restart_args isParameter) throws org.apache.thrift.TException {
                restart_result isVariable = new restart_result();
                isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLog_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getLog_args isMethod() {
                return new getLog_args();
            }

            protected getLog_result isMethod(I isParameter, getLog_args isParameter) throws org.apache.thrift.TException {
                getLog_result isVariable = new getLog_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isTimeDownload_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected isTimeDownload_args isMethod() {
                return new isTimeDownload_args();
            }

            protected isTimeDownload_result isMethod(I isParameter, isTimeDownload_args isParameter) throws org.apache.thrift.TException {
                isTimeDownload_result isVariable = new isTimeDownload_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                isNameExpr.isMethod(true);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isTimeReconnect_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected isTimeReconnect_args isMethod() {
                return new isTimeReconnect_args();
            }

            protected isTimeReconnect_result isMethod(I isParameter, isTimeReconnect_args isParameter) throws org.apache.thrift.TException {
                isTimeReconnect_result isVariable = new isTimeReconnect_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                isNameExpr.isMethod(true);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, toggleReconnect_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected toggleReconnect_args isMethod() {
                return new toggleReconnect_args();
            }

            protected toggleReconnect_result isMethod(I isParameter, toggleReconnect_args isParameter) throws org.apache.thrift.TException {
                toggleReconnect_result isVariable = new toggleReconnect_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                isNameExpr.isMethod(true);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generatePackages_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected generatePackages_args isMethod() {
                return new generatePackages_args();
            }

            protected generatePackages_result isMethod(I isParameter, generatePackages_args isParameter) throws org.apache.thrift.TException {
                generatePackages_result isVariable = new generatePackages_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkURLs_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected checkURLs_args isMethod() {
                return new checkURLs_args();
            }

            protected checkURLs_result isMethod(I isParameter, checkURLs_args isParameter) throws org.apache.thrift.TException {
                checkURLs_result isVariable = new checkURLs_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parseURLs_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected parseURLs_args isMethod() {
                return new parseURLs_args();
            }

            protected parseURLs_result isMethod(I isParameter, parseURLs_args isParameter) throws org.apache.thrift.TException {
                parseURLs_result isVariable = new parseURLs_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkOnlineStatus_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected checkOnlineStatus_args isMethod() {
                return new checkOnlineStatus_args();
            }

            protected checkOnlineStatus_result isMethod(I isParameter, checkOnlineStatus_args isParameter) throws org.apache.thrift.TException {
                checkOnlineStatus_result isVariable = new checkOnlineStatus_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkOnlineStatusContainer_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected checkOnlineStatusContainer_args isMethod() {
                return new checkOnlineStatusContainer_args();
            }

            protected checkOnlineStatusContainer_result isMethod(I isParameter, checkOnlineStatusContainer_args isParameter) throws org.apache.thrift.TException {
                checkOnlineStatusContainer_result isVariable = new checkOnlineStatusContainer_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pollResults_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected pollResults_args isMethod() {
                return new pollResults_args();
            }

            protected pollResults_result isMethod(I isParameter, pollResults_args isParameter) throws org.apache.thrift.TException {
                pollResults_result isVariable = new pollResults_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statusDownloads_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected statusDownloads_args isMethod() {
                return new statusDownloads_args();
            }

            protected statusDownloads_result isMethod(I isParameter, statusDownloads_args isParameter) throws org.apache.thrift.TException {
                statusDownloads_result isVariable = new statusDownloads_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPackageData_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getPackageData_args isMethod() {
                return new getPackageData_args();
            }

            protected getPackageData_result isMethod(I isParameter, getPackageData_args isParameter) throws org.apache.thrift.TException {
                getPackageData_result isVariable = new getPackageData_result();
                try {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                } catch (PackageDoesNotExists isParameter) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPackageInfo_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getPackageInfo_args isMethod() {
                return new getPackageInfo_args();
            }

            protected getPackageInfo_result isMethod(I isParameter, getPackageInfo_args isParameter) throws org.apache.thrift.TException {
                getPackageInfo_result isVariable = new getPackageInfo_result();
                try {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                } catch (PackageDoesNotExists isParameter) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFileData_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getFileData_args isMethod() {
                return new getFileData_args();
            }

            protected getFileData_result isMethod(I isParameter, getFileData_args isParameter) throws org.apache.thrift.TException {
                getFileData_result isVariable = new getFileData_result();
                try {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                } catch (FileDoesNotExists isParameter) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQueue_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getQueue_args isMethod() {
                return new getQueue_args();
            }

            protected getQueue_result isMethod(I isParameter, getQueue_args isParameter) throws org.apache.thrift.TException {
                getQueue_result isVariable = new getQueue_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollector_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getCollector_args isMethod() {
                return new getCollector_args();
            }

            protected getCollector_result isMethod(I isParameter, getCollector_args isParameter) throws org.apache.thrift.TException {
                getCollector_result isVariable = new getCollector_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQueueData_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getQueueData_args isMethod() {
                return new getQueueData_args();
            }

            protected getQueueData_result isMethod(I isParameter, getQueueData_args isParameter) throws org.apache.thrift.TException {
                getQueueData_result isVariable = new getQueueData_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollectorData_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getCollectorData_args isMethod() {
                return new getCollectorData_args();
            }

            protected getCollectorData_result isMethod(I isParameter, getCollectorData_args isParameter) throws org.apache.thrift.TException {
                getCollectorData_result isVariable = new getCollectorData_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPackageOrder_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getPackageOrder_args isMethod() {
                return new getPackageOrder_args();
            }

            protected getPackageOrder_result isMethod(I isParameter, getPackageOrder_args isParameter) throws org.apache.thrift.TException {
                getPackageOrder_result isVariable = new getPackageOrder_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFileOrder_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getFileOrder_args isMethod() {
                return new getFileOrder_args();
            }

            protected getFileOrder_result isMethod(I isParameter, getFileOrder_args isParameter) throws org.apache.thrift.TException {
                getFileOrder_result isVariable = new getFileOrder_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateAndAddPackages_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected generateAndAddPackages_args isMethod() {
                return new generateAndAddPackages_args();
            }

            protected generateAndAddPackages_result isMethod(I isParameter, generateAndAddPackages_args isParameter) throws org.apache.thrift.TException {
                generateAndAddPackages_result isVariable = new generateAndAddPackages_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPackage_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected addPackage_args isMethod() {
                return new addPackage_args();
            }

            protected addPackage_result isMethod(I isParameter, addPackage_args isParameter) throws org.apache.thrift.TException {
                addPackage_result isVariable = new addPackage_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod(true);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFiles_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected addFiles_args isMethod() {
                return new addFiles_args();
            }

            protected addFiles_result isMethod(I isParameter, addFiles_args isParameter) throws org.apache.thrift.TException {
                addFiles_result isVariable = new addFiles_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadContainer_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected uploadContainer_args isMethod() {
                return new uploadContainer_args();
            }

            protected uploadContainer_result isMethod(I isParameter, uploadContainer_args isParameter) throws org.apache.thrift.TException {
                uploadContainer_result isVariable = new uploadContainer_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFiles_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected deleteFiles_args isMethod() {
                return new deleteFiles_args();
            }

            protected deleteFiles_result isMethod(I isParameter, deleteFiles_args isParameter) throws org.apache.thrift.TException {
                deleteFiles_result isVariable = new deleteFiles_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deletePackages_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected deletePackages_args isMethod() {
                return new deletePackages_args();
            }

            protected deletePackages_result isMethod(I isParameter, deletePackages_args isParameter) throws org.apache.thrift.TException {
                deletePackages_result isVariable = new deletePackages_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pushToQueue_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected pushToQueue_args isMethod() {
                return new pushToQueue_args();
            }

            protected pushToQueue_result isMethod(I isParameter, pushToQueue_args isParameter) throws org.apache.thrift.TException {
                pushToQueue_result isVariable = new pushToQueue_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pullFromQueue_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected pullFromQueue_args isMethod() {
                return new pullFromQueue_args();
            }

            protected pullFromQueue_result isMethod(I isParameter, pullFromQueue_args isParameter) throws org.apache.thrift.TException {
                pullFromQueue_result isVariable = new pullFromQueue_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restartPackage_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected restartPackage_args isMethod() {
                return new restartPackage_args();
            }

            protected restartPackage_result isMethod(I isParameter, restartPackage_args isParameter) throws org.apache.thrift.TException {
                restartPackage_result isVariable = new restartPackage_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restartFile_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected restartFile_args isMethod() {
                return new restartFile_args();
            }

            protected restartFile_result isMethod(I isParameter, restartFile_args isParameter) throws org.apache.thrift.TException {
                restartFile_result isVariable = new restartFile_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recheckPackage_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected recheckPackage_args isMethod() {
                return new recheckPackage_args();
            }

            protected recheckPackage_result isMethod(I isParameter, recheckPackage_args isParameter) throws org.apache.thrift.TException {
                recheckPackage_result isVariable = new recheckPackage_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopAllDownloads_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected stopAllDownloads_args isMethod() {
                return new stopAllDownloads_args();
            }

            protected stopAllDownloads_result isMethod(I isParameter, stopAllDownloads_args isParameter) throws org.apache.thrift.TException {
                stopAllDownloads_result isVariable = new stopAllDownloads_result();
                isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopDownloads_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected stopDownloads_args isMethod() {
                return new stopDownloads_args();
            }

            protected stopDownloads_result isMethod(I isParameter, stopDownloads_args isParameter) throws org.apache.thrift.TException {
                stopDownloads_result isVariable = new stopDownloads_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPackageName_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected setPackageName_args isMethod() {
                return new setPackageName_args();
            }

            protected setPackageName_result isMethod(I isParameter, setPackageName_args isParameter) throws org.apache.thrift.TException {
                setPackageName_result isVariable = new setPackageName_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, movePackage_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected movePackage_args isMethod() {
                return new movePackage_args();
            }

            protected movePackage_result isMethod(I isParameter, movePackage_args isParameter) throws org.apache.thrift.TException {
                movePackage_result isVariable = new movePackage_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, moveFiles_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected moveFiles_args isMethod() {
                return new moveFiles_args();
            }

            protected moveFiles_result isMethod(I isParameter, moveFiles_args isParameter) throws org.apache.thrift.TException {
                moveFiles_result isVariable = new moveFiles_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, orderPackage_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected orderPackage_args isMethod() {
                return new orderPackage_args();
            }

            protected orderPackage_result isMethod(I isParameter, orderPackage_args isParameter) throws org.apache.thrift.TException {
                orderPackage_result isVariable = new orderPackage_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, orderFile_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected orderFile_args isMethod() {
                return new orderFile_args();
            }

            protected orderFile_result isMethod(I isParameter, orderFile_args isParameter) throws org.apache.thrift.TException {
                orderFile_result isVariable = new orderFile_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPackageData_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected setPackageData_args isMethod() {
                return new setPackageData_args();
            }

            protected setPackageData_result isMethod(I isParameter, setPackageData_args isParameter) throws org.apache.thrift.TException {
                setPackageData_result isVariable = new setPackageData_result();
                try {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                } catch (PackageDoesNotExists isParameter) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFinished_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected deleteFinished_args isMethod() {
                return new deleteFinished_args();
            }

            protected deleteFinished_result isMethod(I isParameter, deleteFinished_args isParameter) throws org.apache.thrift.TException {
                deleteFinished_result isVariable = new deleteFinished_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restartFailed_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected restartFailed_args isMethod() {
                return new restartFailed_args();
            }

            protected restartFailed_result isMethod(I isParameter, restartFailed_args isParameter) throws org.apache.thrift.TException {
                restartFailed_result isVariable = new restartFailed_result();
                isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isCaptchaWaiting_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected isCaptchaWaiting_args isMethod() {
                return new isCaptchaWaiting_args();
            }

            protected isCaptchaWaiting_result isMethod(I isParameter, isCaptchaWaiting_args isParameter) throws org.apache.thrift.TException {
                isCaptchaWaiting_result isVariable = new isCaptchaWaiting_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                isNameExpr.isMethod(true);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCaptchaTask_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getCaptchaTask_args isMethod() {
                return new getCaptchaTask_args();
            }

            protected getCaptchaTask_result isMethod(I isParameter, getCaptchaTask_args isParameter) throws org.apache.thrift.TException {
                getCaptchaTask_result isVariable = new getCaptchaTask_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCaptchaTaskStatus_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getCaptchaTaskStatus_args isMethod() {
                return new getCaptchaTaskStatus_args();
            }

            protected getCaptchaTaskStatus_result isMethod(I isParameter, getCaptchaTaskStatus_args isParameter) throws org.apache.thrift.TException {
                getCaptchaTaskStatus_result isVariable = new getCaptchaTaskStatus_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setCaptchaResult_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected setCaptchaResult_args isMethod() {
                return new setCaptchaResult_args();
            }

            protected setCaptchaResult_result isMethod(I isParameter, setCaptchaResult_args isParameter) throws org.apache.thrift.TException {
                setCaptchaResult_result isVariable = new setCaptchaResult_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEvents_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getEvents_args isMethod() {
                return new getEvents_args();
            }

            protected getEvents_result isMethod(I isParameter, getEvents_args isParameter) throws org.apache.thrift.TException {
                getEvents_result isVariable = new getEvents_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAccounts_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getAccounts_args isMethod() {
                return new getAccounts_args();
            }

            protected getAccounts_result isMethod(I isParameter, getAccounts_args isParameter) throws org.apache.thrift.TException {
                getAccounts_result isVariable = new getAccounts_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAccountTypes_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getAccountTypes_args isMethod() {
                return new getAccountTypes_args();
            }

            protected getAccountTypes_result isMethod(I isParameter, getAccountTypes_args isParameter) throws org.apache.thrift.TException {
                getAccountTypes_result isVariable = new getAccountTypes_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAccount_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected updateAccount_args isMethod() {
                return new updateAccount_args();
            }

            protected updateAccount_result isMethod(I isParameter, updateAccount_args isParameter) throws org.apache.thrift.TException {
                updateAccount_result isVariable = new updateAccount_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeAccount_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected removeAccount_args isMethod() {
                return new removeAccount_args();
            }

            protected removeAccount_result isMethod(I isParameter, removeAccount_args isParameter) throws org.apache.thrift.TException {
                removeAccount_result isVariable = new removeAccount_result();
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected login_args isMethod() {
                return new login_args();
            }

            protected login_result isMethod(I isParameter, login_args isParameter) throws org.apache.thrift.TException {
                login_result isVariable = new login_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod(true);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserData_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getUserData_args isMethod() {
                return new getUserData_args();
            }

            protected getUserData_result isMethod(I isParameter, getUserData_args isParameter) throws org.apache.thrift.TException {
                getUserData_result isVariable = new getUserData_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllUserData_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getAllUserData_args isMethod() {
                return new getAllUserData_args();
            }

            protected getAllUserData_result isMethod(I isParameter, getAllUserData_args isParameter) throws org.apache.thrift.TException {
                getAllUserData_result isVariable = new getAllUserData_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getServices_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getServices_args isMethod() {
                return new getServices_args();
            }

            protected getServices_result isMethod(I isParameter, getServices_args isParameter) throws org.apache.thrift.TException {
                getServices_result isVariable = new getServices_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hasService_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected hasService_args isMethod() {
                return new hasService_args();
            }

            protected hasService_result isMethod(I isParameter, hasService_args isParameter) throws org.apache.thrift.TException {
                hasService_result isVariable = new hasService_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod(true);
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, call_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected call_args isMethod() {
                return new call_args();
            }

            protected call_result isMethod(I isParameter, call_args isParameter) throws org.apache.thrift.TException {
                call_result isVariable = new call_result();
                try {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                } catch (ServiceDoesNotExists isParameter) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                } catch (ServiceException isParameter) {
                    isNameExpr.isFieldAccessExpr = isNameExpr;
                }
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllInfo_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getAllInfo_args isMethod() {
                return new getAllInfo_args();
            }

            protected getAllInfo_result isMethod(I isParameter, getAllInfo_args isParameter) throws org.apache.thrift.TException {
                getAllInfo_result isVariable = new getAllInfo_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                return isNameExpr;
            }
        }

        private static class isClassOrIsInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInfoByPlugin_args> {

            public isConstructor() {
                super("isStringConstant");
            }

            protected getInfoByPlugin_args isMethod() {
                return new getInfoByPlugin_args();
            }

            protected getInfoByPlugin_result isMethod(I isParameter, getInfoByPlugin_args isParameter) throws org.apache.thrift.TException {
                getInfoByPlugin_result isVariable = new getInfoByPlugin_result();
                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                return isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getConfigValue_args, getConfigValue_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getConfigValue_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getConfigValue_argsTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        // isComment
        public String isVariable;

        // isComment
        public String isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            CATEGORY((short) isIntegerConstant, "isStringConstant"), OPTION((short) isIntegerConstant, "isStringConstant"), SECTION((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getConfigValue_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter, String isParameter, String isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getConfigValue_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public getConfigValue_args isMethod() {
            return new getConfigValue_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public getConfigValue_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public getConfigValue_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public getConfigValue_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getConfigValue_args)
                return this.isMethod((getConfigValue_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getConfigValue_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getConfigValue_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getConfigValue_args isVariable = (getConfigValue_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getConfigValue_argsStandardScheme isMethod() {
                return new getConfigValue_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getConfigValue_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfigValue_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfigValue_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getConfigValue_argsTupleScheme isMethod() {
                return new getConfigValue_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getConfigValue_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfigValue_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfigValue_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getConfigValue_result, getConfigValue_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getConfigValue_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getConfigValue_resultTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getConfigValue_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getConfigValue_result isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public getConfigValue_result isMethod() {
            return new getConfigValue_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public getConfigValue_result isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getConfigValue_result)
                return this.isMethod((getConfigValue_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getConfigValue_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getConfigValue_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getConfigValue_result isVariable = (getConfigValue_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getConfigValue_resultStandardScheme isMethod() {
                return new getConfigValue_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getConfigValue_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfigValue_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfigValue_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getConfigValue_resultTupleScheme isMethod() {
                return new getConfigValue_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getConfigValue_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfigValue_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfigValue_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<setConfigValue_args, setConfigValue_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new setConfigValue_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new setConfigValue_argsTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        // isComment
        public String isVariable;

        // isComment
        public String isVariable;

        // isComment
        public String isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            CATEGORY((short) isIntegerConstant, "isStringConstant"), OPTION((short) isIntegerConstant, "isStringConstant"), VALUE((short) isIntegerConstant, "isStringConstant"), SECTION((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(setConfigValue_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter, String isParameter, String isParameter, String isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(setConfigValue_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public setConfigValue_args isMethod() {
            return new setConfigValue_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public setConfigValue_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public setConfigValue_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public setConfigValue_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public setConfigValue_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof setConfigValue_args)
                return this.isMethod((setConfigValue_args) isNameExpr);
            return true;
        }

        public boolean isMethod(setConfigValue_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(setConfigValue_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            setConfigValue_args isVariable = (setConfigValue_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setConfigValue_argsStandardScheme isMethod() {
                return new setConfigValue_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<setConfigValue_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setConfigValue_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setConfigValue_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setConfigValue_argsTupleScheme isMethod() {
                return new setConfigValue_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<setConfigValue_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setConfigValue_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setConfigValue_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<setConfigValue_result, setConfigValue_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new setConfigValue_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new setConfigValue_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(setConfigValue_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(setConfigValue_result isParameter) {
        }

        public setConfigValue_result isMethod() {
            return new setConfigValue_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof setConfigValue_result)
                return this.isMethod((setConfigValue_result) isNameExpr);
            return true;
        }

        public boolean isMethod(setConfigValue_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(setConfigValue_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            setConfigValue_result isVariable = (setConfigValue_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setConfigValue_resultStandardScheme isMethod() {
                return new setConfigValue_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<setConfigValue_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setConfigValue_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setConfigValue_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setConfigValue_resultTupleScheme isMethod() {
                return new setConfigValue_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<setConfigValue_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setConfigValue_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setConfigValue_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getConfig_args, getConfig_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getConfig_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getConfig_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getConfig_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(getConfig_args isParameter) {
        }

        public getConfig_args isMethod() {
            return new getConfig_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getConfig_args)
                return this.isMethod((getConfig_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getConfig_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getConfig_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getConfig_args isVariable = (getConfig_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getConfig_argsStandardScheme isMethod() {
                return new getConfig_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getConfig_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfig_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfig_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getConfig_argsTupleScheme isMethod() {
                return new getConfig_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getConfig_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfig_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfig_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getConfig_result, getConfig_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getConfig_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getConfig_resultTupleSchemeFactory());
        }

        // isComment
        public Map<String, ConfigSection> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr), new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, ConfigSection.class))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getConfig_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(Map<String, ConfigSection> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getConfig_result isParameter) {
            if (isNameExpr.isMethod()) {
                Map<String, ConfigSection> isVariable = new HashMap<String, ConfigSection>();
                for (Map.Entry<String, ConfigSection> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                    String isVariable = isNameExpr.isMethod();
                    ConfigSection isVariable = isNameExpr.isMethod();
                    String isVariable = isNameExpr;
                    ConfigSection isVariable = new ConfigSection(isNameExpr);
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getConfig_result isMethod() {
            return new getConfig_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter, ConfigSection isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new HashMap<String, ConfigSection>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
        }

        public Map<String, ConfigSection> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getConfig_result isMethod(Map<String, ConfigSection> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Map<String, ConfigSection>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getConfig_result)
                return this.isMethod((getConfig_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getConfig_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getConfig_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getConfig_result isVariable = (getConfig_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getConfig_resultStandardScheme isMethod() {
                return new getConfig_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getConfig_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfig_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new HashMap<String, ConfigSection>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        // isComment
                                        ConfigSection isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr = new ConfigSection();
                                        isNameExpr.isMethod(isNameExpr);
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfig_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (Map.Entry<String, ConfigSection> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod().isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getConfig_resultTupleScheme isMethod() {
                return new getConfig_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getConfig_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfig_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (Map.Entry<String, ConfigSection> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod().isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getConfig_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new HashMap<String, ConfigSection>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            // isComment
                            ConfigSection isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr = new ConfigSection();
                            isNameExpr.isMethod(isNameExpr);
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getPluginConfig_args, getPluginConfig_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getPluginConfig_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getPluginConfig_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getPluginConfig_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(getPluginConfig_args isParameter) {
        }

        public getPluginConfig_args isMethod() {
            return new getPluginConfig_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getPluginConfig_args)
                return this.isMethod((getPluginConfig_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getPluginConfig_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getPluginConfig_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getPluginConfig_args isVariable = (getPluginConfig_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPluginConfig_argsStandardScheme isMethod() {
                return new getPluginConfig_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getPluginConfig_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPluginConfig_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPluginConfig_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPluginConfig_argsTupleScheme isMethod() {
                return new getPluginConfig_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getPluginConfig_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPluginConfig_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPluginConfig_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getPluginConfig_result, getPluginConfig_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getPluginConfig_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getPluginConfig_resultTupleSchemeFactory());
        }

        // isComment
        public Map<String, ConfigSection> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr), new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, ConfigSection.class))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getPluginConfig_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(Map<String, ConfigSection> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getPluginConfig_result isParameter) {
            if (isNameExpr.isMethod()) {
                Map<String, ConfigSection> isVariable = new HashMap<String, ConfigSection>();
                for (Map.Entry<String, ConfigSection> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                    String isVariable = isNameExpr.isMethod();
                    ConfigSection isVariable = isNameExpr.isMethod();
                    String isVariable = isNameExpr;
                    ConfigSection isVariable = new ConfigSection(isNameExpr);
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getPluginConfig_result isMethod() {
            return new getPluginConfig_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter, ConfigSection isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new HashMap<String, ConfigSection>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
        }

        public Map<String, ConfigSection> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getPluginConfig_result isMethod(Map<String, ConfigSection> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Map<String, ConfigSection>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getPluginConfig_result)
                return this.isMethod((getPluginConfig_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getPluginConfig_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getPluginConfig_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getPluginConfig_result isVariable = (getPluginConfig_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPluginConfig_resultStandardScheme isMethod() {
                return new getPluginConfig_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getPluginConfig_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPluginConfig_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new HashMap<String, ConfigSection>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        // isComment
                                        ConfigSection isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr = new ConfigSection();
                                        isNameExpr.isMethod(isNameExpr);
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPluginConfig_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (Map.Entry<String, ConfigSection> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod().isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPluginConfig_resultTupleScheme isMethod() {
                return new getPluginConfig_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getPluginConfig_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPluginConfig_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (Map.Entry<String, ConfigSection> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod().isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPluginConfig_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new HashMap<String, ConfigSection>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            // isComment
                            ConfigSection isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr = new ConfigSection();
                            isNameExpr.isMethod(isNameExpr);
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<pauseServer_args, pauseServer_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new pauseServer_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new pauseServer_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(pauseServer_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(pauseServer_args isParameter) {
        }

        public pauseServer_args isMethod() {
            return new pauseServer_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof pauseServer_args)
                return this.isMethod((pauseServer_args) isNameExpr);
            return true;
        }

        public boolean isMethod(pauseServer_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(pauseServer_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            pauseServer_args isVariable = (pauseServer_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pauseServer_argsStandardScheme isMethod() {
                return new pauseServer_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<pauseServer_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pauseServer_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pauseServer_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pauseServer_argsTupleScheme isMethod() {
                return new pauseServer_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<pauseServer_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pauseServer_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pauseServer_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<pauseServer_result, pauseServer_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new pauseServer_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new pauseServer_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(pauseServer_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(pauseServer_result isParameter) {
        }

        public pauseServer_result isMethod() {
            return new pauseServer_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof pauseServer_result)
                return this.isMethod((pauseServer_result) isNameExpr);
            return true;
        }

        public boolean isMethod(pauseServer_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(pauseServer_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            pauseServer_result isVariable = (pauseServer_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pauseServer_resultStandardScheme isMethod() {
                return new pauseServer_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<pauseServer_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pauseServer_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pauseServer_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pauseServer_resultTupleScheme isMethod() {
                return new pauseServer_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<pauseServer_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pauseServer_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pauseServer_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<unpauseServer_args, unpauseServer_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new unpauseServer_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new unpauseServer_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(unpauseServer_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(unpauseServer_args isParameter) {
        }

        public unpauseServer_args isMethod() {
            return new unpauseServer_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof unpauseServer_args)
                return this.isMethod((unpauseServer_args) isNameExpr);
            return true;
        }

        public boolean isMethod(unpauseServer_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(unpauseServer_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            unpauseServer_args isVariable = (unpauseServer_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public unpauseServer_argsStandardScheme isMethod() {
                return new unpauseServer_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<unpauseServer_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, unpauseServer_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, unpauseServer_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public unpauseServer_argsTupleScheme isMethod() {
                return new unpauseServer_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<unpauseServer_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, unpauseServer_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, unpauseServer_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<unpauseServer_result, unpauseServer_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new unpauseServer_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new unpauseServer_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(unpauseServer_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(unpauseServer_result isParameter) {
        }

        public unpauseServer_result isMethod() {
            return new unpauseServer_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof unpauseServer_result)
                return this.isMethod((unpauseServer_result) isNameExpr);
            return true;
        }

        public boolean isMethod(unpauseServer_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(unpauseServer_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            unpauseServer_result isVariable = (unpauseServer_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public unpauseServer_resultStandardScheme isMethod() {
                return new unpauseServer_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<unpauseServer_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, unpauseServer_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, unpauseServer_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public unpauseServer_resultTupleScheme isMethod() {
                return new unpauseServer_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<unpauseServer_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, unpauseServer_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, unpauseServer_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<togglePause_args, togglePause_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new togglePause_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new togglePause_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(togglePause_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(togglePause_args isParameter) {
        }

        public togglePause_args isMethod() {
            return new togglePause_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof togglePause_args)
                return this.isMethod((togglePause_args) isNameExpr);
            return true;
        }

        public boolean isMethod(togglePause_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(togglePause_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            togglePause_args isVariable = (togglePause_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public togglePause_argsStandardScheme isMethod() {
                return new togglePause_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<togglePause_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, togglePause_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, togglePause_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public togglePause_argsTupleScheme isMethod() {
                return new togglePause_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<togglePause_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, togglePause_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, togglePause_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<togglePause_result, togglePause_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new togglePause_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new togglePause_resultTupleSchemeFactory());
        }

        // isComment
        public boolean isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(togglePause_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(boolean isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(togglePause_result isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public togglePause_result isMethod() {
            return new togglePause_result(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = true;
        }

        public boolean isMethod() {
            return this.isFieldAccessExpr;
        }

        public togglePause_result isMethod(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Boolean) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof togglePause_result)
                return this.isMethod((togglePause_result) isNameExpr);
            return true;
        }

        public boolean isMethod(togglePause_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(togglePause_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            togglePause_result isVariable = (togglePause_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public togglePause_resultStandardScheme isMethod() {
                return new togglePause_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<togglePause_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, togglePause_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, togglePause_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public togglePause_resultTupleScheme isMethod() {
                return new togglePause_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<togglePause_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, togglePause_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, togglePause_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<statusServer_args, statusServer_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new statusServer_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new statusServer_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(statusServer_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(statusServer_args isParameter) {
        }

        public statusServer_args isMethod() {
            return new statusServer_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof statusServer_args)
                return this.isMethod((statusServer_args) isNameExpr);
            return true;
        }

        public boolean isMethod(statusServer_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(statusServer_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            statusServer_args isVariable = (statusServer_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public statusServer_argsStandardScheme isMethod() {
                return new statusServer_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<statusServer_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusServer_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusServer_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public statusServer_argsTupleScheme isMethod() {
                return new statusServer_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<statusServer_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusServer_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusServer_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<statusServer_result, statusServer_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new statusServer_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new statusServer_resultTupleSchemeFactory());
        }

        // isComment
        public ServerStatus isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, ServerStatus.class)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(statusServer_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(ServerStatus isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(statusServer_result isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new ServerStatus(isNameExpr.isFieldAccessExpr);
            }
        }

        public statusServer_result isMethod() {
            return new statusServer_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public ServerStatus isMethod() {
            return this.isFieldAccessExpr;
        }

        public statusServer_result isMethod(ServerStatus isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((ServerStatus) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof statusServer_result)
                return this.isMethod((statusServer_result) isNameExpr);
            return true;
        }

        public boolean isMethod(statusServer_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(statusServer_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            statusServer_result isVariable = (statusServer_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public statusServer_resultStandardScheme isMethod() {
                return new statusServer_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<statusServer_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusServer_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new ServerStatus();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusServer_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public statusServer_resultTupleScheme isMethod() {
                return new statusServer_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<statusServer_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusServer_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusServer_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new ServerStatus();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<freeSpace_args, freeSpace_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new freeSpace_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new freeSpace_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(freeSpace_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(freeSpace_args isParameter) {
        }

        public freeSpace_args isMethod() {
            return new freeSpace_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof freeSpace_args)
                return this.isMethod((freeSpace_args) isNameExpr);
            return true;
        }

        public boolean isMethod(freeSpace_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(freeSpace_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            freeSpace_args isVariable = (freeSpace_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public freeSpace_argsStandardScheme isMethod() {
                return new freeSpace_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<freeSpace_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, freeSpace_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, freeSpace_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public freeSpace_argsTupleScheme isMethod() {
                return new freeSpace_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<freeSpace_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, freeSpace_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, freeSpace_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<freeSpace_result, freeSpace_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new freeSpace_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new freeSpace_resultTupleSchemeFactory());
        }

        // isComment
        public long isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(freeSpace_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(long isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(freeSpace_result isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public freeSpace_result isMethod() {
            return new freeSpace_result(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public long isMethod() {
            return this.isFieldAccessExpr;
        }

        public freeSpace_result isMethod(long isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Long) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof freeSpace_result)
                return this.isMethod((freeSpace_result) isNameExpr);
            return true;
        }

        public boolean isMethod(freeSpace_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(freeSpace_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            freeSpace_result isVariable = (freeSpace_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public freeSpace_resultStandardScheme isMethod() {
                return new freeSpace_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<freeSpace_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, freeSpace_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, freeSpace_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public freeSpace_resultTupleScheme isMethod() {
                return new freeSpace_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<freeSpace_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, freeSpace_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, freeSpace_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getServerVersion_args, getServerVersion_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getServerVersion_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getServerVersion_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getServerVersion_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(getServerVersion_args isParameter) {
        }

        public getServerVersion_args isMethod() {
            return new getServerVersion_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getServerVersion_args)
                return this.isMethod((getServerVersion_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getServerVersion_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getServerVersion_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getServerVersion_args isVariable = (getServerVersion_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getServerVersion_argsStandardScheme isMethod() {
                return new getServerVersion_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getServerVersion_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServerVersion_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServerVersion_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getServerVersion_argsTupleScheme isMethod() {
                return new getServerVersion_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getServerVersion_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServerVersion_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServerVersion_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getServerVersion_result, getServerVersion_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getServerVersion_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getServerVersion_resultTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getServerVersion_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getServerVersion_result isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public getServerVersion_result isMethod() {
            return new getServerVersion_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public getServerVersion_result isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getServerVersion_result)
                return this.isMethod((getServerVersion_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getServerVersion_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getServerVersion_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getServerVersion_result isVariable = (getServerVersion_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getServerVersion_resultStandardScheme isMethod() {
                return new getServerVersion_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getServerVersion_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServerVersion_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServerVersion_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getServerVersion_resultTupleScheme isMethod() {
                return new getServerVersion_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getServerVersion_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServerVersion_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServerVersion_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<kill_args, kill_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new kill_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new kill_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(kill_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(kill_args isParameter) {
        }

        public kill_args isMethod() {
            return new kill_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof kill_args)
                return this.isMethod((kill_args) isNameExpr);
            return true;
        }

        public boolean isMethod(kill_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(kill_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            kill_args isVariable = (kill_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public kill_argsStandardScheme isMethod() {
                return new kill_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<kill_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, kill_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, kill_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public kill_argsTupleScheme isMethod() {
                return new kill_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<kill_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, kill_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, kill_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<kill_result, kill_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new kill_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new kill_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(kill_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(kill_result isParameter) {
        }

        public kill_result isMethod() {
            return new kill_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof kill_result)
                return this.isMethod((kill_result) isNameExpr);
            return true;
        }

        public boolean isMethod(kill_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(kill_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            kill_result isVariable = (kill_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public kill_resultStandardScheme isMethod() {
                return new kill_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<kill_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, kill_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, kill_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public kill_resultTupleScheme isMethod() {
                return new kill_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<kill_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, kill_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, kill_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<restart_args, restart_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new restart_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new restart_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(restart_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(restart_args isParameter) {
        }

        public restart_args isMethod() {
            return new restart_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof restart_args)
                return this.isMethod((restart_args) isNameExpr);
            return true;
        }

        public boolean isMethod(restart_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(restart_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            restart_args isVariable = (restart_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restart_argsStandardScheme isMethod() {
                return new restart_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<restart_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restart_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restart_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restart_argsTupleScheme isMethod() {
                return new restart_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<restart_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restart_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restart_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<restart_result, restart_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new restart_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new restart_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(restart_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(restart_result isParameter) {
        }

        public restart_result isMethod() {
            return new restart_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof restart_result)
                return this.isMethod((restart_result) isNameExpr);
            return true;
        }

        public boolean isMethod(restart_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(restart_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            restart_result isVariable = (restart_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restart_resultStandardScheme isMethod() {
                return new restart_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<restart_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restart_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restart_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restart_resultTupleScheme isMethod() {
                return new restart_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<restart_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restart_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restart_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getLog_args, getLog_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getLog_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getLog_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            OFFSET((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getLog_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(getLog_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public getLog_args isMethod() {
            return new getLog_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public getLog_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getLog_args)
                return this.isMethod((getLog_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getLog_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getLog_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getLog_args isVariable = (getLog_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getLog_argsStandardScheme isMethod() {
                return new getLog_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getLog_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getLog_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getLog_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getLog_argsTupleScheme isMethod() {
                return new getLog_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getLog_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getLog_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getLog_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getLog_result, getLog_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getLog_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getLog_resultTupleSchemeFactory());
        }

        // isComment
        public List<String> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getLog_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<String> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getLog_result isParameter) {
            if (isNameExpr.isMethod()) {
                List<String> isVariable = new ArrayList<String>();
                for (String isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getLog_result isMethod() {
            return new getLog_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<String> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<String>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<String> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getLog_result isMethod(List<String> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<String>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getLog_result)
                return this.isMethod((getLog_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getLog_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getLog_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getLog_result isVariable = (getLog_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getLog_resultStandardScheme isMethod() {
                return new getLog_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getLog_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getLog_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getLog_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getLog_resultTupleScheme isMethod() {
                return new getLog_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getLog_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getLog_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getLog_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<isTimeDownload_args, isTimeDownload_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new isTimeDownload_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new isTimeDownload_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isTimeDownload_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(isTimeDownload_args isParameter) {
        }

        public isTimeDownload_args isMethod() {
            return new isTimeDownload_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof isTimeDownload_args)
                return this.isMethod((isTimeDownload_args) isNameExpr);
            return true;
        }

        public boolean isMethod(isTimeDownload_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(isTimeDownload_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            isTimeDownload_args isVariable = (isTimeDownload_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public isTimeDownload_argsStandardScheme isMethod() {
                return new isTimeDownload_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<isTimeDownload_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeDownload_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeDownload_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public isTimeDownload_argsTupleScheme isMethod() {
                return new isTimeDownload_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<isTimeDownload_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeDownload_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeDownload_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<isTimeDownload_result, isTimeDownload_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new isTimeDownload_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new isTimeDownload_resultTupleSchemeFactory());
        }

        // isComment
        public boolean isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isTimeDownload_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(boolean isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(isTimeDownload_result isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public isTimeDownload_result isMethod() {
            return new isTimeDownload_result(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = true;
        }

        public boolean isMethod() {
            return this.isFieldAccessExpr;
        }

        public isTimeDownload_result isMethod(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Boolean) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof isTimeDownload_result)
                return this.isMethod((isTimeDownload_result) isNameExpr);
            return true;
        }

        public boolean isMethod(isTimeDownload_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(isTimeDownload_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            isTimeDownload_result isVariable = (isTimeDownload_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public isTimeDownload_resultStandardScheme isMethod() {
                return new isTimeDownload_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<isTimeDownload_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeDownload_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeDownload_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public isTimeDownload_resultTupleScheme isMethod() {
                return new isTimeDownload_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<isTimeDownload_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeDownload_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeDownload_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<isTimeReconnect_args, isTimeReconnect_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new isTimeReconnect_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new isTimeReconnect_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isTimeReconnect_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(isTimeReconnect_args isParameter) {
        }

        public isTimeReconnect_args isMethod() {
            return new isTimeReconnect_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof isTimeReconnect_args)
                return this.isMethod((isTimeReconnect_args) isNameExpr);
            return true;
        }

        public boolean isMethod(isTimeReconnect_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(isTimeReconnect_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            isTimeReconnect_args isVariable = (isTimeReconnect_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public isTimeReconnect_argsStandardScheme isMethod() {
                return new isTimeReconnect_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<isTimeReconnect_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeReconnect_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeReconnect_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public isTimeReconnect_argsTupleScheme isMethod() {
                return new isTimeReconnect_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<isTimeReconnect_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeReconnect_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeReconnect_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<isTimeReconnect_result, isTimeReconnect_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new isTimeReconnect_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new isTimeReconnect_resultTupleSchemeFactory());
        }

        // isComment
        public boolean isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isTimeReconnect_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(boolean isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(isTimeReconnect_result isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public isTimeReconnect_result isMethod() {
            return new isTimeReconnect_result(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = true;
        }

        public boolean isMethod() {
            return this.isFieldAccessExpr;
        }

        public isTimeReconnect_result isMethod(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Boolean) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof isTimeReconnect_result)
                return this.isMethod((isTimeReconnect_result) isNameExpr);
            return true;
        }

        public boolean isMethod(isTimeReconnect_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(isTimeReconnect_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            isTimeReconnect_result isVariable = (isTimeReconnect_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public isTimeReconnect_resultStandardScheme isMethod() {
                return new isTimeReconnect_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<isTimeReconnect_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeReconnect_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeReconnect_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public isTimeReconnect_resultTupleScheme isMethod() {
                return new isTimeReconnect_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<isTimeReconnect_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeReconnect_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isTimeReconnect_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<toggleReconnect_args, toggleReconnect_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new toggleReconnect_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new toggleReconnect_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(toggleReconnect_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(toggleReconnect_args isParameter) {
        }

        public toggleReconnect_args isMethod() {
            return new toggleReconnect_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof toggleReconnect_args)
                return this.isMethod((toggleReconnect_args) isNameExpr);
            return true;
        }

        public boolean isMethod(toggleReconnect_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(toggleReconnect_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            toggleReconnect_args isVariable = (toggleReconnect_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public toggleReconnect_argsStandardScheme isMethod() {
                return new toggleReconnect_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<toggleReconnect_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, toggleReconnect_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, toggleReconnect_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public toggleReconnect_argsTupleScheme isMethod() {
                return new toggleReconnect_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<toggleReconnect_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, toggleReconnect_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, toggleReconnect_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<toggleReconnect_result, toggleReconnect_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new toggleReconnect_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new toggleReconnect_resultTupleSchemeFactory());
        }

        // isComment
        public boolean isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(toggleReconnect_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(boolean isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(toggleReconnect_result isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public toggleReconnect_result isMethod() {
            return new toggleReconnect_result(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = true;
        }

        public boolean isMethod() {
            return this.isFieldAccessExpr;
        }

        public toggleReconnect_result isMethod(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Boolean) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof toggleReconnect_result)
                return this.isMethod((toggleReconnect_result) isNameExpr);
            return true;
        }

        public boolean isMethod(toggleReconnect_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(toggleReconnect_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            toggleReconnect_result isVariable = (toggleReconnect_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public toggleReconnect_resultStandardScheme isMethod() {
                return new toggleReconnect_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<toggleReconnect_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, toggleReconnect_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, toggleReconnect_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public toggleReconnect_resultTupleScheme isMethod() {
                return new toggleReconnect_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<toggleReconnect_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, toggleReconnect_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, toggleReconnect_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<generatePackages_args, generatePackages_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new generatePackages_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new generatePackages_argsTupleSchemeFactory());
        }

        // isComment
        public List<String> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            LINKS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(generatePackages_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<String> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(generatePackages_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public generatePackages_args isMethod() {
            return new generatePackages_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<String> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<String>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<String> isMethod() {
            return this.isFieldAccessExpr;
        }

        public generatePackages_args isMethod(List<String> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<String>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof generatePackages_args)
                return this.isMethod((generatePackages_args) isNameExpr);
            return true;
        }

        public boolean isMethod(generatePackages_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(generatePackages_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            generatePackages_args isVariable = (generatePackages_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public generatePackages_argsStandardScheme isMethod() {
                return new generatePackages_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<generatePackages_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generatePackages_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generatePackages_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public generatePackages_argsTupleScheme isMethod() {
                return new generatePackages_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<generatePackages_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generatePackages_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generatePackages_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<generatePackages_result, generatePackages_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new generatePackages_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new generatePackages_resultTupleSchemeFactory());
        }

        // isComment
        public Map<String, List<String>> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr), new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(generatePackages_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(Map<String, List<String>> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(generatePackages_result isParameter) {
            if (isNameExpr.isMethod()) {
                Map<String, List<String>> isVariable = new HashMap<String, List<String>>();
                for (Map.Entry<String, List<String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                    String isVariable = isNameExpr.isMethod();
                    List<String> isVariable = isNameExpr.isMethod();
                    String isVariable = isNameExpr;
                    List<String> isVariable = isNameExpr;
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public generatePackages_result isMethod() {
            return new generatePackages_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter, List<String> isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new HashMap<String, List<String>>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
        }

        public Map<String, List<String>> isMethod() {
            return this.isFieldAccessExpr;
        }

        public generatePackages_result isMethod(Map<String, List<String>> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Map<String, List<String>>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof generatePackages_result)
                return this.isMethod((generatePackages_result) isNameExpr);
            return true;
        }

        public boolean isMethod(generatePackages_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(generatePackages_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            generatePackages_result isVariable = (generatePackages_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public generatePackages_resultStandardScheme isMethod() {
                return new generatePackages_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<generatePackages_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generatePackages_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new HashMap<String, List<String>>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        // isComment
                                        List<String> isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        {
                                            org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                            isNameExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                                // isComment
                                                String isVariable;
                                                isNameExpr = isNameExpr.isMethod();
                                                isNameExpr.isMethod(isNameExpr);
                                            }
                                            isNameExpr.isMethod();
                                        }
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generatePackages_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (Map.Entry<String, List<String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            {
                                isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod().isMethod()));
                                for (String isVariable : isNameExpr.isMethod()) {
                                    isNameExpr.isMethod(isNameExpr);
                                }
                                isNameExpr.isMethod();
                            }
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public generatePackages_resultTupleScheme isMethod() {
                return new generatePackages_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<generatePackages_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generatePackages_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (Map.Entry<String, List<String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            {
                                isNameExpr.isMethod(isNameExpr.isMethod().isMethod());
                                for (String isVariable : isNameExpr.isMethod()) {
                                    isNameExpr.isMethod(isNameExpr);
                                }
                            }
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generatePackages_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new HashMap<String, List<String>>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            // isComment
                            List<String> isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            {
                                org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                                isNameExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                    // isComment
                                    String isVariable;
                                    isNameExpr = isNameExpr.isMethod();
                                    isNameExpr.isMethod(isNameExpr);
                                }
                            }
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<checkURLs_args, checkURLs_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new checkURLs_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new checkURLs_argsTupleSchemeFactory());
        }

        // isComment
        public List<String> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            URLS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(checkURLs_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<String> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(checkURLs_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public checkURLs_args isMethod() {
            return new checkURLs_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<String> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<String>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<String> isMethod() {
            return this.isFieldAccessExpr;
        }

        public checkURLs_args isMethod(List<String> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<String>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof checkURLs_args)
                return this.isMethod((checkURLs_args) isNameExpr);
            return true;
        }

        public boolean isMethod(checkURLs_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(checkURLs_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            checkURLs_args isVariable = (checkURLs_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public checkURLs_argsStandardScheme isMethod() {
                return new checkURLs_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<checkURLs_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkURLs_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkURLs_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public checkURLs_argsTupleScheme isMethod() {
                return new checkURLs_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<checkURLs_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkURLs_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkURLs_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<checkURLs_result, checkURLs_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new checkURLs_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new checkURLs_resultTupleSchemeFactory());
        }

        // isComment
        public Map<String, List<String>> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"), new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(checkURLs_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(Map<String, List<String>> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(checkURLs_result isParameter) {
            if (isNameExpr.isMethod()) {
                Map<String, List<String>> isVariable = new HashMap<String, List<String>>();
                for (Map.Entry<String, List<String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                    String isVariable = isNameExpr.isMethod();
                    List<String> isVariable = isNameExpr.isMethod();
                    String isVariable = isNameExpr;
                    List<String> isVariable = isNameExpr;
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public checkURLs_result isMethod() {
            return new checkURLs_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter, List<String> isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new HashMap<String, List<String>>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
        }

        public Map<String, List<String>> isMethod() {
            return this.isFieldAccessExpr;
        }

        public checkURLs_result isMethod(Map<String, List<String>> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Map<String, List<String>>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof checkURLs_result)
                return this.isMethod((checkURLs_result) isNameExpr);
            return true;
        }

        public boolean isMethod(checkURLs_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(checkURLs_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            checkURLs_result isVariable = (checkURLs_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public checkURLs_resultStandardScheme isMethod() {
                return new checkURLs_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<checkURLs_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkURLs_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new HashMap<String, List<String>>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        // isComment
                                        List<String> isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        {
                                            org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                            isNameExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                                // isComment
                                                String isVariable;
                                                isNameExpr = isNameExpr.isMethod();
                                                isNameExpr.isMethod(isNameExpr);
                                            }
                                            isNameExpr.isMethod();
                                        }
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkURLs_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (Map.Entry<String, List<String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            {
                                isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod().isMethod()));
                                for (String isVariable : isNameExpr.isMethod()) {
                                    isNameExpr.isMethod(isNameExpr);
                                }
                                isNameExpr.isMethod();
                            }
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public checkURLs_resultTupleScheme isMethod() {
                return new checkURLs_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<checkURLs_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkURLs_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (Map.Entry<String, List<String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            {
                                isNameExpr.isMethod(isNameExpr.isMethod().isMethod());
                                for (String isVariable : isNameExpr.isMethod()) {
                                    isNameExpr.isMethod(isNameExpr);
                                }
                            }
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkURLs_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new HashMap<String, List<String>>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            // isComment
                            List<String> isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            {
                                org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                                isNameExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                    // isComment
                                    String isVariable;
                                    isNameExpr = isNameExpr.isMethod();
                                    isNameExpr.isMethod(isNameExpr);
                                }
                            }
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<parseURLs_args, parseURLs_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new parseURLs_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new parseURLs_argsTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        // isComment
        public String isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            HTML((short) isIntegerConstant, "isStringConstant"), URL((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(parseURLs_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter, String isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(parseURLs_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public parseURLs_args isMethod() {
            return new parseURLs_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public parseURLs_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public parseURLs_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof parseURLs_args)
                return this.isMethod((parseURLs_args) isNameExpr);
            return true;
        }

        public boolean isMethod(parseURLs_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(parseURLs_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            parseURLs_args isVariable = (parseURLs_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public parseURLs_argsStandardScheme isMethod() {
                return new parseURLs_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<parseURLs_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, parseURLs_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, parseURLs_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public parseURLs_argsTupleScheme isMethod() {
                return new parseURLs_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<parseURLs_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, parseURLs_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, parseURLs_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<parseURLs_result, parseURLs_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new parseURLs_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new parseURLs_resultTupleSchemeFactory());
        }

        // isComment
        public Map<String, List<String>> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"), new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(parseURLs_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(Map<String, List<String>> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(parseURLs_result isParameter) {
            if (isNameExpr.isMethod()) {
                Map<String, List<String>> isVariable = new HashMap<String, List<String>>();
                for (Map.Entry<String, List<String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                    String isVariable = isNameExpr.isMethod();
                    List<String> isVariable = isNameExpr.isMethod();
                    String isVariable = isNameExpr;
                    List<String> isVariable = isNameExpr;
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public parseURLs_result isMethod() {
            return new parseURLs_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter, List<String> isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new HashMap<String, List<String>>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
        }

        public Map<String, List<String>> isMethod() {
            return this.isFieldAccessExpr;
        }

        public parseURLs_result isMethod(Map<String, List<String>> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Map<String, List<String>>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof parseURLs_result)
                return this.isMethod((parseURLs_result) isNameExpr);
            return true;
        }

        public boolean isMethod(parseURLs_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(parseURLs_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            parseURLs_result isVariable = (parseURLs_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public parseURLs_resultStandardScheme isMethod() {
                return new parseURLs_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<parseURLs_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, parseURLs_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new HashMap<String, List<String>>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        // isComment
                                        List<String> isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        {
                                            org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                            isNameExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                                // isComment
                                                String isVariable;
                                                isNameExpr = isNameExpr.isMethod();
                                                isNameExpr.isMethod(isNameExpr);
                                            }
                                            isNameExpr.isMethod();
                                        }
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, parseURLs_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (Map.Entry<String, List<String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            {
                                isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod().isMethod()));
                                for (String isVariable : isNameExpr.isMethod()) {
                                    isNameExpr.isMethod(isNameExpr);
                                }
                                isNameExpr.isMethod();
                            }
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public parseURLs_resultTupleScheme isMethod() {
                return new parseURLs_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<parseURLs_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, parseURLs_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (Map.Entry<String, List<String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            {
                                isNameExpr.isMethod(isNameExpr.isMethod().isMethod());
                                for (String isVariable : isNameExpr.isMethod()) {
                                    isNameExpr.isMethod(isNameExpr);
                                }
                            }
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, parseURLs_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new HashMap<String, List<String>>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            // isComment
                            List<String> isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            {
                                org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                                isNameExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                    // isComment
                                    String isVariable;
                                    isNameExpr = isNameExpr.isMethod();
                                    isNameExpr.isMethod(isNameExpr);
                                }
                            }
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<checkOnlineStatus_args, checkOnlineStatus_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new checkOnlineStatus_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new checkOnlineStatus_argsTupleSchemeFactory());
        }

        // isComment
        public List<String> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            URLS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(checkOnlineStatus_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<String> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(checkOnlineStatus_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public checkOnlineStatus_args isMethod() {
            return new checkOnlineStatus_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<String> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<String>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<String> isMethod() {
            return this.isFieldAccessExpr;
        }

        public checkOnlineStatus_args isMethod(List<String> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<String>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof checkOnlineStatus_args)
                return this.isMethod((checkOnlineStatus_args) isNameExpr);
            return true;
        }

        public boolean isMethod(checkOnlineStatus_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(checkOnlineStatus_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            checkOnlineStatus_args isVariable = (checkOnlineStatus_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public checkOnlineStatus_argsStandardScheme isMethod() {
                return new checkOnlineStatus_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<checkOnlineStatus_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatus_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatus_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public checkOnlineStatus_argsTupleScheme isMethod() {
                return new checkOnlineStatus_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<checkOnlineStatus_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatus_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatus_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<checkOnlineStatus_result, checkOnlineStatus_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new checkOnlineStatus_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new checkOnlineStatus_resultTupleSchemeFactory());
        }

        // isComment
        public OnlineCheck isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, OnlineCheck.class)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(checkOnlineStatus_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(OnlineCheck isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(checkOnlineStatus_result isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new OnlineCheck(isNameExpr.isFieldAccessExpr);
            }
        }

        public checkOnlineStatus_result isMethod() {
            return new checkOnlineStatus_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public OnlineCheck isMethod() {
            return this.isFieldAccessExpr;
        }

        public checkOnlineStatus_result isMethod(OnlineCheck isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((OnlineCheck) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof checkOnlineStatus_result)
                return this.isMethod((checkOnlineStatus_result) isNameExpr);
            return true;
        }

        public boolean isMethod(checkOnlineStatus_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(checkOnlineStatus_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            checkOnlineStatus_result isVariable = (checkOnlineStatus_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public checkOnlineStatus_resultStandardScheme isMethod() {
                return new checkOnlineStatus_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<checkOnlineStatus_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatus_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new OnlineCheck();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatus_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public checkOnlineStatus_resultTupleScheme isMethod() {
                return new checkOnlineStatus_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<checkOnlineStatus_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatus_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatus_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new OnlineCheck();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<checkOnlineStatusContainer_args, checkOnlineStatusContainer_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new checkOnlineStatusContainer_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new checkOnlineStatusContainer_argsTupleSchemeFactory());
        }

        // isComment
        public List<String> isVariable;

        // isComment
        public String isVariable;

        // isComment
        public ByteBuffer isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            URLS((short) isIntegerConstant, "isStringConstant"), FILENAME((short) isIntegerConstant, "isStringConstant"), DATA((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, true)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(checkOnlineStatusContainer_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<String> isParameter, String isParameter, ByteBuffer isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(checkOnlineStatusContainer_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr);
                ;
            }
        }

        public checkOnlineStatusContainer_args isMethod() {
            return new checkOnlineStatusContainer_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<String> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<String>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<String> isMethod() {
            return this.isFieldAccessExpr;
        }

        public checkOnlineStatusContainer_args isMethod(List<String> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public checkOnlineStatusContainer_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public byte[] isMethod() {
            isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr));
            return isNameExpr == null ? null : isNameExpr.isMethod();
        }

        public ByteBuffer isMethod() {
            return isNameExpr;
        }

        public checkOnlineStatusContainer_args isMethod(byte[] isParameter) {
            isMethod(isNameExpr == null ? (ByteBuffer) null : isNameExpr.isMethod(isNameExpr));
            return this;
        }

        public checkOnlineStatusContainer_args isMethod(ByteBuffer isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<String>) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((ByteBuffer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof checkOnlineStatusContainer_args)
                return this.isMethod((checkOnlineStatusContainer_args) isNameExpr);
            return true;
        }

        public boolean isMethod(checkOnlineStatusContainer_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(checkOnlineStatusContainer_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            checkOnlineStatusContainer_args isVariable = (checkOnlineStatusContainer_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public checkOnlineStatusContainer_argsStandardScheme isMethod() {
                return new checkOnlineStatusContainer_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<checkOnlineStatusContainer_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatusContainer_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatusContainer_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public checkOnlineStatusContainer_argsTupleScheme isMethod() {
                return new checkOnlineStatusContainer_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<checkOnlineStatusContainer_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatusContainer_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatusContainer_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<checkOnlineStatusContainer_result, checkOnlineStatusContainer_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new checkOnlineStatusContainer_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new checkOnlineStatusContainer_resultTupleSchemeFactory());
        }

        // isComment
        public OnlineCheck isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, OnlineCheck.class)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(checkOnlineStatusContainer_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(OnlineCheck isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(checkOnlineStatusContainer_result isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new OnlineCheck(isNameExpr.isFieldAccessExpr);
            }
        }

        public checkOnlineStatusContainer_result isMethod() {
            return new checkOnlineStatusContainer_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public OnlineCheck isMethod() {
            return this.isFieldAccessExpr;
        }

        public checkOnlineStatusContainer_result isMethod(OnlineCheck isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((OnlineCheck) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof checkOnlineStatusContainer_result)
                return this.isMethod((checkOnlineStatusContainer_result) isNameExpr);
            return true;
        }

        public boolean isMethod(checkOnlineStatusContainer_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(checkOnlineStatusContainer_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            checkOnlineStatusContainer_result isVariable = (checkOnlineStatusContainer_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public checkOnlineStatusContainer_resultStandardScheme isMethod() {
                return new checkOnlineStatusContainer_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<checkOnlineStatusContainer_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatusContainer_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new OnlineCheck();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatusContainer_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public checkOnlineStatusContainer_resultTupleScheme isMethod() {
                return new checkOnlineStatusContainer_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<checkOnlineStatusContainer_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatusContainer_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, checkOnlineStatusContainer_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new OnlineCheck();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<pollResults_args, pollResults_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new pollResults_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new pollResults_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            RID((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(pollResults_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(pollResults_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public pollResults_args isMethod() {
            return new pollResults_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public pollResults_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof pollResults_args)
                return this.isMethod((pollResults_args) isNameExpr);
            return true;
        }

        public boolean isMethod(pollResults_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(pollResults_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            pollResults_args isVariable = (pollResults_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pollResults_argsStandardScheme isMethod() {
                return new pollResults_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<pollResults_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pollResults_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pollResults_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pollResults_argsTupleScheme isMethod() {
                return new pollResults_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<pollResults_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pollResults_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pollResults_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<pollResults_result, pollResults_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new pollResults_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new pollResults_resultTupleSchemeFactory());
        }

        // isComment
        public OnlineCheck isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, OnlineCheck.class)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(pollResults_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(OnlineCheck isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(pollResults_result isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new OnlineCheck(isNameExpr.isFieldAccessExpr);
            }
        }

        public pollResults_result isMethod() {
            return new pollResults_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public OnlineCheck isMethod() {
            return this.isFieldAccessExpr;
        }

        public pollResults_result isMethod(OnlineCheck isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((OnlineCheck) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof pollResults_result)
                return this.isMethod((pollResults_result) isNameExpr);
            return true;
        }

        public boolean isMethod(pollResults_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(pollResults_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            pollResults_result isVariable = (pollResults_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pollResults_resultStandardScheme isMethod() {
                return new pollResults_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<pollResults_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pollResults_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new OnlineCheck();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pollResults_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pollResults_resultTupleScheme isMethod() {
                return new pollResults_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<pollResults_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pollResults_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pollResults_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new OnlineCheck();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<statusDownloads_args, statusDownloads_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new statusDownloads_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new statusDownloads_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(statusDownloads_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(statusDownloads_args isParameter) {
        }

        public statusDownloads_args isMethod() {
            return new statusDownloads_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof statusDownloads_args)
                return this.isMethod((statusDownloads_args) isNameExpr);
            return true;
        }

        public boolean isMethod(statusDownloads_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(statusDownloads_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            statusDownloads_args isVariable = (statusDownloads_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public statusDownloads_argsStandardScheme isMethod() {
                return new statusDownloads_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<statusDownloads_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusDownloads_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusDownloads_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public statusDownloads_argsTupleScheme isMethod() {
                return new statusDownloads_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<statusDownloads_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusDownloads_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusDownloads_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<statusDownloads_result, statusDownloads_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new statusDownloads_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new statusDownloads_resultTupleSchemeFactory());
        }

        // isComment
        public List<DownloadInfo> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, DownloadInfo.class))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(statusDownloads_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<DownloadInfo> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(statusDownloads_result isParameter) {
            if (isNameExpr.isMethod()) {
                List<DownloadInfo> isVariable = new ArrayList<DownloadInfo>();
                for (DownloadInfo isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(new DownloadInfo(isNameExpr));
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public statusDownloads_result isMethod() {
            return new statusDownloads_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<DownloadInfo> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(DownloadInfo isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<DownloadInfo>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<DownloadInfo> isMethod() {
            return this.isFieldAccessExpr;
        }

        public statusDownloads_result isMethod(List<DownloadInfo> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<DownloadInfo>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof statusDownloads_result)
                return this.isMethod((statusDownloads_result) isNameExpr);
            return true;
        }

        public boolean isMethod(statusDownloads_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(statusDownloads_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            statusDownloads_result isVariable = (statusDownloads_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public statusDownloads_resultStandardScheme isMethod() {
                return new statusDownloads_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<statusDownloads_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusDownloads_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<DownloadInfo>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        DownloadInfo isVariable;
                                        isNameExpr = new DownloadInfo();
                                        isNameExpr.isMethod(isNameExpr);
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusDownloads_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (DownloadInfo isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public statusDownloads_resultTupleScheme isMethod() {
                return new statusDownloads_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<statusDownloads_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusDownloads_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (DownloadInfo isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, statusDownloads_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<DownloadInfo>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            DownloadInfo isVariable;
                            isNameExpr = new DownloadInfo();
                            isNameExpr.isMethod(isNameExpr);
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getPackageData_args, getPackageData_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getPackageData_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getPackageData_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PID((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getPackageData_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(getPackageData_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public getPackageData_args isMethod() {
            return new getPackageData_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public getPackageData_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getPackageData_args)
                return this.isMethod((getPackageData_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getPackageData_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getPackageData_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getPackageData_args isVariable = (getPackageData_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPackageData_argsStandardScheme isMethod() {
                return new getPackageData_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getPackageData_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageData_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageData_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPackageData_argsTupleScheme isMethod() {
                return new getPackageData_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getPackageData_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageData_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageData_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getPackageData_result, getPackageData_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getPackageData_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getPackageData_resultTupleSchemeFactory());
        }

        // isComment
        public PackageData isVariable;

        // isComment
        public PackageDoesNotExists isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant"), E((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, PackageData.class)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getPackageData_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(PackageData isParameter, PackageDoesNotExists isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getPackageData_result isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new PackageData(isNameExpr.isFieldAccessExpr);
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new PackageDoesNotExists(isNameExpr.isFieldAccessExpr);
            }
        }

        public getPackageData_result isMethod() {
            return new getPackageData_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public PackageData isMethod() {
            return this.isFieldAccessExpr;
        }

        public getPackageData_result isMethod(PackageData isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public PackageDoesNotExists isMethod() {
            return this.isFieldAccessExpr;
        }

        public getPackageData_result isMethod(PackageDoesNotExists isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((PackageData) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((PackageDoesNotExists) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getPackageData_result)
                return this.isMethod((getPackageData_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getPackageData_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getPackageData_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getPackageData_result isVariable = (getPackageData_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPackageData_resultStandardScheme isMethod() {
                return new getPackageData_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getPackageData_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageData_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new PackageData();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new PackageDoesNotExists();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageData_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPackageData_resultTupleScheme isMethod() {
                return new getPackageData_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getPackageData_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageData_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageData_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new PackageData();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new PackageDoesNotExists();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getPackageInfo_args, getPackageInfo_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getPackageInfo_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getPackageInfo_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PID((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getPackageInfo_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(getPackageInfo_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public getPackageInfo_args isMethod() {
            return new getPackageInfo_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public getPackageInfo_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getPackageInfo_args)
                return this.isMethod((getPackageInfo_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getPackageInfo_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getPackageInfo_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getPackageInfo_args isVariable = (getPackageInfo_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPackageInfo_argsStandardScheme isMethod() {
                return new getPackageInfo_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getPackageInfo_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageInfo_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageInfo_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPackageInfo_argsTupleScheme isMethod() {
                return new getPackageInfo_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getPackageInfo_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageInfo_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageInfo_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getPackageInfo_result, getPackageInfo_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getPackageInfo_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getPackageInfo_resultTupleSchemeFactory());
        }

        // isComment
        public PackageData isVariable;

        // isComment
        public PackageDoesNotExists isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant"), E((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, PackageData.class)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getPackageInfo_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(PackageData isParameter, PackageDoesNotExists isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getPackageInfo_result isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new PackageData(isNameExpr.isFieldAccessExpr);
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new PackageDoesNotExists(isNameExpr.isFieldAccessExpr);
            }
        }

        public getPackageInfo_result isMethod() {
            return new getPackageInfo_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public PackageData isMethod() {
            return this.isFieldAccessExpr;
        }

        public getPackageInfo_result isMethod(PackageData isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public PackageDoesNotExists isMethod() {
            return this.isFieldAccessExpr;
        }

        public getPackageInfo_result isMethod(PackageDoesNotExists isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((PackageData) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((PackageDoesNotExists) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getPackageInfo_result)
                return this.isMethod((getPackageInfo_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getPackageInfo_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getPackageInfo_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getPackageInfo_result isVariable = (getPackageInfo_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPackageInfo_resultStandardScheme isMethod() {
                return new getPackageInfo_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getPackageInfo_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageInfo_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new PackageData();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new PackageDoesNotExists();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageInfo_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPackageInfo_resultTupleScheme isMethod() {
                return new getPackageInfo_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getPackageInfo_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageInfo_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageInfo_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new PackageData();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new PackageDoesNotExists();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getFileData_args, getFileData_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getFileData_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getFileData_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            FID((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getFileData_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(getFileData_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public getFileData_args isMethod() {
            return new getFileData_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public getFileData_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getFileData_args)
                return this.isMethod((getFileData_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getFileData_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getFileData_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getFileData_args isVariable = (getFileData_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getFileData_argsStandardScheme isMethod() {
                return new getFileData_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getFileData_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileData_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileData_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getFileData_argsTupleScheme isMethod() {
                return new getFileData_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getFileData_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileData_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileData_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getFileData_result, getFileData_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getFileData_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getFileData_resultTupleSchemeFactory());
        }

        // isComment
        public FileData isVariable;

        // isComment
        public FileDoesNotExists isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant"), E((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, FileData.class)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getFileData_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(FileData isParameter, FileDoesNotExists isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getFileData_result isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new FileData(isNameExpr.isFieldAccessExpr);
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new FileDoesNotExists(isNameExpr.isFieldAccessExpr);
            }
        }

        public getFileData_result isMethod() {
            return new getFileData_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public FileData isMethod() {
            return this.isFieldAccessExpr;
        }

        public getFileData_result isMethod(FileData isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public FileDoesNotExists isMethod() {
            return this.isFieldAccessExpr;
        }

        public getFileData_result isMethod(FileDoesNotExists isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((FileData) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((FileDoesNotExists) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getFileData_result)
                return this.isMethod((getFileData_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getFileData_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getFileData_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getFileData_result isVariable = (getFileData_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getFileData_resultStandardScheme isMethod() {
                return new getFileData_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getFileData_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileData_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new FileData();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new FileDoesNotExists();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileData_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getFileData_resultTupleScheme isMethod() {
                return new getFileData_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getFileData_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileData_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileData_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new FileData();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new FileDoesNotExists();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getQueue_args, getQueue_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getQueue_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getQueue_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getQueue_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(getQueue_args isParameter) {
        }

        public getQueue_args isMethod() {
            return new getQueue_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getQueue_args)
                return this.isMethod((getQueue_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getQueue_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getQueue_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getQueue_args isVariable = (getQueue_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getQueue_argsStandardScheme isMethod() {
                return new getQueue_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getQueue_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueue_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueue_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getQueue_argsTupleScheme isMethod() {
                return new getQueue_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getQueue_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueue_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueue_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getQueue_result, getQueue_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getQueue_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getQueue_resultTupleSchemeFactory());
        }

        // isComment
        public List<PackageData> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, PackageData.class))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getQueue_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<PackageData> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getQueue_result isParameter) {
            if (isNameExpr.isMethod()) {
                List<PackageData> isVariable = new ArrayList<PackageData>();
                for (PackageData isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(new PackageData(isNameExpr));
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getQueue_result isMethod() {
            return new getQueue_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<PackageData> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(PackageData isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<PackageData>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<PackageData> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getQueue_result isMethod(List<PackageData> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<PackageData>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getQueue_result)
                return this.isMethod((getQueue_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getQueue_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getQueue_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getQueue_result isVariable = (getQueue_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getQueue_resultStandardScheme isMethod() {
                return new getQueue_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getQueue_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueue_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<PackageData>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        PackageData isVariable;
                                        isNameExpr = new PackageData();
                                        isNameExpr.isMethod(isNameExpr);
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueue_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (PackageData isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getQueue_resultTupleScheme isMethod() {
                return new getQueue_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getQueue_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueue_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (PackageData isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueue_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<PackageData>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            PackageData isVariable;
                            isNameExpr = new PackageData();
                            isNameExpr.isMethod(isNameExpr);
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getCollector_args, getCollector_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getCollector_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getCollector_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getCollector_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(getCollector_args isParameter) {
        }

        public getCollector_args isMethod() {
            return new getCollector_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getCollector_args)
                return this.isMethod((getCollector_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getCollector_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getCollector_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getCollector_args isVariable = (getCollector_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCollector_argsStandardScheme isMethod() {
                return new getCollector_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getCollector_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollector_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollector_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCollector_argsTupleScheme isMethod() {
                return new getCollector_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getCollector_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollector_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollector_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getCollector_result, getCollector_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getCollector_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getCollector_resultTupleSchemeFactory());
        }

        // isComment
        public List<PackageData> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, PackageData.class))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getCollector_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<PackageData> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getCollector_result isParameter) {
            if (isNameExpr.isMethod()) {
                List<PackageData> isVariable = new ArrayList<PackageData>();
                for (PackageData isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(new PackageData(isNameExpr));
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getCollector_result isMethod() {
            return new getCollector_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<PackageData> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(PackageData isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<PackageData>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<PackageData> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getCollector_result isMethod(List<PackageData> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<PackageData>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getCollector_result)
                return this.isMethod((getCollector_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getCollector_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getCollector_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getCollector_result isVariable = (getCollector_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCollector_resultStandardScheme isMethod() {
                return new getCollector_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getCollector_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollector_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<PackageData>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        PackageData isVariable;
                                        isNameExpr = new PackageData();
                                        isNameExpr.isMethod(isNameExpr);
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollector_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (PackageData isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCollector_resultTupleScheme isMethod() {
                return new getCollector_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getCollector_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollector_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (PackageData isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollector_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<PackageData>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            PackageData isVariable;
                            isNameExpr = new PackageData();
                            isNameExpr.isMethod(isNameExpr);
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getQueueData_args, getQueueData_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getQueueData_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getQueueData_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getQueueData_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(getQueueData_args isParameter) {
        }

        public getQueueData_args isMethod() {
            return new getQueueData_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getQueueData_args)
                return this.isMethod((getQueueData_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getQueueData_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getQueueData_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getQueueData_args isVariable = (getQueueData_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getQueueData_argsStandardScheme isMethod() {
                return new getQueueData_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getQueueData_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueueData_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueueData_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getQueueData_argsTupleScheme isMethod() {
                return new getQueueData_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getQueueData_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueueData_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueueData_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getQueueData_result, getQueueData_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getQueueData_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getQueueData_resultTupleSchemeFactory());
        }

        // isComment
        public List<PackageData> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, PackageData.class))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getQueueData_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<PackageData> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getQueueData_result isParameter) {
            if (isNameExpr.isMethod()) {
                List<PackageData> isVariable = new ArrayList<PackageData>();
                for (PackageData isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(new PackageData(isNameExpr));
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getQueueData_result isMethod() {
            return new getQueueData_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<PackageData> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(PackageData isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<PackageData>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<PackageData> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getQueueData_result isMethod(List<PackageData> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<PackageData>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getQueueData_result)
                return this.isMethod((getQueueData_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getQueueData_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getQueueData_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getQueueData_result isVariable = (getQueueData_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getQueueData_resultStandardScheme isMethod() {
                return new getQueueData_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getQueueData_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueueData_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<PackageData>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        PackageData isVariable;
                                        isNameExpr = new PackageData();
                                        isNameExpr.isMethod(isNameExpr);
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueueData_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (PackageData isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getQueueData_resultTupleScheme isMethod() {
                return new getQueueData_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getQueueData_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueueData_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (PackageData isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getQueueData_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<PackageData>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            PackageData isVariable;
                            isNameExpr = new PackageData();
                            isNameExpr.isMethod(isNameExpr);
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getCollectorData_args, getCollectorData_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getCollectorData_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getCollectorData_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getCollectorData_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(getCollectorData_args isParameter) {
        }

        public getCollectorData_args isMethod() {
            return new getCollectorData_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getCollectorData_args)
                return this.isMethod((getCollectorData_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getCollectorData_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getCollectorData_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getCollectorData_args isVariable = (getCollectorData_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCollectorData_argsStandardScheme isMethod() {
                return new getCollectorData_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getCollectorData_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollectorData_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollectorData_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCollectorData_argsTupleScheme isMethod() {
                return new getCollectorData_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getCollectorData_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollectorData_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollectorData_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getCollectorData_result, getCollectorData_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getCollectorData_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getCollectorData_resultTupleSchemeFactory());
        }

        // isComment
        public List<PackageData> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, PackageData.class))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getCollectorData_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<PackageData> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getCollectorData_result isParameter) {
            if (isNameExpr.isMethod()) {
                List<PackageData> isVariable = new ArrayList<PackageData>();
                for (PackageData isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(new PackageData(isNameExpr));
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getCollectorData_result isMethod() {
            return new getCollectorData_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<PackageData> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(PackageData isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<PackageData>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<PackageData> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getCollectorData_result isMethod(List<PackageData> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<PackageData>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getCollectorData_result)
                return this.isMethod((getCollectorData_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getCollectorData_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getCollectorData_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getCollectorData_result isVariable = (getCollectorData_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCollectorData_resultStandardScheme isMethod() {
                return new getCollectorData_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getCollectorData_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollectorData_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<PackageData>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        PackageData isVariable;
                                        isNameExpr = new PackageData();
                                        isNameExpr.isMethod(isNameExpr);
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollectorData_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (PackageData isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCollectorData_resultTupleScheme isMethod() {
                return new getCollectorData_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getCollectorData_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollectorData_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (PackageData isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCollectorData_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<PackageData>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            PackageData isVariable;
                            isNameExpr = new PackageData();
                            isNameExpr.isMethod(isNameExpr);
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getPackageOrder_args, getPackageOrder_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getPackageOrder_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getPackageOrder_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        // isComment
        public Destination isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            /**
             * isComment
             */
            DESTINATION((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.EnumMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, Destination.class)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getPackageOrder_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(Destination isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getPackageOrder_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public getPackageOrder_args isMethod() {
            return new getPackageOrder_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public Destination isMethod() {
            return this.isFieldAccessExpr;
        }

        /**
         * isComment
         */
        public getPackageOrder_args isMethod(Destination isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Destination) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getPackageOrder_args)
                return this.isMethod((getPackageOrder_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getPackageOrder_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getPackageOrder_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getPackageOrder_args isVariable = (getPackageOrder_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPackageOrder_argsStandardScheme isMethod() {
                return new getPackageOrder_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getPackageOrder_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageOrder_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isMethod());
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageOrder_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPackageOrder_argsTupleScheme isMethod() {
                return new getPackageOrder_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getPackageOrder_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageOrder_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageOrder_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isMethod());
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getPackageOrder_result, getPackageOrder_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getPackageOrder_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getPackageOrder_resultTupleSchemeFactory());
        }

        // isComment
        public Map<Short, Integer> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr), new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getPackageOrder_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(Map<Short, Integer> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getPackageOrder_result isParameter) {
            if (isNameExpr.isMethod()) {
                Map<Short, Integer> isVariable = new HashMap<Short, Integer>();
                for (Map.Entry<Short, Integer> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                    Short isVariable = isNameExpr.isMethod();
                    Integer isVariable = isNameExpr.isMethod();
                    Short isVariable = isNameExpr;
                    Integer isVariable = isNameExpr;
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getPackageOrder_result isMethod() {
            return new getPackageOrder_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(short isParameter, int isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new HashMap<Short, Integer>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
        }

        public Map<Short, Integer> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getPackageOrder_result isMethod(Map<Short, Integer> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Map<Short, Integer>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getPackageOrder_result)
                return this.isMethod((getPackageOrder_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getPackageOrder_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getPackageOrder_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getPackageOrder_result isVariable = (getPackageOrder_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPackageOrder_resultStandardScheme isMethod() {
                return new getPackageOrder_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getPackageOrder_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageOrder_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new HashMap<Short, Integer>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        short isVariable;
                                        // isComment
                                        int isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageOrder_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (Map.Entry<Short, Integer> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod(isNameExpr.isMethod());
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getPackageOrder_resultTupleScheme isMethod() {
                return new getPackageOrder_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getPackageOrder_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageOrder_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (Map.Entry<Short, Integer> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod(isNameExpr.isMethod());
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getPackageOrder_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new HashMap<Short, Integer>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            short isVariable;
                            // isComment
                            int isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getFileOrder_args, getFileOrder_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getFileOrder_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getFileOrder_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PID((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getFileOrder_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(getFileOrder_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public getFileOrder_args isMethod() {
            return new getFileOrder_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public getFileOrder_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getFileOrder_args)
                return this.isMethod((getFileOrder_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getFileOrder_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getFileOrder_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getFileOrder_args isVariable = (getFileOrder_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getFileOrder_argsStandardScheme isMethod() {
                return new getFileOrder_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getFileOrder_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileOrder_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileOrder_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getFileOrder_argsTupleScheme isMethod() {
                return new getFileOrder_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getFileOrder_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileOrder_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileOrder_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getFileOrder_result, getFileOrder_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getFileOrder_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getFileOrder_resultTupleSchemeFactory());
        }

        // isComment
        public Map<Short, Integer> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr), new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getFileOrder_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(Map<Short, Integer> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getFileOrder_result isParameter) {
            if (isNameExpr.isMethod()) {
                Map<Short, Integer> isVariable = new HashMap<Short, Integer>();
                for (Map.Entry<Short, Integer> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                    Short isVariable = isNameExpr.isMethod();
                    Integer isVariable = isNameExpr.isMethod();
                    Short isVariable = isNameExpr;
                    Integer isVariable = isNameExpr;
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getFileOrder_result isMethod() {
            return new getFileOrder_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(short isParameter, int isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new HashMap<Short, Integer>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
        }

        public Map<Short, Integer> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getFileOrder_result isMethod(Map<Short, Integer> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Map<Short, Integer>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getFileOrder_result)
                return this.isMethod((getFileOrder_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getFileOrder_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getFileOrder_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getFileOrder_result isVariable = (getFileOrder_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getFileOrder_resultStandardScheme isMethod() {
                return new getFileOrder_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getFileOrder_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileOrder_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new HashMap<Short, Integer>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        short isVariable;
                                        // isComment
                                        int isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileOrder_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (Map.Entry<Short, Integer> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod(isNameExpr.isMethod());
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getFileOrder_resultTupleScheme isMethod() {
                return new getFileOrder_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getFileOrder_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileOrder_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (Map.Entry<Short, Integer> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod(isNameExpr.isMethod());
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getFileOrder_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new HashMap<Short, Integer>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            short isVariable;
                            // isComment
                            int isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<generateAndAddPackages_args, generateAndAddPackages_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new generateAndAddPackages_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new generateAndAddPackages_argsTupleSchemeFactory());
        }

        // isComment
        public List<String> isVariable;

        /**
         * isComment
         */
        // isComment
        public Destination isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            LINKS((short) isIntegerConstant, "isStringConstant"),
            /**
             * isComment
             */
            DEST((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.EnumMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, Destination.class)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(generateAndAddPackages_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<String> isParameter, Destination isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(generateAndAddPackages_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public generateAndAddPackages_args isMethod() {
            return new generateAndAddPackages_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<String> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<String>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<String> isMethod() {
            return this.isFieldAccessExpr;
        }

        public generateAndAddPackages_args isMethod(List<String> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        /**
         * isComment
         */
        public Destination isMethod() {
            return this.isFieldAccessExpr;
        }

        /**
         * isComment
         */
        public generateAndAddPackages_args isMethod(Destination isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<String>) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Destination) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof generateAndAddPackages_args)
                return this.isMethod((generateAndAddPackages_args) isNameExpr);
            return true;
        }

        public boolean isMethod(generateAndAddPackages_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(generateAndAddPackages_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            generateAndAddPackages_args isVariable = (generateAndAddPackages_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public generateAndAddPackages_argsStandardScheme isMethod() {
                return new generateAndAddPackages_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<generateAndAddPackages_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generateAndAddPackages_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isMethod());
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generateAndAddPackages_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public generateAndAddPackages_argsTupleScheme isMethod() {
                return new generateAndAddPackages_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<generateAndAddPackages_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generateAndAddPackages_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generateAndAddPackages_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isMethod());
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<generateAndAddPackages_result, generateAndAddPackages_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new generateAndAddPackages_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new generateAndAddPackages_resultTupleSchemeFactory());
        }

        // isComment
        public List<Integer> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(generateAndAddPackages_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<Integer> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(generateAndAddPackages_result isParameter) {
            if (isNameExpr.isMethod()) {
                List<Integer> isVariable = new ArrayList<Integer>();
                for (Integer isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public generateAndAddPackages_result isMethod() {
            return new generateAndAddPackages_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<Integer> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(int isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<Integer>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<Integer> isMethod() {
            return this.isFieldAccessExpr;
        }

        public generateAndAddPackages_result isMethod(List<Integer> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<Integer>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof generateAndAddPackages_result)
                return this.isMethod((generateAndAddPackages_result) isNameExpr);
            return true;
        }

        public boolean isMethod(generateAndAddPackages_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(generateAndAddPackages_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            generateAndAddPackages_result isVariable = (generateAndAddPackages_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public generateAndAddPackages_resultStandardScheme isMethod() {
                return new generateAndAddPackages_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<generateAndAddPackages_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generateAndAddPackages_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<Integer>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        int isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generateAndAddPackages_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (int isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public generateAndAddPackages_resultTupleScheme isMethod() {
                return new generateAndAddPackages_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<generateAndAddPackages_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generateAndAddPackages_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (int isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, generateAndAddPackages_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<Integer>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            int isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<addPackage_args, addPackage_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new addPackage_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new addPackage_argsTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        // isComment
        public List<String> isVariable;

        /**
         * isComment
         */
        // isComment
        public Destination isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            NAME((short) isIntegerConstant, "isStringConstant"),
            LINKS((short) isIntegerConstant, "isStringConstant"),
            /**
             * isComment
             */
            DEST((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.EnumMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, Destination.class)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(addPackage_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter, List<String> isParameter, Destination isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(addPackage_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public addPackage_args isMethod() {
            return new addPackage_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public addPackage_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<String> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<String>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<String> isMethod() {
            return this.isFieldAccessExpr;
        }

        public addPackage_args isMethod(List<String> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        /**
         * isComment
         */
        public Destination isMethod() {
            return this.isFieldAccessExpr;
        }

        /**
         * isComment
         */
        public addPackage_args isMethod(Destination isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<String>) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Destination) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof addPackage_args)
                return this.isMethod((addPackage_args) isNameExpr);
            return true;
        }

        public boolean isMethod(addPackage_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(addPackage_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            addPackage_args isVariable = (addPackage_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public addPackage_argsStandardScheme isMethod() {
                return new addPackage_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<addPackage_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addPackage_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isMethod());
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addPackage_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public addPackage_argsTupleScheme isMethod() {
                return new addPackage_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<addPackage_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addPackage_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addPackage_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isMethod());
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<addPackage_result, addPackage_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new addPackage_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new addPackage_resultTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(addPackage_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(addPackage_result isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public addPackage_result isMethod() {
            return new addPackage_result(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public addPackage_result isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof addPackage_result)
                return this.isMethod((addPackage_result) isNameExpr);
            return true;
        }

        public boolean isMethod(addPackage_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(addPackage_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            addPackage_result isVariable = (addPackage_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public addPackage_resultStandardScheme isMethod() {
                return new addPackage_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<addPackage_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addPackage_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addPackage_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public addPackage_resultTupleScheme isMethod() {
                return new addPackage_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<addPackage_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addPackage_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addPackage_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<addFiles_args, addFiles_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new addFiles_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new addFiles_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        // isComment
        public List<String> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PID((short) isIntegerConstant, "isStringConstant"), LINKS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(addFiles_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter, List<String> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(addFiles_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public addFiles_args isMethod() {
            return new addFiles_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public addFiles_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<String> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<String>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<String> isMethod() {
            return this.isFieldAccessExpr;
        }

        public addFiles_args isMethod(List<String> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<String>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof addFiles_args)
                return this.isMethod((addFiles_args) isNameExpr);
            return true;
        }

        public boolean isMethod(addFiles_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(addFiles_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            addFiles_args isVariable = (addFiles_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public addFiles_argsStandardScheme isMethod() {
                return new addFiles_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<addFiles_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addFiles_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addFiles_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public addFiles_argsTupleScheme isMethod() {
                return new addFiles_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<addFiles_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addFiles_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addFiles_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<addFiles_result, addFiles_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new addFiles_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new addFiles_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(addFiles_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(addFiles_result isParameter) {
        }

        public addFiles_result isMethod() {
            return new addFiles_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof addFiles_result)
                return this.isMethod((addFiles_result) isNameExpr);
            return true;
        }

        public boolean isMethod(addFiles_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(addFiles_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            addFiles_result isVariable = (addFiles_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public addFiles_resultStandardScheme isMethod() {
                return new addFiles_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<addFiles_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addFiles_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addFiles_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public addFiles_resultTupleScheme isMethod() {
                return new addFiles_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<addFiles_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addFiles_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, addFiles_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<uploadContainer_args, uploadContainer_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new uploadContainer_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new uploadContainer_argsTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        // isComment
        public ByteBuffer isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            FILENAME((short) isIntegerConstant, "isStringConstant"), DATA((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, true)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(uploadContainer_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter, ByteBuffer isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(uploadContainer_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr);
                ;
            }
        }

        public uploadContainer_args isMethod() {
            return new uploadContainer_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public uploadContainer_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public byte[] isMethod() {
            isMethod(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr));
            return isNameExpr == null ? null : isNameExpr.isMethod();
        }

        public ByteBuffer isMethod() {
            return isNameExpr;
        }

        public uploadContainer_args isMethod(byte[] isParameter) {
            isMethod(isNameExpr == null ? (ByteBuffer) null : isNameExpr.isMethod(isNameExpr));
            return this;
        }

        public uploadContainer_args isMethod(ByteBuffer isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((ByteBuffer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof uploadContainer_args)
                return this.isMethod((uploadContainer_args) isNameExpr);
            return true;
        }

        public boolean isMethod(uploadContainer_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(uploadContainer_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            uploadContainer_args isVariable = (uploadContainer_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public uploadContainer_argsStandardScheme isMethod() {
                return new uploadContainer_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<uploadContainer_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, uploadContainer_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, uploadContainer_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public uploadContainer_argsTupleScheme isMethod() {
                return new uploadContainer_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<uploadContainer_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, uploadContainer_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, uploadContainer_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<uploadContainer_result, uploadContainer_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new uploadContainer_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new uploadContainer_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(uploadContainer_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(uploadContainer_result isParameter) {
        }

        public uploadContainer_result isMethod() {
            return new uploadContainer_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof uploadContainer_result)
                return this.isMethod((uploadContainer_result) isNameExpr);
            return true;
        }

        public boolean isMethod(uploadContainer_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(uploadContainer_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            uploadContainer_result isVariable = (uploadContainer_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public uploadContainer_resultStandardScheme isMethod() {
                return new uploadContainer_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<uploadContainer_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, uploadContainer_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, uploadContainer_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public uploadContainer_resultTupleScheme isMethod() {
                return new uploadContainer_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<uploadContainer_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, uploadContainer_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, uploadContainer_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<deleteFiles_args, deleteFiles_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new deleteFiles_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new deleteFiles_argsTupleSchemeFactory());
        }

        // isComment
        public List<Integer> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            FIDS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(deleteFiles_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<Integer> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(deleteFiles_args isParameter) {
            if (isNameExpr.isMethod()) {
                List<Integer> isVariable = new ArrayList<Integer>();
                for (Integer isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public deleteFiles_args isMethod() {
            return new deleteFiles_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<Integer> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(int isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<Integer>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<Integer> isMethod() {
            return this.isFieldAccessExpr;
        }

        public deleteFiles_args isMethod(List<Integer> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<Integer>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof deleteFiles_args)
                return this.isMethod((deleteFiles_args) isNameExpr);
            return true;
        }

        public boolean isMethod(deleteFiles_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(deleteFiles_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            deleteFiles_args isVariable = (deleteFiles_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public deleteFiles_argsStandardScheme isMethod() {
                return new deleteFiles_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<deleteFiles_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFiles_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<Integer>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        int isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFiles_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (int isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public deleteFiles_argsTupleScheme isMethod() {
                return new deleteFiles_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<deleteFiles_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFiles_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (int isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFiles_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<Integer>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            int isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<deleteFiles_result, deleteFiles_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new deleteFiles_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new deleteFiles_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(deleteFiles_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(deleteFiles_result isParameter) {
        }

        public deleteFiles_result isMethod() {
            return new deleteFiles_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof deleteFiles_result)
                return this.isMethod((deleteFiles_result) isNameExpr);
            return true;
        }

        public boolean isMethod(deleteFiles_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(deleteFiles_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            deleteFiles_result isVariable = (deleteFiles_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public deleteFiles_resultStandardScheme isMethod() {
                return new deleteFiles_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<deleteFiles_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFiles_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFiles_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public deleteFiles_resultTupleScheme isMethod() {
                return new deleteFiles_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<deleteFiles_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFiles_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFiles_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<deletePackages_args, deletePackages_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new deletePackages_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new deletePackages_argsTupleSchemeFactory());
        }

        // isComment
        public List<Integer> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PIDS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(deletePackages_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<Integer> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(deletePackages_args isParameter) {
            if (isNameExpr.isMethod()) {
                List<Integer> isVariable = new ArrayList<Integer>();
                for (Integer isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public deletePackages_args isMethod() {
            return new deletePackages_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<Integer> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(int isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<Integer>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<Integer> isMethod() {
            return this.isFieldAccessExpr;
        }

        public deletePackages_args isMethod(List<Integer> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<Integer>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof deletePackages_args)
                return this.isMethod((deletePackages_args) isNameExpr);
            return true;
        }

        public boolean isMethod(deletePackages_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(deletePackages_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            deletePackages_args isVariable = (deletePackages_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public deletePackages_argsStandardScheme isMethod() {
                return new deletePackages_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<deletePackages_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deletePackages_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<Integer>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        int isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deletePackages_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (int isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public deletePackages_argsTupleScheme isMethod() {
                return new deletePackages_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<deletePackages_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deletePackages_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (int isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deletePackages_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<Integer>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            int isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<deletePackages_result, deletePackages_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new deletePackages_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new deletePackages_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(deletePackages_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(deletePackages_result isParameter) {
        }

        public deletePackages_result isMethod() {
            return new deletePackages_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof deletePackages_result)
                return this.isMethod((deletePackages_result) isNameExpr);
            return true;
        }

        public boolean isMethod(deletePackages_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(deletePackages_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            deletePackages_result isVariable = (deletePackages_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public deletePackages_resultStandardScheme isMethod() {
                return new deletePackages_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<deletePackages_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deletePackages_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deletePackages_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public deletePackages_resultTupleScheme isMethod() {
                return new deletePackages_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<deletePackages_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deletePackages_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deletePackages_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<pushToQueue_args, pushToQueue_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new pushToQueue_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new pushToQueue_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PID((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(pushToQueue_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(pushToQueue_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public pushToQueue_args isMethod() {
            return new pushToQueue_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public pushToQueue_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof pushToQueue_args)
                return this.isMethod((pushToQueue_args) isNameExpr);
            return true;
        }

        public boolean isMethod(pushToQueue_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(pushToQueue_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            pushToQueue_args isVariable = (pushToQueue_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pushToQueue_argsStandardScheme isMethod() {
                return new pushToQueue_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<pushToQueue_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pushToQueue_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pushToQueue_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pushToQueue_argsTupleScheme isMethod() {
                return new pushToQueue_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<pushToQueue_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pushToQueue_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pushToQueue_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<pushToQueue_result, pushToQueue_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new pushToQueue_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new pushToQueue_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(pushToQueue_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(pushToQueue_result isParameter) {
        }

        public pushToQueue_result isMethod() {
            return new pushToQueue_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof pushToQueue_result)
                return this.isMethod((pushToQueue_result) isNameExpr);
            return true;
        }

        public boolean isMethod(pushToQueue_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(pushToQueue_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            pushToQueue_result isVariable = (pushToQueue_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pushToQueue_resultStandardScheme isMethod() {
                return new pushToQueue_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<pushToQueue_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pushToQueue_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pushToQueue_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pushToQueue_resultTupleScheme isMethod() {
                return new pushToQueue_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<pushToQueue_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pushToQueue_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pushToQueue_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<pullFromQueue_args, pullFromQueue_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new pullFromQueue_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new pullFromQueue_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PID((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(pullFromQueue_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(pullFromQueue_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public pullFromQueue_args isMethod() {
            return new pullFromQueue_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public pullFromQueue_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof pullFromQueue_args)
                return this.isMethod((pullFromQueue_args) isNameExpr);
            return true;
        }

        public boolean isMethod(pullFromQueue_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(pullFromQueue_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            pullFromQueue_args isVariable = (pullFromQueue_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pullFromQueue_argsStandardScheme isMethod() {
                return new pullFromQueue_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<pullFromQueue_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pullFromQueue_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pullFromQueue_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pullFromQueue_argsTupleScheme isMethod() {
                return new pullFromQueue_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<pullFromQueue_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pullFromQueue_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pullFromQueue_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<pullFromQueue_result, pullFromQueue_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new pullFromQueue_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new pullFromQueue_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(pullFromQueue_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(pullFromQueue_result isParameter) {
        }

        public pullFromQueue_result isMethod() {
            return new pullFromQueue_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof pullFromQueue_result)
                return this.isMethod((pullFromQueue_result) isNameExpr);
            return true;
        }

        public boolean isMethod(pullFromQueue_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(pullFromQueue_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            pullFromQueue_result isVariable = (pullFromQueue_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pullFromQueue_resultStandardScheme isMethod() {
                return new pullFromQueue_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<pullFromQueue_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pullFromQueue_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pullFromQueue_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public pullFromQueue_resultTupleScheme isMethod() {
                return new pullFromQueue_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<pullFromQueue_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pullFromQueue_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, pullFromQueue_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<restartPackage_args, restartPackage_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new restartPackage_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new restartPackage_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PID((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(restartPackage_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(restartPackage_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public restartPackage_args isMethod() {
            return new restartPackage_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public restartPackage_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof restartPackage_args)
                return this.isMethod((restartPackage_args) isNameExpr);
            return true;
        }

        public boolean isMethod(restartPackage_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(restartPackage_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            restartPackage_args isVariable = (restartPackage_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restartPackage_argsStandardScheme isMethod() {
                return new restartPackage_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<restartPackage_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartPackage_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartPackage_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restartPackage_argsTupleScheme isMethod() {
                return new restartPackage_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<restartPackage_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartPackage_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartPackage_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<restartPackage_result, restartPackage_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new restartPackage_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new restartPackage_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(restartPackage_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(restartPackage_result isParameter) {
        }

        public restartPackage_result isMethod() {
            return new restartPackage_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof restartPackage_result)
                return this.isMethod((restartPackage_result) isNameExpr);
            return true;
        }

        public boolean isMethod(restartPackage_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(restartPackage_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            restartPackage_result isVariable = (restartPackage_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restartPackage_resultStandardScheme isMethod() {
                return new restartPackage_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<restartPackage_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartPackage_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartPackage_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restartPackage_resultTupleScheme isMethod() {
                return new restartPackage_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<restartPackage_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartPackage_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartPackage_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<restartFile_args, restartFile_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new restartFile_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new restartFile_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            FID((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(restartFile_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(restartFile_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public restartFile_args isMethod() {
            return new restartFile_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public restartFile_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof restartFile_args)
                return this.isMethod((restartFile_args) isNameExpr);
            return true;
        }

        public boolean isMethod(restartFile_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(restartFile_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            restartFile_args isVariable = (restartFile_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restartFile_argsStandardScheme isMethod() {
                return new restartFile_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<restartFile_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFile_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFile_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restartFile_argsTupleScheme isMethod() {
                return new restartFile_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<restartFile_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFile_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFile_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<restartFile_result, restartFile_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new restartFile_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new restartFile_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(restartFile_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(restartFile_result isParameter) {
        }

        public restartFile_result isMethod() {
            return new restartFile_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof restartFile_result)
                return this.isMethod((restartFile_result) isNameExpr);
            return true;
        }

        public boolean isMethod(restartFile_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(restartFile_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            restartFile_result isVariable = (restartFile_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restartFile_resultStandardScheme isMethod() {
                return new restartFile_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<restartFile_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFile_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFile_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restartFile_resultTupleScheme isMethod() {
                return new restartFile_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<restartFile_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFile_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFile_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<recheckPackage_args, recheckPackage_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new recheckPackage_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new recheckPackage_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PID((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(recheckPackage_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(recheckPackage_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public recheckPackage_args isMethod() {
            return new recheckPackage_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public recheckPackage_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof recheckPackage_args)
                return this.isMethod((recheckPackage_args) isNameExpr);
            return true;
        }

        public boolean isMethod(recheckPackage_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(recheckPackage_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            recheckPackage_args isVariable = (recheckPackage_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public recheckPackage_argsStandardScheme isMethod() {
                return new recheckPackage_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<recheckPackage_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, recheckPackage_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, recheckPackage_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public recheckPackage_argsTupleScheme isMethod() {
                return new recheckPackage_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<recheckPackage_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, recheckPackage_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, recheckPackage_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<recheckPackage_result, recheckPackage_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new recheckPackage_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new recheckPackage_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(recheckPackage_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(recheckPackage_result isParameter) {
        }

        public recheckPackage_result isMethod() {
            return new recheckPackage_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof recheckPackage_result)
                return this.isMethod((recheckPackage_result) isNameExpr);
            return true;
        }

        public boolean isMethod(recheckPackage_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(recheckPackage_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            recheckPackage_result isVariable = (recheckPackage_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public recheckPackage_resultStandardScheme isMethod() {
                return new recheckPackage_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<recheckPackage_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, recheckPackage_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, recheckPackage_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public recheckPackage_resultTupleScheme isMethod() {
                return new recheckPackage_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<recheckPackage_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, recheckPackage_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, recheckPackage_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<stopAllDownloads_args, stopAllDownloads_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new stopAllDownloads_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new stopAllDownloads_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(stopAllDownloads_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(stopAllDownloads_args isParameter) {
        }

        public stopAllDownloads_args isMethod() {
            return new stopAllDownloads_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof stopAllDownloads_args)
                return this.isMethod((stopAllDownloads_args) isNameExpr);
            return true;
        }

        public boolean isMethod(stopAllDownloads_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(stopAllDownloads_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            stopAllDownloads_args isVariable = (stopAllDownloads_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public stopAllDownloads_argsStandardScheme isMethod() {
                return new stopAllDownloads_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<stopAllDownloads_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopAllDownloads_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopAllDownloads_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public stopAllDownloads_argsTupleScheme isMethod() {
                return new stopAllDownloads_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<stopAllDownloads_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopAllDownloads_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopAllDownloads_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<stopAllDownloads_result, stopAllDownloads_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new stopAllDownloads_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new stopAllDownloads_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(stopAllDownloads_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(stopAllDownloads_result isParameter) {
        }

        public stopAllDownloads_result isMethod() {
            return new stopAllDownloads_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof stopAllDownloads_result)
                return this.isMethod((stopAllDownloads_result) isNameExpr);
            return true;
        }

        public boolean isMethod(stopAllDownloads_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(stopAllDownloads_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            stopAllDownloads_result isVariable = (stopAllDownloads_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public stopAllDownloads_resultStandardScheme isMethod() {
                return new stopAllDownloads_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<stopAllDownloads_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopAllDownloads_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopAllDownloads_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public stopAllDownloads_resultTupleScheme isMethod() {
                return new stopAllDownloads_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<stopAllDownloads_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopAllDownloads_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopAllDownloads_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<stopDownloads_args, stopDownloads_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new stopDownloads_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new stopDownloads_argsTupleSchemeFactory());
        }

        // isComment
        public List<Integer> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            FIDS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(stopDownloads_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<Integer> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(stopDownloads_args isParameter) {
            if (isNameExpr.isMethod()) {
                List<Integer> isVariable = new ArrayList<Integer>();
                for (Integer isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public stopDownloads_args isMethod() {
            return new stopDownloads_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<Integer> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(int isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<Integer>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<Integer> isMethod() {
            return this.isFieldAccessExpr;
        }

        public stopDownloads_args isMethod(List<Integer> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<Integer>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof stopDownloads_args)
                return this.isMethod((stopDownloads_args) isNameExpr);
            return true;
        }

        public boolean isMethod(stopDownloads_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(stopDownloads_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            stopDownloads_args isVariable = (stopDownloads_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public stopDownloads_argsStandardScheme isMethod() {
                return new stopDownloads_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<stopDownloads_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopDownloads_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<Integer>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        int isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopDownloads_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (int isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public stopDownloads_argsTupleScheme isMethod() {
                return new stopDownloads_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<stopDownloads_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopDownloads_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (int isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopDownloads_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<Integer>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            int isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<stopDownloads_result, stopDownloads_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new stopDownloads_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new stopDownloads_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(stopDownloads_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(stopDownloads_result isParameter) {
        }

        public stopDownloads_result isMethod() {
            return new stopDownloads_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof stopDownloads_result)
                return this.isMethod((stopDownloads_result) isNameExpr);
            return true;
        }

        public boolean isMethod(stopDownloads_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(stopDownloads_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            stopDownloads_result isVariable = (stopDownloads_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public stopDownloads_resultStandardScheme isMethod() {
                return new stopDownloads_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<stopDownloads_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopDownloads_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopDownloads_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public stopDownloads_resultTupleScheme isMethod() {
                return new stopDownloads_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<stopDownloads_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopDownloads_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, stopDownloads_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<setPackageName_args, setPackageName_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new setPackageName_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new setPackageName_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        // isComment
        public String isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PID((short) isIntegerConstant, "isStringConstant"), NAME((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(setPackageName_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter, String isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(setPackageName_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public setPackageName_args isMethod() {
            return new setPackageName_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public setPackageName_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public setPackageName_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof setPackageName_args)
                return this.isMethod((setPackageName_args) isNameExpr);
            return true;
        }

        public boolean isMethod(setPackageName_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(setPackageName_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            setPackageName_args isVariable = (setPackageName_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setPackageName_argsStandardScheme isMethod() {
                return new setPackageName_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<setPackageName_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageName_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageName_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setPackageName_argsTupleScheme isMethod() {
                return new setPackageName_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<setPackageName_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageName_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageName_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<setPackageName_result, setPackageName_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new setPackageName_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new setPackageName_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(setPackageName_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(setPackageName_result isParameter) {
        }

        public setPackageName_result isMethod() {
            return new setPackageName_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof setPackageName_result)
                return this.isMethod((setPackageName_result) isNameExpr);
            return true;
        }

        public boolean isMethod(setPackageName_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(setPackageName_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            setPackageName_result isVariable = (setPackageName_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setPackageName_resultStandardScheme isMethod() {
                return new setPackageName_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<setPackageName_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageName_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageName_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setPackageName_resultTupleScheme isMethod() {
                return new setPackageName_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<setPackageName_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageName_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageName_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<movePackage_args, movePackage_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new movePackage_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new movePackage_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        // isComment
        public Destination isVariable;

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            /**
             * isComment
             */
            DESTINATION((short) isIntegerConstant, "isStringConstant"),
            PID((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.EnumMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, Destination.class)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(movePackage_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(Destination isParameter, int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(movePackage_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public movePackage_args isMethod() {
            return new movePackage_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        /**
         * isComment
         */
        public Destination isMethod() {
            return this.isFieldAccessExpr;
        }

        /**
         * isComment
         */
        public movePackage_args isMethod(Destination isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public movePackage_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Destination) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof movePackage_args)
                return this.isMethod((movePackage_args) isNameExpr);
            return true;
        }

        public boolean isMethod(movePackage_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(movePackage_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            movePackage_args isVariable = (movePackage_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public movePackage_argsStandardScheme isMethod() {
                return new movePackage_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<movePackage_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, movePackage_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isMethod());
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, movePackage_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public movePackage_argsTupleScheme isMethod() {
                return new movePackage_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<movePackage_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, movePackage_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, movePackage_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod(isNameExpr.isMethod());
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<movePackage_result, movePackage_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new movePackage_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new movePackage_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(movePackage_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(movePackage_result isParameter) {
        }

        public movePackage_result isMethod() {
            return new movePackage_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof movePackage_result)
                return this.isMethod((movePackage_result) isNameExpr);
            return true;
        }

        public boolean isMethod(movePackage_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(movePackage_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            movePackage_result isVariable = (movePackage_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public movePackage_resultStandardScheme isMethod() {
                return new movePackage_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<movePackage_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, movePackage_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, movePackage_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public movePackage_resultTupleScheme isMethod() {
                return new movePackage_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<movePackage_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, movePackage_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, movePackage_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<moveFiles_args, moveFiles_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new moveFiles_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new moveFiles_argsTupleSchemeFactory());
        }

        // isComment
        public List<Integer> isVariable;

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            FIDS((short) isIntegerConstant, "isStringConstant"), PID((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"))));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(moveFiles_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<Integer> isParameter, int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(moveFiles_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            if (isNameExpr.isMethod()) {
                List<Integer> isVariable = new ArrayList<Integer>();
                for (Integer isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public moveFiles_args isMethod() {
            return new moveFiles_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<Integer> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(int isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<Integer>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<Integer> isMethod() {
            return this.isFieldAccessExpr;
        }

        public moveFiles_args isMethod(List<Integer> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public moveFiles_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<Integer>) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof moveFiles_args)
                return this.isMethod((moveFiles_args) isNameExpr);
            return true;
        }

        public boolean isMethod(moveFiles_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(moveFiles_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            moveFiles_args isVariable = (moveFiles_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public moveFiles_argsStandardScheme isMethod() {
                return new moveFiles_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<moveFiles_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, moveFiles_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<Integer>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        int isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, moveFiles_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (int isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public moveFiles_argsTupleScheme isMethod() {
                return new moveFiles_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<moveFiles_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, moveFiles_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (int isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, moveFiles_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<Integer>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            int isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<moveFiles_result, moveFiles_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new moveFiles_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new moveFiles_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(moveFiles_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(moveFiles_result isParameter) {
        }

        public moveFiles_result isMethod() {
            return new moveFiles_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof moveFiles_result)
                return this.isMethod((moveFiles_result) isNameExpr);
            return true;
        }

        public boolean isMethod(moveFiles_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(moveFiles_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            moveFiles_result isVariable = (moveFiles_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public moveFiles_resultStandardScheme isMethod() {
                return new moveFiles_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<moveFiles_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, moveFiles_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, moveFiles_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public moveFiles_resultTupleScheme isMethod() {
                return new moveFiles_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<moveFiles_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, moveFiles_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, moveFiles_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<orderPackage_args, orderPackage_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new orderPackage_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new orderPackage_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        // isComment
        public short isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PID((short) isIntegerConstant, "isStringConstant"), POSITION((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(orderPackage_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter, short isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(orderPackage_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public orderPackage_args isMethod() {
            return new orderPackage_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public orderPackage_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public short isMethod() {
            return this.isFieldAccessExpr;
        }

        public orderPackage_args isMethod(short isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Short) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof orderPackage_args)
                return this.isMethod((orderPackage_args) isNameExpr);
            return true;
        }

        public boolean isMethod(orderPackage_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(orderPackage_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            orderPackage_args isVariable = (orderPackage_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public orderPackage_argsStandardScheme isMethod() {
                return new orderPackage_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<orderPackage_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderPackage_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderPackage_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public orderPackage_argsTupleScheme isMethod() {
                return new orderPackage_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<orderPackage_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderPackage_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderPackage_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<orderPackage_result, orderPackage_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new orderPackage_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new orderPackage_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(orderPackage_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(orderPackage_result isParameter) {
        }

        public orderPackage_result isMethod() {
            return new orderPackage_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof orderPackage_result)
                return this.isMethod((orderPackage_result) isNameExpr);
            return true;
        }

        public boolean isMethod(orderPackage_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(orderPackage_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            orderPackage_result isVariable = (orderPackage_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public orderPackage_resultStandardScheme isMethod() {
                return new orderPackage_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<orderPackage_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderPackage_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderPackage_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public orderPackage_resultTupleScheme isMethod() {
                return new orderPackage_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<orderPackage_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderPackage_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderPackage_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<orderFile_args, orderFile_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new orderFile_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new orderFile_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        // isComment
        public short isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            FID((short) isIntegerConstant, "isStringConstant"), POSITION((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(orderFile_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter, short isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(orderFile_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public orderFile_args isMethod() {
            return new orderFile_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public orderFile_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public short isMethod() {
            return this.isFieldAccessExpr;
        }

        public orderFile_args isMethod(short isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Short) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof orderFile_args)
                return this.isMethod((orderFile_args) isNameExpr);
            return true;
        }

        public boolean isMethod(orderFile_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(orderFile_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            orderFile_args isVariable = (orderFile_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public orderFile_argsStandardScheme isMethod() {
                return new orderFile_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<orderFile_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderFile_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderFile_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public orderFile_argsTupleScheme isMethod() {
                return new orderFile_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<orderFile_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderFile_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderFile_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<orderFile_result, orderFile_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new orderFile_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new orderFile_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(orderFile_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(orderFile_result isParameter) {
        }

        public orderFile_result isMethod() {
            return new orderFile_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof orderFile_result)
                return this.isMethod((orderFile_result) isNameExpr);
            return true;
        }

        public boolean isMethod(orderFile_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(orderFile_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            orderFile_result isVariable = (orderFile_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public orderFile_resultStandardScheme isMethod() {
                return new orderFile_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<orderFile_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderFile_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderFile_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public orderFile_resultTupleScheme isMethod() {
                return new orderFile_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<orderFile_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderFile_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, orderFile_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<setPackageData_args, setPackageData_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new setPackageData_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new setPackageData_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        // isComment
        public Map<String, String> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PID((short) isIntegerConstant, "isStringConstant"), DATA((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr), new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(setPackageData_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter, Map<String, String> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(setPackageData_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            if (isNameExpr.isMethod()) {
                Map<String, String> isVariable = new HashMap<String, String>();
                for (Map.Entry<String, String> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                    String isVariable = isNameExpr.isMethod();
                    String isVariable = isNameExpr.isMethod();
                    String isVariable = isNameExpr;
                    String isVariable = isNameExpr;
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public setPackageData_args isMethod() {
            return new setPackageData_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public setPackageData_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter, String isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new HashMap<String, String>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
        }

        public Map<String, String> isMethod() {
            return this.isFieldAccessExpr;
        }

        public setPackageData_args isMethod(Map<String, String> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Map<String, String>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof setPackageData_args)
                return this.isMethod((setPackageData_args) isNameExpr);
            return true;
        }

        public boolean isMethod(setPackageData_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(setPackageData_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            setPackageData_args isVariable = (setPackageData_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setPackageData_argsStandardScheme isMethod() {
                return new setPackageData_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<setPackageData_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageData_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new HashMap<String, String>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        // isComment
                                        String isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageData_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (Map.Entry<String, String> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod(isNameExpr.isMethod());
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setPackageData_argsTupleScheme isMethod() {
                return new setPackageData_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<setPackageData_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageData_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (Map.Entry<String, String> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod(isNameExpr.isMethod());
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageData_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new HashMap<String, String>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            // isComment
                            String isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<setPackageData_result, setPackageData_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new setPackageData_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new setPackageData_resultTupleSchemeFactory());
        }

        // isComment
        public PackageDoesNotExists isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            E((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(setPackageData_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(PackageDoesNotExists isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(setPackageData_result isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new PackageDoesNotExists(isNameExpr.isFieldAccessExpr);
            }
        }

        public setPackageData_result isMethod() {
            return new setPackageData_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public PackageDoesNotExists isMethod() {
            return this.isFieldAccessExpr;
        }

        public setPackageData_result isMethod(PackageDoesNotExists isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((PackageDoesNotExists) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof setPackageData_result)
                return this.isMethod((setPackageData_result) isNameExpr);
            return true;
        }

        public boolean isMethod(setPackageData_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(setPackageData_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            setPackageData_result isVariable = (setPackageData_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setPackageData_resultStandardScheme isMethod() {
                return new setPackageData_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<setPackageData_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageData_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new PackageDoesNotExists();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageData_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setPackageData_resultTupleScheme isMethod() {
                return new setPackageData_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<setPackageData_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageData_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setPackageData_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new PackageDoesNotExists();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<deleteFinished_args, deleteFinished_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new deleteFinished_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new deleteFinished_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(deleteFinished_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(deleteFinished_args isParameter) {
        }

        public deleteFinished_args isMethod() {
            return new deleteFinished_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof deleteFinished_args)
                return this.isMethod((deleteFinished_args) isNameExpr);
            return true;
        }

        public boolean isMethod(deleteFinished_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(deleteFinished_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            deleteFinished_args isVariable = (deleteFinished_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public deleteFinished_argsStandardScheme isMethod() {
                return new deleteFinished_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<deleteFinished_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFinished_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFinished_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public deleteFinished_argsTupleScheme isMethod() {
                return new deleteFinished_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<deleteFinished_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFinished_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFinished_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<deleteFinished_result, deleteFinished_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new deleteFinished_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new deleteFinished_resultTupleSchemeFactory());
        }

        // isComment
        public List<Integer> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(deleteFinished_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<Integer> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(deleteFinished_result isParameter) {
            if (isNameExpr.isMethod()) {
                List<Integer> isVariable = new ArrayList<Integer>();
                for (Integer isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public deleteFinished_result isMethod() {
            return new deleteFinished_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<Integer> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(int isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<Integer>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<Integer> isMethod() {
            return this.isFieldAccessExpr;
        }

        public deleteFinished_result isMethod(List<Integer> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<Integer>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof deleteFinished_result)
                return this.isMethod((deleteFinished_result) isNameExpr);
            return true;
        }

        public boolean isMethod(deleteFinished_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(deleteFinished_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            deleteFinished_result isVariable = (deleteFinished_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public deleteFinished_resultStandardScheme isMethod() {
                return new deleteFinished_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<deleteFinished_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFinished_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<Integer>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        int isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFinished_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (int isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public deleteFinished_resultTupleScheme isMethod() {
                return new deleteFinished_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<deleteFinished_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFinished_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (int isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, deleteFinished_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<Integer>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            int isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<restartFailed_args, restartFailed_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new restartFailed_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new restartFailed_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(restartFailed_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(restartFailed_args isParameter) {
        }

        public restartFailed_args isMethod() {
            return new restartFailed_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof restartFailed_args)
                return this.isMethod((restartFailed_args) isNameExpr);
            return true;
        }

        public boolean isMethod(restartFailed_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(restartFailed_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            restartFailed_args isVariable = (restartFailed_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restartFailed_argsStandardScheme isMethod() {
                return new restartFailed_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<restartFailed_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFailed_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFailed_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restartFailed_argsTupleScheme isMethod() {
                return new restartFailed_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<restartFailed_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFailed_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFailed_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<restartFailed_result, restartFailed_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new restartFailed_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new restartFailed_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(restartFailed_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(restartFailed_result isParameter) {
        }

        public restartFailed_result isMethod() {
            return new restartFailed_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof restartFailed_result)
                return this.isMethod((restartFailed_result) isNameExpr);
            return true;
        }

        public boolean isMethod(restartFailed_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(restartFailed_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            restartFailed_result isVariable = (restartFailed_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restartFailed_resultStandardScheme isMethod() {
                return new restartFailed_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<restartFailed_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFailed_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFailed_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public restartFailed_resultTupleScheme isMethod() {
                return new restartFailed_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<restartFailed_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFailed_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, restartFailed_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<isCaptchaWaiting_args, isCaptchaWaiting_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new isCaptchaWaiting_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new isCaptchaWaiting_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isCaptchaWaiting_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(isCaptchaWaiting_args isParameter) {
        }

        public isCaptchaWaiting_args isMethod() {
            return new isCaptchaWaiting_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof isCaptchaWaiting_args)
                return this.isMethod((isCaptchaWaiting_args) isNameExpr);
            return true;
        }

        public boolean isMethod(isCaptchaWaiting_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(isCaptchaWaiting_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            isCaptchaWaiting_args isVariable = (isCaptchaWaiting_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public isCaptchaWaiting_argsStandardScheme isMethod() {
                return new isCaptchaWaiting_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<isCaptchaWaiting_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isCaptchaWaiting_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isCaptchaWaiting_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public isCaptchaWaiting_argsTupleScheme isMethod() {
                return new isCaptchaWaiting_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<isCaptchaWaiting_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isCaptchaWaiting_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isCaptchaWaiting_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<isCaptchaWaiting_result, isCaptchaWaiting_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new isCaptchaWaiting_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new isCaptchaWaiting_resultTupleSchemeFactory());
        }

        // isComment
        public boolean isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isCaptchaWaiting_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(boolean isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(isCaptchaWaiting_result isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public isCaptchaWaiting_result isMethod() {
            return new isCaptchaWaiting_result(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = true;
        }

        public boolean isMethod() {
            return this.isFieldAccessExpr;
        }

        public isCaptchaWaiting_result isMethod(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Boolean) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof isCaptchaWaiting_result)
                return this.isMethod((isCaptchaWaiting_result) isNameExpr);
            return true;
        }

        public boolean isMethod(isCaptchaWaiting_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(isCaptchaWaiting_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            isCaptchaWaiting_result isVariable = (isCaptchaWaiting_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public isCaptchaWaiting_resultStandardScheme isMethod() {
                return new isCaptchaWaiting_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<isCaptchaWaiting_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isCaptchaWaiting_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isCaptchaWaiting_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public isCaptchaWaiting_resultTupleScheme isMethod() {
                return new isCaptchaWaiting_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<isCaptchaWaiting_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isCaptchaWaiting_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, isCaptchaWaiting_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getCaptchaTask_args, getCaptchaTask_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getCaptchaTask_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getCaptchaTask_argsTupleSchemeFactory());
        }

        // isComment
        public boolean isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            EXCLUSIVE((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getCaptchaTask_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(boolean isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(getCaptchaTask_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public getCaptchaTask_args isMethod() {
            return new getCaptchaTask_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = true;
        }

        public boolean isMethod() {
            return this.isFieldAccessExpr;
        }

        public getCaptchaTask_args isMethod(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Boolean) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getCaptchaTask_args)
                return this.isMethod((getCaptchaTask_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getCaptchaTask_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getCaptchaTask_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getCaptchaTask_args isVariable = (getCaptchaTask_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCaptchaTask_argsStandardScheme isMethod() {
                return new getCaptchaTask_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getCaptchaTask_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTask_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTask_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCaptchaTask_argsTupleScheme isMethod() {
                return new getCaptchaTask_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getCaptchaTask_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTask_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTask_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getCaptchaTask_result, getCaptchaTask_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getCaptchaTask_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getCaptchaTask_resultTupleSchemeFactory());
        }

        // isComment
        public CaptchaTask isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, CaptchaTask.class)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getCaptchaTask_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(CaptchaTask isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getCaptchaTask_result isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new CaptchaTask(isNameExpr.isFieldAccessExpr);
            }
        }

        public getCaptchaTask_result isMethod() {
            return new getCaptchaTask_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public CaptchaTask isMethod() {
            return this.isFieldAccessExpr;
        }

        public getCaptchaTask_result isMethod(CaptchaTask isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((CaptchaTask) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getCaptchaTask_result)
                return this.isMethod((getCaptchaTask_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getCaptchaTask_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getCaptchaTask_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getCaptchaTask_result isVariable = (getCaptchaTask_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCaptchaTask_resultStandardScheme isMethod() {
                return new getCaptchaTask_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getCaptchaTask_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTask_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new CaptchaTask();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTask_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCaptchaTask_resultTupleScheme isMethod() {
                return new getCaptchaTask_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getCaptchaTask_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTask_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTask_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new CaptchaTask();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getCaptchaTaskStatus_args, getCaptchaTaskStatus_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getCaptchaTaskStatus_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getCaptchaTaskStatus_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            TID((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getCaptchaTaskStatus_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(getCaptchaTaskStatus_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public getCaptchaTaskStatus_args isMethod() {
            return new getCaptchaTaskStatus_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public getCaptchaTaskStatus_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getCaptchaTaskStatus_args)
                return this.isMethod((getCaptchaTaskStatus_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getCaptchaTaskStatus_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getCaptchaTaskStatus_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getCaptchaTaskStatus_args isVariable = (getCaptchaTaskStatus_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCaptchaTaskStatus_argsStandardScheme isMethod() {
                return new getCaptchaTaskStatus_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getCaptchaTaskStatus_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTaskStatus_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTaskStatus_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCaptchaTaskStatus_argsTupleScheme isMethod() {
                return new getCaptchaTaskStatus_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getCaptchaTaskStatus_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTaskStatus_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTaskStatus_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getCaptchaTaskStatus_result, getCaptchaTaskStatus_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getCaptchaTaskStatus_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getCaptchaTaskStatus_resultTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getCaptchaTaskStatus_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getCaptchaTaskStatus_result isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public getCaptchaTaskStatus_result isMethod() {
            return new getCaptchaTaskStatus_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public getCaptchaTaskStatus_result isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getCaptchaTaskStatus_result)
                return this.isMethod((getCaptchaTaskStatus_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getCaptchaTaskStatus_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getCaptchaTaskStatus_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getCaptchaTaskStatus_result isVariable = (getCaptchaTaskStatus_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCaptchaTaskStatus_resultStandardScheme isMethod() {
                return new getCaptchaTaskStatus_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getCaptchaTaskStatus_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTaskStatus_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTaskStatus_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getCaptchaTaskStatus_resultTupleScheme isMethod() {
                return new getCaptchaTaskStatus_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getCaptchaTaskStatus_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTaskStatus_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getCaptchaTaskStatus_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<setCaptchaResult_args, setCaptchaResult_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new setCaptchaResult_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new setCaptchaResult_argsTupleSchemeFactory());
        }

        // isComment
        public int isVariable;

        // isComment
        public String isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            TID((short) isIntegerConstant, "isStringConstant"), RESULT((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(setCaptchaResult_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(int isParameter, String isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(setCaptchaResult_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public setCaptchaResult_args isMethod() {
            return new setCaptchaResult_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = isIntegerConstant;
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return this.isFieldAccessExpr;
        }

        public setCaptchaResult_args isMethod(int isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public setCaptchaResult_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Integer) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof setCaptchaResult_args)
                return this.isMethod((setCaptchaResult_args) isNameExpr);
            return true;
        }

        public boolean isMethod(setCaptchaResult_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(setCaptchaResult_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            setCaptchaResult_args isVariable = (setCaptchaResult_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setCaptchaResult_argsStandardScheme isMethod() {
                return new setCaptchaResult_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<setCaptchaResult_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setCaptchaResult_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setCaptchaResult_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setCaptchaResult_argsTupleScheme isMethod() {
                return new setCaptchaResult_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<setCaptchaResult_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setCaptchaResult_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setCaptchaResult_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<setCaptchaResult_result, setCaptchaResult_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new setCaptchaResult_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new setCaptchaResult_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(setCaptchaResult_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(setCaptchaResult_result isParameter) {
        }

        public setCaptchaResult_result isMethod() {
            return new setCaptchaResult_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof setCaptchaResult_result)
                return this.isMethod((setCaptchaResult_result) isNameExpr);
            return true;
        }

        public boolean isMethod(setCaptchaResult_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(setCaptchaResult_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            setCaptchaResult_result isVariable = (setCaptchaResult_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setCaptchaResult_resultStandardScheme isMethod() {
                return new setCaptchaResult_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<setCaptchaResult_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setCaptchaResult_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setCaptchaResult_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public setCaptchaResult_resultTupleScheme isMethod() {
                return new setCaptchaResult_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<setCaptchaResult_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setCaptchaResult_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, setCaptchaResult_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getEvents_args, getEvents_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getEvents_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getEvents_argsTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            UUID((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getEvents_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getEvents_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public getEvents_args isMethod() {
            return new getEvents_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public getEvents_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getEvents_args)
                return this.isMethod((getEvents_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getEvents_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getEvents_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getEvents_args isVariable = (getEvents_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getEvents_argsStandardScheme isMethod() {
                return new getEvents_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getEvents_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getEvents_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getEvents_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getEvents_argsTupleScheme isMethod() {
                return new getEvents_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getEvents_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getEvents_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getEvents_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getEvents_result, getEvents_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getEvents_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getEvents_resultTupleSchemeFactory());
        }

        // isComment
        public List<EventInfo> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, EventInfo.class))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getEvents_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<EventInfo> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getEvents_result isParameter) {
            if (isNameExpr.isMethod()) {
                List<EventInfo> isVariable = new ArrayList<EventInfo>();
                for (EventInfo isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(new EventInfo(isNameExpr));
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getEvents_result isMethod() {
            return new getEvents_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<EventInfo> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(EventInfo isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<EventInfo>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<EventInfo> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getEvents_result isMethod(List<EventInfo> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<EventInfo>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getEvents_result)
                return this.isMethod((getEvents_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getEvents_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getEvents_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getEvents_result isVariable = (getEvents_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getEvents_resultStandardScheme isMethod() {
                return new getEvents_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getEvents_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getEvents_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<EventInfo>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        EventInfo isVariable;
                                        isNameExpr = new EventInfo();
                                        isNameExpr.isMethod(isNameExpr);
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getEvents_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (EventInfo isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getEvents_resultTupleScheme isMethod() {
                return new getEvents_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getEvents_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getEvents_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (EventInfo isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getEvents_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<EventInfo>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            EventInfo isVariable;
                            isNameExpr = new EventInfo();
                            isNameExpr.isMethod(isNameExpr);
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getAccounts_args, getAccounts_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getAccounts_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getAccounts_argsTupleSchemeFactory());
        }

        // isComment
        public boolean isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            REFRESH((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getAccounts_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(boolean isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(getAccounts_args isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public getAccounts_args isMethod() {
            return new getAccounts_args(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = true;
        }

        public boolean isMethod() {
            return this.isFieldAccessExpr;
        }

        public getAccounts_args isMethod(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Boolean) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getAccounts_args)
                return this.isMethod((getAccounts_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getAccounts_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getAccounts_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getAccounts_args isVariable = (getAccounts_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                // isComment
                isNameExpr = new BitSet(isIntegerConstant);
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAccounts_argsStandardScheme isMethod() {
                return new getAccounts_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getAccounts_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccounts_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccounts_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAccounts_argsTupleScheme isMethod() {
                return new getAccounts_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getAccounts_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccounts_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccounts_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getAccounts_result, getAccounts_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getAccounts_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getAccounts_resultTupleSchemeFactory());
        }

        // isComment
        public List<AccountInfo> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, AccountInfo.class))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getAccounts_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<AccountInfo> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getAccounts_result isParameter) {
            if (isNameExpr.isMethod()) {
                List<AccountInfo> isVariable = new ArrayList<AccountInfo>();
                for (AccountInfo isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(new AccountInfo(isNameExpr));
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getAccounts_result isMethod() {
            return new getAccounts_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<AccountInfo> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(AccountInfo isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<AccountInfo>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<AccountInfo> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getAccounts_result isMethod(List<AccountInfo> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<AccountInfo>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getAccounts_result)
                return this.isMethod((getAccounts_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getAccounts_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getAccounts_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getAccounts_result isVariable = (getAccounts_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAccounts_resultStandardScheme isMethod() {
                return new getAccounts_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getAccounts_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccounts_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<AccountInfo>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        AccountInfo isVariable;
                                        isNameExpr = new AccountInfo();
                                        isNameExpr.isMethod(isNameExpr);
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccounts_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (AccountInfo isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAccounts_resultTupleScheme isMethod() {
                return new getAccounts_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getAccounts_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccounts_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (AccountInfo isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccounts_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<AccountInfo>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            AccountInfo isVariable;
                            isNameExpr = new AccountInfo();
                            isNameExpr.isMethod(isNameExpr);
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getAccountTypes_args, getAccountTypes_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getAccountTypes_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getAccountTypes_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getAccountTypes_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(getAccountTypes_args isParameter) {
        }

        public getAccountTypes_args isMethod() {
            return new getAccountTypes_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getAccountTypes_args)
                return this.isMethod((getAccountTypes_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getAccountTypes_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getAccountTypes_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getAccountTypes_args isVariable = (getAccountTypes_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAccountTypes_argsStandardScheme isMethod() {
                return new getAccountTypes_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getAccountTypes_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccountTypes_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccountTypes_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAccountTypes_argsTupleScheme isMethod() {
                return new getAccountTypes_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getAccountTypes_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccountTypes_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccountTypes_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getAccountTypes_result, getAccountTypes_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getAccountTypes_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getAccountTypes_resultTupleSchemeFactory());
        }

        // isComment
        public List<String> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.ListMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getAccountTypes_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(List<String> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getAccountTypes_result isParameter) {
            if (isNameExpr.isMethod()) {
                List<String> isVariable = new ArrayList<String>();
                for (String isVariable : isNameExpr.isFieldAccessExpr) {
                    isNameExpr.isMethod(isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getAccountTypes_result isMethod() {
            return new getAccountTypes_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public java.util.Iterator<String> isMethod() {
            return (this.isFieldAccessExpr == null) ? null : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new ArrayList<String>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr);
        }

        public List<String> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getAccountTypes_result isMethod(List<String> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((List<String>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getAccountTypes_result)
                return this.isMethod((getAccountTypes_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getAccountTypes_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getAccountTypes_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getAccountTypes_result isVariable = (getAccountTypes_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAccountTypes_resultStandardScheme isMethod() {
                return new getAccountTypes_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getAccountTypes_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccountTypes_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TList isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccountTypes_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAccountTypes_resultTupleScheme isMethod() {
                return new getAccountTypes_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getAccountTypes_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccountTypes_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (String isVariable : isNameExpr.isFieldAccessExpr) {
                            isNameExpr.isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAccountTypes_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TList isVariable = new org.apache.thrift.protocol.TList(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new ArrayList<String>(isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<updateAccount_args, updateAccount_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new updateAccount_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new updateAccount_argsTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        // isComment
        public String isVariable;

        // isComment
        public String isVariable;

        // isComment
        public Map<String, String> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PLUGIN((short) isIntegerConstant, "isStringConstant"), ACCOUNT((short) isIntegerConstant, "isStringConstant"), PASSWORD((short) isIntegerConstant, "isStringConstant"), OPTIONS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr), new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(updateAccount_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter, String isParameter, String isParameter, Map<String, String> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(updateAccount_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                Map<String, String> isVariable = new HashMap<String, String>();
                for (Map.Entry<String, String> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                    String isVariable = isNameExpr.isMethod();
                    String isVariable = isNameExpr.isMethod();
                    String isVariable = isNameExpr;
                    String isVariable = isNameExpr;
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public updateAccount_args isMethod() {
            return new updateAccount_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public updateAccount_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public updateAccount_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public updateAccount_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter, String isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new HashMap<String, String>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
        }

        public Map<String, String> isMethod() {
            return this.isFieldAccessExpr;
        }

        public updateAccount_args isMethod(Map<String, String> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Map<String, String>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof updateAccount_args)
                return this.isMethod((updateAccount_args) isNameExpr);
            return true;
        }

        public boolean isMethod(updateAccount_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(updateAccount_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            updateAccount_args isVariable = (updateAccount_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public updateAccount_argsStandardScheme isMethod() {
                return new updateAccount_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<updateAccount_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, updateAccount_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new HashMap<String, String>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        // isComment
                                        String isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, updateAccount_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (Map.Entry<String, String> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod(isNameExpr.isMethod());
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public updateAccount_argsTupleScheme isMethod() {
                return new updateAccount_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<updateAccount_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, updateAccount_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (Map.Entry<String, String> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod(isNameExpr.isMethod());
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, updateAccount_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new HashMap<String, String>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            // isComment
                            String isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<updateAccount_result, updateAccount_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new updateAccount_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new updateAccount_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(updateAccount_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(updateAccount_result isParameter) {
        }

        public updateAccount_result isMethod() {
            return new updateAccount_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof updateAccount_result)
                return this.isMethod((updateAccount_result) isNameExpr);
            return true;
        }

        public boolean isMethod(updateAccount_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(updateAccount_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            updateAccount_result isVariable = (updateAccount_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public updateAccount_resultStandardScheme isMethod() {
                return new updateAccount_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<updateAccount_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, updateAccount_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, updateAccount_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public updateAccount_resultTupleScheme isMethod() {
                return new updateAccount_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<updateAccount_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, updateAccount_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, updateAccount_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<removeAccount_args, removeAccount_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new removeAccount_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new removeAccount_argsTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        // isComment
        public String isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PLUGIN((short) isIntegerConstant, "isStringConstant"), ACCOUNT((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(removeAccount_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter, String isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(removeAccount_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public removeAccount_args isMethod() {
            return new removeAccount_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public removeAccount_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public removeAccount_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof removeAccount_args)
                return this.isMethod((removeAccount_args) isNameExpr);
            return true;
        }

        public boolean isMethod(removeAccount_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(removeAccount_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            removeAccount_args isVariable = (removeAccount_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public removeAccount_argsStandardScheme isMethod() {
                return new removeAccount_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<removeAccount_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, removeAccount_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, removeAccount_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public removeAccount_argsTupleScheme isMethod() {
                return new removeAccount_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<removeAccount_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, removeAccount_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, removeAccount_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<removeAccount_result, removeAccount_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new removeAccount_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new removeAccount_resultTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(removeAccount_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(removeAccount_result isParameter) {
        }

        public removeAccount_result isMethod() {
            return new removeAccount_result(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof removeAccount_result)
                return this.isMethod((removeAccount_result) isNameExpr);
            return true;
        }

        public boolean isMethod(removeAccount_result isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(removeAccount_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            removeAccount_result isVariable = (removeAccount_result) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public removeAccount_resultStandardScheme isMethod() {
                return new removeAccount_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<removeAccount_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, removeAccount_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, removeAccount_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public removeAccount_resultTupleScheme isMethod() {
                return new removeAccount_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<removeAccount_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, removeAccount_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, removeAccount_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new login_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new login_argsTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        // isComment
        public String isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            USERNAME((short) isIntegerConstant, "isStringConstant"), PASSWORD((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(login_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter, String isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(login_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public login_args isMethod() {
            return new login_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public login_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public login_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof login_args)
                return this.isMethod((login_args) isNameExpr);
            return true;
        }

        public boolean isMethod(login_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(login_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            login_args isVariable = (login_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public login_argsStandardScheme isMethod() {
                return new login_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<login_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, login_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, login_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public login_argsTupleScheme isMethod() {
                return new login_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<login_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, login_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, login_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new login_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new login_resultTupleSchemeFactory());
        }

        // isComment
        public boolean isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(login_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(boolean isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(login_result isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public login_result isMethod() {
            return new login_result(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = true;
        }

        public boolean isMethod() {
            return this.isFieldAccessExpr;
        }

        public login_result isMethod(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Boolean) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof login_result)
                return this.isMethod((login_result) isNameExpr);
            return true;
        }

        public boolean isMethod(login_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(login_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            login_result isVariable = (login_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public login_resultStandardScheme isMethod() {
                return new login_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<login_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, login_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, login_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public login_resultTupleScheme isMethod() {
                return new login_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<login_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, login_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, login_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getUserData_args, getUserData_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getUserData_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getUserData_argsTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        // isComment
        public String isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            USERNAME((short) isIntegerConstant, "isStringConstant"), PASSWORD((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getUserData_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter, String isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getUserData_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public getUserData_args isMethod() {
            return new getUserData_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public getUserData_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public getUserData_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getUserData_args)
                return this.isMethod((getUserData_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getUserData_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getUserData_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getUserData_args isVariable = (getUserData_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getUserData_argsStandardScheme isMethod() {
                return new getUserData_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getUserData_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getUserData_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getUserData_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getUserData_argsTupleScheme isMethod() {
                return new getUserData_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getUserData_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getUserData_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getUserData_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getUserData_result, getUserData_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getUserData_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getUserData_resultTupleSchemeFactory());
        }

        // isComment
        public UserData isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, UserData.class)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getUserData_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(UserData isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getUserData_result isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new UserData(isNameExpr.isFieldAccessExpr);
            }
        }

        public getUserData_result isMethod() {
            return new getUserData_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public UserData isMethod() {
            return this.isFieldAccessExpr;
        }

        public getUserData_result isMethod(UserData isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((UserData) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getUserData_result)
                return this.isMethod((getUserData_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getUserData_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getUserData_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getUserData_result isVariable = (getUserData_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getUserData_resultStandardScheme isMethod() {
                return new getUserData_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getUserData_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getUserData_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new UserData();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getUserData_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getUserData_resultTupleScheme isMethod() {
                return new getUserData_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getUserData_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getUserData_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getUserData_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new UserData();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getAllUserData_args, getAllUserData_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getAllUserData_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getAllUserData_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getAllUserData_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(getAllUserData_args isParameter) {
        }

        public getAllUserData_args isMethod() {
            return new getAllUserData_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getAllUserData_args)
                return this.isMethod((getAllUserData_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getAllUserData_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getAllUserData_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getAllUserData_args isVariable = (getAllUserData_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAllUserData_argsStandardScheme isMethod() {
                return new getAllUserData_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getAllUserData_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllUserData_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllUserData_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAllUserData_argsTupleScheme isMethod() {
                return new getAllUserData_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getAllUserData_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllUserData_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllUserData_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getAllUserData_result, getAllUserData_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getAllUserData_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getAllUserData_resultTupleSchemeFactory());
        }

        // isComment
        public Map<String, UserData> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr), new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, UserData.class))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getAllUserData_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(Map<String, UserData> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getAllUserData_result isParameter) {
            if (isNameExpr.isMethod()) {
                Map<String, UserData> isVariable = new HashMap<String, UserData>();
                for (Map.Entry<String, UserData> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                    String isVariable = isNameExpr.isMethod();
                    UserData isVariable = isNameExpr.isMethod();
                    String isVariable = isNameExpr;
                    UserData isVariable = new UserData(isNameExpr);
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getAllUserData_result isMethod() {
            return new getAllUserData_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter, UserData isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new HashMap<String, UserData>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
        }

        public Map<String, UserData> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getAllUserData_result isMethod(Map<String, UserData> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Map<String, UserData>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getAllUserData_result)
                return this.isMethod((getAllUserData_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getAllUserData_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getAllUserData_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getAllUserData_result isVariable = (getAllUserData_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAllUserData_resultStandardScheme isMethod() {
                return new getAllUserData_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getAllUserData_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllUserData_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new HashMap<String, UserData>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        // isComment
                                        UserData isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr = new UserData();
                                        isNameExpr.isMethod(isNameExpr);
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllUserData_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (Map.Entry<String, UserData> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod().isMethod(isNameExpr);
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAllUserData_resultTupleScheme isMethod() {
                return new getAllUserData_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getAllUserData_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllUserData_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (Map.Entry<String, UserData> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod().isMethod(isNameExpr);
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllUserData_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new HashMap<String, UserData>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            // isComment
                            UserData isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr = new UserData();
                            isNameExpr.isMethod(isNameExpr);
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getServices_args, getServices_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getServices_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getServices_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getServices_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(getServices_args isParameter) {
        }

        public getServices_args isMethod() {
            return new getServices_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getServices_args)
                return this.isMethod((getServices_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getServices_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getServices_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getServices_args isVariable = (getServices_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getServices_argsStandardScheme isMethod() {
                return new getServices_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getServices_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServices_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServices_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getServices_argsTupleScheme isMethod() {
                return new getServices_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getServices_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServices_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServices_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getServices_result, getServices_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getServices_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getServices_resultTupleSchemeFactory());
        }

        // isComment
        public Map<String, Map<String, String>> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"), new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr), new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getServices_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(Map<String, Map<String, String>> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getServices_result isParameter) {
            if (isNameExpr.isMethod()) {
                Map<String, Map<String, String>> isVariable = new HashMap<String, Map<String, String>>();
                for (Map.Entry<String, Map<String, String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                    String isVariable = isNameExpr.isMethod();
                    Map<String, String> isVariable = isNameExpr.isMethod();
                    String isVariable = isNameExpr;
                    Map<String, String> isVariable = new HashMap<String, String>();
                    for (Map.Entry<String, String> isVariable : isNameExpr.isMethod()) {
                        String isVariable = isNameExpr.isMethod();
                        String isVariable = isNameExpr.isMethod();
                        String isVariable = isNameExpr;
                        String isVariable = isNameExpr;
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getServices_result isMethod() {
            return new getServices_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter, Map<String, String> isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new HashMap<String, Map<String, String>>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
        }

        public Map<String, Map<String, String>> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getServices_result isMethod(Map<String, Map<String, String>> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Map<String, Map<String, String>>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getServices_result)
                return this.isMethod((getServices_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getServices_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getServices_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getServices_result isVariable = (getServices_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getServices_resultStandardScheme isMethod() {
                return new getServices_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getServices_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServices_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new HashMap<String, Map<String, String>>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        // isComment
                                        Map<String, String> isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        {
                                            org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                            isNameExpr = new HashMap<String, String>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                                // isComment
                                                String isVariable;
                                                // isComment
                                                String isVariable;
                                                isNameExpr = isNameExpr.isMethod();
                                                isNameExpr = isNameExpr.isMethod();
                                                isNameExpr.isMethod(isNameExpr, isNameExpr);
                                            }
                                            isNameExpr.isMethod();
                                        }
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServices_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (Map.Entry<String, Map<String, String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            {
                                isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod().isMethod()));
                                for (Map.Entry<String, String> isVariable : isNameExpr.isMethod().isMethod()) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod();
                            }
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getServices_resultTupleScheme isMethod() {
                return new getServices_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getServices_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServices_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (Map.Entry<String, Map<String, String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            {
                                isNameExpr.isMethod(isNameExpr.isMethod().isMethod());
                                for (Map.Entry<String, String> isVariable : isNameExpr.isMethod().isMethod()) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                            }
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getServices_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new HashMap<String, Map<String, String>>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            // isComment
                            Map<String, String> isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            {
                                org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                                isNameExpr = new HashMap<String, String>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                    // isComment
                                    String isVariable;
                                    // isComment
                                    String isVariable;
                                    isNameExpr = isNameExpr.isMethod();
                                    isNameExpr = isNameExpr.isMethod();
                                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                                }
                            }
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<hasService_args, hasService_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new hasService_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new hasService_argsTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        // isComment
        public String isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PLUGIN((short) isIntegerConstant, "isStringConstant"), FUNC((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(hasService_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter, String isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(hasService_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public hasService_args isMethod() {
            return new hasService_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public hasService_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public hasService_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof hasService_args)
                return this.isMethod((hasService_args) isNameExpr);
            return true;
        }

        public boolean isMethod(hasService_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(hasService_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            hasService_args isVariable = (hasService_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public hasService_argsStandardScheme isMethod() {
                return new hasService_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<hasService_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, hasService_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, hasService_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public hasService_argsTupleScheme isMethod() {
                return new hasService_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<hasService_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, hasService_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, hasService_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<hasService_result, hasService_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new hasService_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new hasService_resultTupleSchemeFactory());
        }

        // isComment
        public boolean isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        private static final int isVariable = isIntegerConstant;

        private BitSet isVariable = new BitSet(isIntegerConstant);

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(hasService_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(boolean isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
        }

        /**
         * isComment
         */
        public isConstructor(hasService_result isParameter) {
            isNameExpr.isMethod();
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
            this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
        }

        public hasService_result isMethod() {
            return new hasService_result(this);
        }

        @Override
        public void isMethod() {
            isMethod(true);
            this.isFieldAccessExpr = true;
        }

        public boolean isMethod() {
            return this.isFieldAccessExpr;
        }

        public hasService_result isMethod(boolean isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            isMethod(true);
            return this;
        }

        public void isMethod() {
            isNameExpr.isMethod(isNameExpr);
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(boolean isParameter) {
            isNameExpr.isMethod(isNameExpr, isNameExpr);
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Boolean) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isNameExpr.isMethod(isMethod());
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof hasService_result)
                return this.isMethod((hasService_result) isNameExpr);
            return true;
        }

        public boolean isMethod(hasService_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true;
            boolean isVariable = true;
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (this.isFieldAccessExpr != isNameExpr.isFieldAccessExpr)
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(hasService_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            hasService_result isVariable = (hasService_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod(this.isFieldAccessExpr);
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public hasService_resultStandardScheme isMethod() {
                return new hasService_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<hasService_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, hasService_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, hasService_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public hasService_resultTupleScheme isMethod() {
                return new hasService_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<hasService_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, hasService_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, hasService_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<call_args, call_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new call_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new call_argsTupleSchemeFactory());
        }

        // isComment
        public ServiceCall isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            INFO((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.StructMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, ServiceCall.class)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(call_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(ServiceCall isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(call_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new ServiceCall(isNameExpr.isFieldAccessExpr);
            }
        }

        public call_args isMethod() {
            return new call_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public ServiceCall isMethod() {
            return this.isFieldAccessExpr;
        }

        public call_args isMethod(ServiceCall isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((ServiceCall) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof call_args)
                return this.isMethod((call_args) isNameExpr);
            return true;
        }

        public boolean isMethod(call_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(call_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            call_args isVariable = (call_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public call_argsStandardScheme isMethod() {
                return new call_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<call_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, call_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new ServiceCall();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, call_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public call_argsTupleScheme isMethod() {
                return new call_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<call_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, call_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, call_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new ServiceCall();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<call_result, call_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new call_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new call_resultTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        // isComment
        public ServiceDoesNotExists isVariable;

        // isComment
        public ServiceException isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant"), EX((short) isIntegerConstant, "isStringConstant"), E((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(call_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter, ServiceDoesNotExists isParameter, ServiceException isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(call_result isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new ServiceDoesNotExists(isNameExpr.isFieldAccessExpr);
            }
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = new ServiceException(isNameExpr.isFieldAccessExpr);
            }
        }

        public call_result isMethod() {
            return new call_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public call_result isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public ServiceDoesNotExists isMethod() {
            return this.isFieldAccessExpr;
        }

        public call_result isMethod(ServiceDoesNotExists isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public ServiceException isMethod() {
            return this.isFieldAccessExpr;
        }

        public call_result isMethod(ServiceException isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((ServiceDoesNotExists) isNameExpr);
                    }
                    break;
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((ServiceException) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof call_result)
                return this.isMethod((call_result) isNameExpr);
            return true;
        }

        public boolean isMethod(call_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(call_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            call_result isVariable = (call_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            if (!isNameExpr)
                isNameExpr.isMethod("isStringConstant");
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public call_resultStandardScheme isMethod() {
                return new call_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<call_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, call_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new ServiceDoesNotExists();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = new ServiceException();
                                isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, call_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public call_resultTupleScheme isMethod() {
                return new call_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<call_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, call_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
                if (isNameExpr.isMethod()) {
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, call_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new ServiceDoesNotExists();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = new ServiceException();
                    isNameExpr.isFieldAccessExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getAllInfo_args, getAllInfo_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getAllInfo_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getAllInfo_argsTupleSchemeFactory());
        }

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getAllInfo_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        /**
         * isComment
         */
        public isConstructor(getAllInfo_args isParameter) {
        }

        public getAllInfo_args isMethod() {
            return new getAllInfo_args(this);
        }

        @Override
        public void isMethod() {
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getAllInfo_args)
                return this.isMethod((getAllInfo_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getAllInfo_args isParameter) {
            if (isNameExpr == null)
                return true;
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getAllInfo_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getAllInfo_args isVariable = (getAllInfo_args) isNameExpr;
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAllInfo_argsStandardScheme isMethod() {
                return new getAllInfo_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getAllInfo_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllInfo_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllInfo_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAllInfo_argsTupleScheme isMethod() {
                return new getAllInfo_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getAllInfo_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllInfo_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllInfo_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getAllInfo_result, getAllInfo_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getAllInfo_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getAllInfo_resultTupleSchemeFactory());
        }

        // isComment
        public Map<String, Map<String, String>> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant"), new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr), new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr)))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getAllInfo_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(Map<String, Map<String, String>> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getAllInfo_result isParameter) {
            if (isNameExpr.isMethod()) {
                Map<String, Map<String, String>> isVariable = new HashMap<String, Map<String, String>>();
                for (Map.Entry<String, Map<String, String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                    String isVariable = isNameExpr.isMethod();
                    Map<String, String> isVariable = isNameExpr.isMethod();
                    String isVariable = isNameExpr;
                    Map<String, String> isVariable = new HashMap<String, String>();
                    for (Map.Entry<String, String> isVariable : isNameExpr.isMethod()) {
                        String isVariable = isNameExpr.isMethod();
                        String isVariable = isNameExpr.isMethod();
                        String isVariable = isNameExpr;
                        String isVariable = isNameExpr;
                        isNameExpr.isMethod(isNameExpr, isNameExpr);
                    }
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getAllInfo_result isMethod() {
            return new getAllInfo_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter, Map<String, String> isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new HashMap<String, Map<String, String>>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
        }

        public Map<String, Map<String, String>> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getAllInfo_result isMethod(Map<String, Map<String, String>> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Map<String, Map<String, String>>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getAllInfo_result)
                return this.isMethod((getAllInfo_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getAllInfo_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getAllInfo_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getAllInfo_result isVariable = (getAllInfo_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAllInfo_resultStandardScheme isMethod() {
                return new getAllInfo_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getAllInfo_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllInfo_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new HashMap<String, Map<String, String>>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        // isComment
                                        Map<String, String> isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        {
                                            org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                            isNameExpr = new HashMap<String, String>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                            for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                                // isComment
                                                String isVariable;
                                                // isComment
                                                String isVariable;
                                                isNameExpr = isNameExpr.isMethod();
                                                isNameExpr = isNameExpr.isMethod();
                                                isNameExpr.isMethod(isNameExpr, isNameExpr);
                                            }
                                            isNameExpr.isMethod();
                                        }
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllInfo_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (Map.Entry<String, Map<String, String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            {
                                isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod().isMethod()));
                                for (Map.Entry<String, String> isVariable : isNameExpr.isMethod().isMethod()) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                                isNameExpr.isMethod();
                            }
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getAllInfo_resultTupleScheme isMethod() {
                return new getAllInfo_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getAllInfo_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllInfo_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (Map.Entry<String, Map<String, String>> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            {
                                isNameExpr.isMethod(isNameExpr.isMethod().isMethod());
                                for (Map.Entry<String, String> isVariable : isNameExpr.isMethod().isMethod()) {
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                    isNameExpr.isMethod(isNameExpr.isMethod());
                                }
                            }
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getAllInfo_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new HashMap<String, Map<String, String>>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            // isComment
                            Map<String, String> isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            {
                                org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                                isNameExpr = new HashMap<String, String>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                    // isComment
                                    String isVariable;
                                    // isComment
                                    String isVariable;
                                    isNameExpr = isNameExpr.isMethod();
                                    isNameExpr = isNameExpr.isMethod();
                                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                                }
                            }
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getInfoByPlugin_args, getInfoByPlugin_args._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getInfoByPlugin_argsStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getInfoByPlugin_argsTupleSchemeFactory());
        }

        // isComment
        public String isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PLUGIN((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, "isStringConstant")));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getInfoByPlugin_args.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(String isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getInfoByPlugin_args isParameter) {
            if (isNameExpr.isMethod()) {
                this.isFieldAccessExpr = isNameExpr.isFieldAccessExpr;
            }
        }

        public getInfoByPlugin_args isMethod() {
            return new getInfoByPlugin_args(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public String isMethod() {
            return this.isFieldAccessExpr;
        }

        public getInfoByPlugin_args isMethod(String isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((String) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getInfoByPlugin_args)
                return this.isMethod((getInfoByPlugin_args) isNameExpr);
            return true;
        }

        public boolean isMethod(getInfoByPlugin_args isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getInfoByPlugin_args isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getInfoByPlugin_args isVariable = (getInfoByPlugin_args) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getInfoByPlugin_argsStandardScheme isMethod() {
                return new getInfoByPlugin_argsStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getInfoByPlugin_args> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getInfoByPlugin_args isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getInfoByPlugin_args isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getInfoByPlugin_argsTupleScheme isMethod() {
                return new getInfoByPlugin_argsTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getInfoByPlugin_args> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getInfoByPlugin_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isNameExpr.isFieldAccessExpr);
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getInfoByPlugin_args isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    isNameExpr.isFieldAccessExpr = isNameExpr.isMethod();
                    isNameExpr.isMethod(true);
                }
            }
        }
    }

    public static class isClassOrIsInterface implements org.apache.thrift.TBase<getInfoByPlugin_result, getInfoByPlugin_result._Fields>, java.io.Serializable, Cloneable {

        private static final org.apache.thrift.protocol.TStruct isVariable = new org.apache.thrift.protocol.TStruct("isStringConstant");

        private static final org.apache.thrift.protocol.TField isVariable = new org.apache.thrift.protocol.TField("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, (short) isIntegerConstant);

        private static final Map<Class<? extends IScheme>, SchemeFactory> isVariable = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            isNameExpr.isMethod(StandardScheme.class, new getInfoByPlugin_resultStandardSchemeFactory());
            isNameExpr.isMethod(TupleScheme.class, new getInfoByPlugin_resultTupleSchemeFactory());
        }

        // isComment
        public Map<String, String> isVariable;

        /**
         * isComment
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) isIntegerConstant, "isStringConstant");

            private static final Map<String, _Fields> isVariable = new HashMap<String, _Fields>();

            static {
                for (_Fields isVariable : isNameExpr.isMethod(_Fields.class)) {
                    isNameExpr.isMethod(isNameExpr.isMethod(), isNameExpr);
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                switch(isNameExpr) {
                    case // isComment
                    isIntegerConstant:
                        return isNameExpr;
                    default:
                        return null;
                }
            }

            /**
             * isComment
             */
            public static _Fields isMethod(int isParameter) {
                _Fields isVariable = isMethod(isNameExpr);
                if (isNameExpr == null)
                    throw new IllegalArgumentException("isStringConstant" + isNameExpr + "isStringConstant");
                return isNameExpr;
            }

            /**
             * isComment
             */
            public static _Fields isMethod(String isParameter) {
                return isNameExpr.isMethod(isNameExpr);
            }

            private final short isVariable;

            private final String isVariable;

            isConstructor(short isParameter, String isParameter) {
                isNameExpr = isNameExpr;
                isNameExpr = isNameExpr;
            }

            public short isMethod() {
                return isNameExpr;
            }

            public String isMethod() {
                return isNameExpr;
            }
        }

        // isComment
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> isVariable = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            isNameExpr.isMethod(isNameExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldMetaData("isStringConstant", isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.MapMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr), new org.apache.thrift.meta_data.FieldValueMetaData(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr))));
            isNameExpr = isNameExpr.isMethod(isNameExpr);
            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(getInfoByPlugin_result.class, isNameExpr);
        }

        public isConstructor() {
        }

        public isConstructor(Map<String, String> isParameter) {
            this();
            this.isFieldAccessExpr = isNameExpr;
        }

        /**
         * isComment
         */
        public isConstructor(getInfoByPlugin_result isParameter) {
            if (isNameExpr.isMethod()) {
                Map<String, String> isVariable = new HashMap<String, String>();
                for (Map.Entry<String, String> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                    String isVariable = isNameExpr.isMethod();
                    String isVariable = isNameExpr.isMethod();
                    String isVariable = isNameExpr;
                    String isVariable = isNameExpr;
                    isNameExpr.isMethod(isNameExpr, isNameExpr);
                }
                this.isFieldAccessExpr = isNameExpr;
            }
        }

        public getInfoByPlugin_result isMethod() {
            return new getInfoByPlugin_result(this);
        }

        @Override
        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        public int isMethod() {
            return (this.isFieldAccessExpr == null) ? isIntegerConstant : this.isFieldAccessExpr.isMethod();
        }

        public void isMethod(String isParameter, String isParameter) {
            if (this.isFieldAccessExpr == null) {
                this.isFieldAccessExpr = new HashMap<String, String>();
            }
            this.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
        }

        public Map<String, String> isMethod() {
            return this.isFieldAccessExpr;
        }

        public getInfoByPlugin_result isMethod(Map<String, String> isParameter) {
            this.isFieldAccessExpr = isNameExpr;
            return this;
        }

        public void isMethod() {
            this.isFieldAccessExpr = null;
        }

        /**
         * isComment
         */
        public boolean isMethod() {
            return this.isFieldAccessExpr != null;
        }

        public void isMethod(boolean isParameter) {
            if (!isNameExpr) {
                this.isFieldAccessExpr = null;
            }
        }

        public void isMethod(_Fields isParameter, Object isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    if (isNameExpr == null) {
                        isMethod();
                    } else {
                        isMethod((Map<String, String>) isNameExpr);
                    }
                    break;
            }
        }

        public Object isMethod(_Fields isParameter) {
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        /**
         * isComment
         */
        public boolean isMethod(_Fields isParameter) {
            if (isNameExpr == null) {
                throw new IllegalArgumentException();
            }
            switch(isNameExpr) {
                case isNameExpr:
                    return isMethod();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean isMethod(Object isParameter) {
            if (isNameExpr == null)
                return true;
            if (isNameExpr instanceof getInfoByPlugin_result)
                return this.isMethod((getInfoByPlugin_result) isNameExpr);
            return true;
        }

        public boolean isMethod(getInfoByPlugin_result isParameter) {
            if (isNameExpr == null)
                return true;
            boolean isVariable = true && this.isMethod();
            boolean isVariable = true && isNameExpr.isMethod();
            if (isNameExpr || isNameExpr) {
                if (!(isNameExpr && isNameExpr))
                    return true;
                if (!this.isFieldAccessExpr.isMethod(isNameExpr.isFieldAccessExpr))
                    return true;
            }
            return true;
        }

        @Override
        public int isMethod() {
            return isIntegerConstant;
        }

        public int isMethod(getInfoByPlugin_result isParameter) {
            if (!isMethod().isMethod(isNameExpr.isMethod())) {
                return isMethod().isMethod().isMethod(isNameExpr.isMethod().isMethod());
            }
            int isVariable = isIntegerConstant;
            getInfoByPlugin_result isVariable = (getInfoByPlugin_result) isNameExpr;
            isNameExpr = isNameExpr.isMethod(isMethod()).isMethod(isNameExpr.isMethod());
            if (isNameExpr != isIntegerConstant) {
                return isNameExpr;
            }
            if (isMethod()) {
                isNameExpr = isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(this.isFieldAccessExpr, isNameExpr.isFieldAccessExpr);
                if (isNameExpr != isIntegerConstant) {
                    return isNameExpr;
                }
            }
            return isIntegerConstant;
        }

        public _Fields isMethod(int isParameter) {
            return isNameExpr.isMethod(isNameExpr);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        public void isMethod(org.apache.thrift.protocol.TProtocol isParameter) throws org.apache.thrift.TException {
            isNameExpr.isMethod(isNameExpr.isMethod()).isMethod().isMethod(isNameExpr, this);
        }

        @Override
        public String isMethod() {
            StringBuilder isVariable = new StringBuilder("isStringConstant");
            boolean isVariable = true;
            isNameExpr.isMethod("isStringConstant");
            if (this.isFieldAccessExpr == null) {
                isNameExpr.isMethod("isStringConstant");
            } else {
                isNameExpr.isMethod(this.isFieldAccessExpr);
            }
            isNameExpr = true;
            isNameExpr.isMethod("isStringConstant");
            return isNameExpr.isMethod();
        }

        public void isMethod() throws org.apache.thrift.TException {
        // isComment
        }

        private void isMethod(java.io.ObjectOutputStream isParameter) throws java.io.IOException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private void isMethod(java.io.ObjectInputStream isParameter) throws java.io.IOException, ClassNotFoundException {
            try {
                isMethod(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(isNameExpr)));
            } catch (org.apache.thrift.TException isParameter) {
                throw new java.io.IOException(isNameExpr.isMethod());
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getInfoByPlugin_resultStandardScheme isMethod() {
                return new getInfoByPlugin_resultStandardScheme();
            }
        }

        private static class isClassOrIsInterface extends StandardScheme<getInfoByPlugin_result> {

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getInfoByPlugin_result isParameter) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField isVariable;
                isNameExpr.isMethod();
                while (true) {
                    isNameExpr = isNameExpr.isMethod();
                    if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                        break;
                    }
                    switch(isNameExpr.isFieldAccessExpr) {
                        case // isComment
                        isIntegerConstant:
                            if (isNameExpr.isFieldAccessExpr == isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr) {
                                {
                                    org.apache.thrift.protocol.TMap isVariable = isNameExpr.isMethod();
                                    isNameExpr.isFieldAccessExpr = new HashMap<String, String>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                                    for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                                        // isComment
                                        String isVariable;
                                        // isComment
                                        String isVariable;
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr = isNameExpr.isMethod();
                                        isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                                    }
                                    isNameExpr.isMethod();
                                }
                                isNameExpr.isMethod(true);
                            } else {
                                isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                            }
                            break;
                        default:
                            isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr.isFieldAccessExpr);
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                // isComment
                isNameExpr.isMethod();
            }

            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getInfoByPlugin_result isParameter) throws org.apache.thrift.TException {
                isNameExpr.isMethod();
                isNameExpr.isMethod(isNameExpr);
                if (isNameExpr.isFieldAccessExpr != null) {
                    isNameExpr.isMethod(isNameExpr);
                    {
                        isNameExpr.isMethod(new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isMethod()));
                        for (Map.Entry<String, String> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod(isNameExpr.isMethod());
                        }
                        isNameExpr.isMethod();
                    }
                    isNameExpr.isMethod();
                }
                isNameExpr.isMethod();
                isNameExpr.isMethod();
            }
        }

        private static class isClassOrIsInterface implements SchemeFactory {

            public getInfoByPlugin_resultTupleScheme isMethod() {
                return new getInfoByPlugin_resultTupleScheme();
            }
        }

        private static class isClassOrIsInterface extends TupleScheme<getInfoByPlugin_result> {

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getInfoByPlugin_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = new BitSet();
                if (isNameExpr.isMethod()) {
                    isNameExpr.isMethod(isIntegerConstant);
                }
                isNameExpr.isMethod(isNameExpr, isIntegerConstant);
                if (isNameExpr.isMethod()) {
                    {
                        isNameExpr.isMethod(isNameExpr.isFieldAccessExpr.isMethod());
                        for (Map.Entry<String, String> isVariable : isNameExpr.isFieldAccessExpr.isMethod()) {
                            isNameExpr.isMethod(isNameExpr.isMethod());
                            isNameExpr.isMethod(isNameExpr.isMethod());
                        }
                    }
                }
            }

            @Override
            public void isMethod(org.apache.thrift.protocol.TProtocol isParameter, getInfoByPlugin_result isParameter) throws org.apache.thrift.TException {
                TTupleProtocol isVariable = (TTupleProtocol) isNameExpr;
                BitSet isVariable = isNameExpr.isMethod(isIntegerConstant);
                if (isNameExpr.isMethod(isIntegerConstant)) {
                    {
                        org.apache.thrift.protocol.TMap isVariable = new org.apache.thrift.protocol.TMap(isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr.isFieldAccessExpr, isNameExpr.isMethod());
                        isNameExpr.isFieldAccessExpr = new HashMap<String, String>(isIntegerConstant * isNameExpr.isFieldAccessExpr);
                        for (int isVariable = isIntegerConstant; isNameExpr < isNameExpr.isFieldAccessExpr; ++isNameExpr) {
                            // isComment
                            String isVariable;
                            // isComment
                            String isVariable;
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr = isNameExpr.isMethod();
                            isNameExpr.isFieldAccessExpr.isMethod(isNameExpr, isNameExpr);
                        }
                    }
                    isNameExpr.isMethod(true);
                }
            }
        }
    }
}
